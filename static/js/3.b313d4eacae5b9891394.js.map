{"version":3,"sources":["webpack:///./node_modules/_htmltowxml@1.0.4@htmltowxml/dist/htmltowxml.js","webpack:///src/views/User/Conversion/htmltox.vue","webpack:///./src/views/User/Conversion/htmltox.vue?c089","webpack:///./src/views/User/Conversion/htmltox.vue","webpack:///./node_modules/_htmlparser@1.7.7@htmlparser/lib/htmlparser.js","webpack:///./node_modules/_htmltoless@0.0.1@htmltoless/lib/htmltoless.js","webpack:///./node_modules/_less@4.1.1@less/dist/less.js"],"names":["Object","defineProperty","exports","value","startTag","endTag","attr","empty","makeMap","block","inline","closeSelf","fillAttrs","special","str","obj","items","split","i","length","debug","html2json","html","bufArray","results","node","child","handler","index","chars","match","stack","last","this","replace","RegExp","all","text","parseEndTag","indexOf","comment","substring","parseStartTag","tag","tagName","rest","unary","toLowerCase","push","start","attrs","name","arguments","escaped","pos","end","HTMLParser","removeDOCTYPE","reduce","pre","map","v","key","vi","va","Number","parseInt","isNaN","join","Array","isArray","includes","class","parent","undefined","unshift","shift","console","error","html2wxml","input","parse","part","log","htmlToJson","len","parseChild","src","htmltox","data","activeLIndex","activeRIndex","leftTabs","to","isBanInput","sourceText","allowTo","computed","rightSliceTabs","tos","rightTabs","forEach","item","disabled","watch","calAllowConverItems","handleConversion","immediate","deep","created","less_default","a","methods","source","leftText","htmlToLess","htmlToWxml","less","htmltoless","appendRightText","wxml","htmltowxml","htmlToText","convert","wordwrap","Conversion_htmltox","render","_vm","_h","$createElement","_c","_self","span","type","model","callback","$$v","expression","_l","label","staticClass","rows","placeholder","$set","_v","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","__filename","__dirname","module","Tautologistics","NodeHtmlParser","ctor","superCtor","tempCtor","ElementType","Text","Directive","Comment","Script","Style","Tag","Parser","options","_options","includeLocation","validateHandler","_handler","reset","RssHandler","super_","call","ignoreWhitespace","verbose","enforceEmptyTags","DefaultHandler","_callback","_reTrim","_reTrimComment","_reWhitespace","_reTagName","_reAttrib","_reTags","prototype","parseComplete","parseChunk","done","_done","handleError","Error","_buffer","parseTags","rawData","element","raw","_parseState","parseTagName","parseAttribs","_elements","writeHandler","_elementsCurrent","_current","_next","_location","row","col","charOffset","inBuffer","_prevTagSep","_tagStack","parseTagAttribs","elements","idxEnd","idx","style","attribRaw","lastIndex","exec","attribs","toString","bufferEnd","test","tagSep","charAt","elementName","pop","prevElement","rawLen","elementNameCI","location","getLocation","c","l","chunk","line","writeTag","writeText","writeComment","writeDirective","forceFlush","constructor","feedRoot","feed","found","DomUtils","getElementsByTagName","dom","children","id","title","ex","link","description","updated","Date","author","list","entry","pubDate","href","_emptyTags","area","base","basefont","br","frame","hr","img","isindex","meta","param","embed","reWhitespace","handleCallback","handleElement","isEmptyTag","baseName","testElement","getElements","currentElement","recurse","limit","elementList","getTest","checkVal","concat","getElementById","result","tag_name","getElementsByTagType","tag_type","htmlparser","buildObject","tempArray","tempObject","classNames","j","removeDuplicates","print","top","n","indent","modifier","parseHtml","factory","extractId","addDataAttr","opt","dataset","hasOwnProperty","JSON","_","browser","createCSS","document","styles","sheet","oldStyleNode","keepOldStyleNode","styleNode","createElement","setAttribute","media","styleSheet","appendChild","createTextNode","childNodes","firstChild","nodeValue","head","nextEl","nextSibling","parentNode","insertBefore","removeChild","cssText","e","currentScript","window","scripts","logger","msg","_fireEvent","warn","info","addListener","listener","_listeners","removeListener","splice","logFunction","Environment","externalEnvironment","fileManagers","requiredFunctions","functions","propName","environmentFunc","bind","getFileManager","filename","currentDirectory","environment","isSync","pluginManager","getFileManagers","fileManager","addFileManager","clearFileManagers","colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","unitConversions","m","cm","mm","in","px","pt","pc","duration","s","ms","angle","rad","Math","PI","deg","grad","turn","Node","visibilityBlocks","nodeVisible","rootNode","parsed","self","get","fileInfo","getIndex","setParent","nodes","set","_index","_fileInfo","isRulesetLike","toCSS","context","strs","genCSS","add","isEmpty","output","accept","visitor","visit","eval","_operate","op","b","fround","precision","numPrecision","toFixed","compare","numericCompare","blocksVisibility","addVisibilityBlock","removeVisibilityBlock","ensureVisibility","ensureInvisibility","isVisible","visibilityInfo","copyVisibilityInfo","Color","rgb","originalForm","alpha","clamp","max","min","toHex","round","assign","luma","r","g","pow","doNotCompress","color","colorFunction","compress","args","toHSL","h","toRGB","splitcolor","operate","other","d","toHSV","toARGB","x","fromKeyword","keyword","slice","Paren","_noSpaceCombinators",""," ","|","Combinator","emptyOrWhitespace","trim","spaceOrEmpty","Element","combinator","isVariable","currentFileInfo","clone","firstSelector","Math$1","ALWAYS","PARENS_DIVISION","PARENS","RewriteUrls","OFF","LOCAL","ALL","getType","payload","copy","target","getPrototypeOf","il","k","jl","__spreadArrays","getOwnPropertyNames","getOwnPropertySymbols","carry","props","newVal","originalObject","includeNonenumerable","propType","propertyIsEnumerable","enumerable","writable","configurable","assignProp","nonenumerable","inputStream","column","copyArray","arr","cloned","prop","defaults","obj1","obj2","newObj","_defaults","defaults_1","copyOptions","opts","strictMath","math","relativeUrls","rewriteUrls","flattenArray","length_1","utils","freeze","__proto__","merge","anonymousFunc","LessError","fileContentMap","currentFilename","message","contents","loc","callLine","lines","func","Function","lineAdjust","callExtract","extract","create","F","stylize","errorTxt","substr","Selector","extendList","condition","evaldCondition","mixinElements_","visitArray","createDerived","newSelector","mediaEmpty","els","parseNode","err","imports","createEmptySelectors","el","sels","olen","mixinElements","isJustParentSelector","extend","getIsOutput","Value","Keyword","True","False","Anonymous","mapLines","rulesetLike","allowRoot","Boolean","MATH","Declaration","important","variable","lastRule","prevMath","evaldValue","mathBypass","evalName","importantScope","importantResult","makeImportant","debugInfo","ctx","lineSeparator","dumpLineNumbers","asComment","asMediaQuery","lineNumber","fileName","filenameWithProtocol","isLineComment","isSilent","isCompressed","contexts","copyFromOriginal","original","destination","propertiesToCopy","parseCopyProperties","Parse","paths","evalCopyProperties","isPathRelative","path","isPathLocalRelative","Eval","frames","enterCalc","calcStack","inCalc","exitCalc","inParenthesis","parensStack","outOfParenthesis","mathOn","isMathOn","pathRequiresRewrite","rewritePath","rootpath","newPath","normalizePath","segment","segments","reverse","functionRegistry","makeRegistry","_data","addMultiple","_this","keys","getLocalFunctions","inherit","defaultFunc","value_","error_","Ruleset","selectors","rules","strictImports","_lookups","_variables","_properties","isRuleset","selCnt","selector","hasVariable","hasOnePassingSelector","toParseSelectors","rule","subRule","ruleset","originalRuleset","root","firstRoot","allowImports","ctxFrames","ctxSelectors","evalImports","rsRules","evalFirst","mediaBlockCount","mediaBlocks","filter","apply","resetCache","bubbleSelectors","importRules","matchArgs","matchCondition","lastSelector","_rulesets","variables","hash","vars","name_1","properties","name_2","decl","parseValue","property","lastDeclaration","toParse","transformDeclaration","nodes_1","rulesets","filtRules","prependRule","find","foundMixins","debugInfo$1","ruleNodes","tabLevel","sep","tabRuleStr","tabSetStr","charsetNodeIndex","importNodeIndex","isCharset","pathCnt","pathSubCnt","currentLastRule","joinSelectors","joinSelector","createParenthesis","elementsToPak","originalElement","replacementParen","insideParent","createSelector","containedElement","addReplacementIntoPath","beginningPath","addPath","replacedElement","originalSelector","newSelectorPath","newJoinedSelector","parentEl","restOfPath","addAllReplacementsIntoPath","addPaths","mergeElementsOnToSelectors","sel","deriveSelector","deriveFrom","newPaths","replaceParentSelector","inSelector","currentElements","newSelectors","selectorsMultiplied","maybeSelector","hadParentSelector","nestedSelector","replaced","nestedPaths","replacedNewSelectors","concatenated","AtRule","isRooted","outputRuleset","mediaPathBackup","mediaBlocksBackup","mediaPath","ruleCnt","DetachedRuleset","callEval","Unit","numerator","denominator","backupUnit","sort","strictUnits","returnStr","is","unitString","toUpperCase","isLength","isSingular","usedUnits","group","mapUnit","groupName","atomicUnit","cancel","counter","count","Dimension","unit","parseFloat","toColor","strValue","String","convertTo","unify","conversions","targetUnit","applyUnit","derivedConversions","MATH$1","Operation","operands","isSpaced","Expression","noSpacing","returnValue","parens","doubleParen","parensInOp","throwAwayComments","functionCaller","isValid","evalArgs","commentFilter","subNodes","__spreadArrays$1","Call","calc","currentMathContext","funcCaller","columnNumber","Variable","evaluating","fun","Property","mergeRules","visitors","ToCSSVisitor","_mergeRules","vArr","Attribute","Quoted","content","quote","variableRegex","propRegex","containsVariables","that","iterativeReplace","regexp","replacementFnc","evaluatedValue","URL","val","isEvald","urlArgs","Media","features","evalTop","evalNested","multiMedia","permute","fragment","Import","css","pathValue","getPath","isPlugin","reference","isVariableImport","evalForImport","evalPath","doEval","registry","skip","importedFilename","newImport","JsEvalNode","evaluateJavaScript","evalContext","javascriptEnabled","jsify","toJS","JavaScript","string","Assignment","Condition","negate","lvalue","rvalue","UnicodeDescriptor","Negative","Extend","option","object_id","next_id","parent_ids","allowBefore","allowAfter","findSelfSelectors","selectorElements","selfElements","selfSelectors","VariableCall","detachedRuleset","NamespaceValue","ruleCall","lookups","Definition","params","variadic","arity","optionalParameters","required","p","evalParams","mixinEnv","evaldArguments","varargs","arg","isNamedFound","argIndex","argsLength","evalCall","_arguments","mixinFrames","allArgsCnt","requiredArgsCnt","MixinCall","mixins","mixin","mixinPath","argValue","f","isRecursive","isOneFound","candidate","defaultResult","noArgumentsFilter","candidates","conditionResult","defFalseEitherCase","defNone","defTrue","defFalse","calcDefGroup","namespace","expand","format","newRules","_setVisibilityToReplacement","replacement","tree","AbstractFileManager","lastIndexOf","tryAppendExtension","ext","tryAppendLessExtension","supportsSync","alwaysMakePathsAbsolute","isPathAbsolute","basePath","laterPath","pathDiff","url","baseUrl","urlDirectories","baseUrlDirectories","urlParts","extractUrlParts","baseUrlParts","diff","hostPart","directories","urlPartsRegex","returner","rawDirectories","rawPath","fileUrl","AbstractPluginLoader","require","evalPlugin","pluginOptions","pluginObj","localModule","shortname","FileManager","trySetOptions","use","loader","validatePlugin","minVersion","compareVersion","addPlugin","plugin","setOptions","version","versionToString","aVersion","bVersion","versionString","printUsage","plugins","_visitArgs","visitDeeper","_hasIndexed","_noop","Visitor","implementation","_implementation","_visitInCache","_visitOutCache","indexNodeTypes","ticker","typeIndex","nodeTypeIndex","fnName","impl","funcOut","visitArgs","newNode","isReplacing","cnt","nonReplacing","out","evald","flatten","nestedCnt","nestedItem","ImportSequencer","onSequencerEmpty","variableImports","_onSequencerEmpty","_currentDepth","addImport","importSequencer","importItem","isReady","tryRun","addVariableImport","variableImport","ImportVisitor","importer","finish","_visitor","_importer","_finish","importCount","onceFileDetectionMap","recursionDetector","_sequencer","run","isFinished","visitImport","importNode","inlineCSS","importParent","processImportNode","evaldImportNode","multiple","importMultiple","onImported","sequencedOnImported","importedAtRoot","fullPath","importVisitor","isOptional","optional","duplicateImport","oldContext","visitDeclaration","declNode","visitDeclarationOut","visitAtRule","atRuleNode","visitAtRuleOut","visitMixinDefinition","mixinDefinitionNode","visitMixinDefinitionOut","visitRuleset","rulesetNode","visitRulesetOut","visitMedia","mediaNode","visitMediaOut","SetTreeVisibilityVisitor","visible","ExtendFinderVisitor","allExtendsStack","allExtends","allSelectorsExtendList","extendOnEveryPath","selectorPath","selExtendList","allSelectorsExtend","foundExtends","firstExtendOnThisSelectorPath","ProcessExtendsVisitor","extendFinder","extendIndices","doExtendChaining","newRoot","checkExtendsForNonMatched","indices","hasFoundMatches","extendsList","extendsListTarget","iterationCount","extendIndex","targetExtendIndex","matches","targetExtend","newExtend","extendsToAdd","extendVisitor","findMatch","selfSelector","extendSelector","extendChainCount","selectorOne","selectorTwo","ruleNode","visitSelector","selectorNode","pathIndex","selectorsToAdd","extendedSelectors","haystackSelectorPath","haystackSelectorIndex","hackstackSelector","hackstackElementIndex","haystackElement","targetCombinator","potentialMatch","needleElements","potentialMatches","matched","initialCombinator","isElementValuesEqual","finished","endPathIndex","endPathElementIndex","elementValue1","elementValue2","replacementSelector","matchIndex","firstElement","newElements","currentSelectorPathIndex","currentSelectorPathElementIndex","currentValue","derived","newAllExtends","JoinSelectorVisitor","CSSVisitorUtils","_context","containsSilentNonBlockedChild","bodyRules","keepOnlyVisibleChilds","owner","thing","hasVisibleSelector","resolveVisibility","originalRules","compiledRulesBody","isVisibleRuleset","mixinNode","visitExtend","extendNode","visitComment","commentNode","visitAtRuleWithBody","visitAtRuleWithoutBody","visitAnonymous","anonymousNode","nodeRules","hasFakeRuleset","getBodyRules","charset","checkValidNodes","isRoot","_compileRulesetPaths","nodeRuleCnt","_removeDuplicateRules","ruleList","ruleCache","ruleCSS","groups","groupsArr","result_1","space_1","comma_1","MarkVisibleSelectorsVisitor","ExtendVisitor","getParserInput","furthest","furthestPossibleErrorMessage","chunks","current","currentPos","saveStack","parserInput","CHARCODE_SPACE","CHARCODE_TAB","CHARCODE_LF","CHARCODE_CR","CHARCODE_FORWARD_SLASH","skipWhitespace","nextChar","oldi","oldj","curr","endIndex","mem","inp","charCodeAt","autoCommentAbsorb","nextNewLine","commentStore","nextStarSlash","save","restore","possibleErrorMessage","state","forget","isWhitespace","offset","code","$re","tok","$char","$str","tokLength","$quoted","startChar","currentPosition","$parseUntil","testChar","returnVal","inComment","blockDepth","blockStack","parseGroups","startPos","lastPos","loop","char","expected","peek","peekChar","currentChar","prevChar","getInput","peekNotNumeric","chunkInput","failFunction","fail","lastOpening","lastOpeningParen","lastMultiComment","lastMultiCommentEndBrace","chunkerCurrentIndex","currentChunkStartIndex","cc","cc2","level","parenLevel","emitFrom","emitChunk","force","fromCharCode","chunker","furthestReachedEnd","furthestChar","parsers","expect","expectChar","getDebugInfo","parseList","currentIndex","returnNodes","parser","additionalData","globalVars","modifyVars","ignored","preText","serializeVars","preProcessors","getPreProcessors","process","banner","contentsIgnoredChars","primary","endInfo","processImports","extendRule","definition","declaration","variableCall","entities","atrule","foundSemiColon","mixinLookup","quoted","forceEscaped","isEscaped","customFuncCall","stop","ieAlpha","boolean","if","prevArgs","isSemiColonSeparated","argsComma","argsSemiColon","assignment","literal","dimension","unicodeDescriptor","entity","ch","variableCurly","curly","propertyCurly","colorKeyword","ud","javascript","js","escape","parsedName","inValue","ruleLookups","isRule","getLookup","hasParens","elem","elemIndex","re","isCall","expressionContainsNamed","nameLoop","expressions","hasSep","cond","argInfo","conditions","lookupValue","attribute","slashedCombinator","isLess","when","blockRuleset","hasDR","ruleProperty","permissiveValue","anonymousValue","untilTokens","testCurrentChar","import","dir","importOptions","mediaFeatures","o","optionName","importOption","mediaFeature","pluginArgs","nonVendorSpecificName","hasIdentifier","hasExpression","hasUnknown","hasBlock","sub","addition","multiplication","operation","operand","needsParens","logical","next","conditionAnd","negatedCondition","parenthesisCondition","atomicCondition","body","me","tryConditionFollowedByParenthesis","delim","simpleProperty","If","trueValue","falseValue","isdefined","colorFunctions","boolean$1","clamp$1","hsla","origColor","hsl","number","rgba","size","m1_1","m2_1","hue","hsv","hsva","vs","floor","perm","saturation","lightness","hsvhue","hsvsaturation","hsvvalue","luminance","saturate","amount","method","desaturate","lighten","darken","fadein","fadeout","fade","spin","mix","color1","color2","weight","w","w1","w2","greyscale","contrast","dark","light","threshold","t","argb","tint","shade","colorBlend","mode","cb","cs","ar","cr","ab","as","colorBlendModeFunctions","multiply","screen","overlay","softlight","sqrt","hardlight","difference","abs","exclusion","average","negation","getItemsFromNode","_SELF","~","expr","_i","values","range","step","from","stepValue","each","rs","iterator","tryEval","valueName","keyName","indexName","MathHelper","fn","mathFunctions","ceil","sin","cos","atan","asin","acos","f$1","fraction","num","minMax","isMin","currentUnified","referenceUnified","unitStatic","unitClone","order","number$1","pi","mod","y","percentage","evaluated","encodeURI","pattern","flags","%","_loop_1","token","encodeURIComponent","isa","Type","isunit","types","isruleset","iscolor","isnumber","isstring","iskeyword","isurl","ispixel","ispercentage","isem","get-unit","fallback","functionThis","data-uri","mimetypeNode","filePathNode","mimetype","filePath","entryPath","fragmentStart","rawBuffer","useBase64","mimeLookup","charsetLookup","fileSync","loadFileSync","buf","encodeBase64","uri","dataUri","svg-gradient","direction","stops","gradientDirectionSvg","position","positionValue","gradientType","rectangleDimension","renderEnv","directionValue","throwArgumentDescriptor","transformTree","evaldRoot","evalEnv","visitorIterator","visitors$1","preEvalVisitors","first","isPreEvalVisitor","isPreVisitor","pm","PluginManager","postProcessors","installedPlugins","pluginCache","Loader","PluginLoader","addPlugins","install","addVisitor","addPreProcessor","preProcessor","priority","indexToInsertAt","addPostProcessor","postProcessor","manager","getPostProcessors","getVisitors","PluginManagerFactory","newFactory","logger$1","parseNodeVersion_1","major","minor","patch","build","lessRoot","sourceMapOutput","sourceMapBuilder","parseTree","importManager","SourceMapBuilder","ParseTree","toCSSOptions","sourceMap","file","getExternalSourceMap","files","rootFilename","SourceMapOutput","contentsIgnoredCharsMap","contentsMap","sourceMapFilename","sourceMapURL","outputFilename","sourceMapOutputFilename","sourceMapBasepath","sourceMapRootpath","outputSourceFiles","sourceMapGenerator","sourceMapFileInline","disableSourcemapAnnotation","sourceMapInputFilename","normalizeFilename","removeBasepath","getCSSAppendage","setExternalSourceMap","isInline","getSourceMapURL","getOutputFilename","getInputFilename","_css","_rootNode","_contentsMap","_contentsIgnoredCharsMap","_sourceMapFilename","_outputFilename","_sourceMapBasepath","_sourceMapRootpath","_outputSourceFiles","_sourceMapGeneratorConstructor","getSourceMapGenerator","_lineNumber","_column","sourceLines","columns","sourceColumns","inputSource","_sourceMapGenerator","addMapping","generated","sourceRoot","setSourceContent","sourceMapContent","stringify","toJSON","ImportManager","rootFileInfo","mime","queue","pluginLoader","fileParsedFunc","importedEqualsRoot","newFileInfo","loadedFile","promise","loadFileCallback","resolvedFilename","newEnv","syncImport","loadPluginSync","loadPlugin","loadFile","then","self_1","Promise","resolve","reject","Render","context_1","pluginManager_1","reUsePluginManager","imports_1","evalResult","fileContent","initial","api","fileCache","doXHR","errback","xhr","XMLHttpRequest","async","isFileProtocol","fileAsync","handleResponse","status","responseText","getResponseHeader","overrideMimeType","open","setRequestHeader","send","onreadystatechange","readyState","supports","clearFileCache","useFileCache","lessText","webInfo","lastModified","FM","fulfill","catch","ErrorReporting","rootHref","errorReporting","errors","errorline","classname","logLevel","errorConsole","timer","filenameNoPath","className","innerHTML","env","setInterval","replaceChild","clearInterval","errorHTML","remove","removeErrorHTML","options$1","depends","lint","insecure","protocol","poll","hostname","port","onReady","addDefaultOptions","LESS_PLUGINS","loggers","LogListener","cache","localStorage","setCSS","setItem","getCSS","getItem","timestamp","valueOf","Cache","imageSize","imageFunctions","image-size","image-width","image-height","ImageSize","typePattern","thisArg","curryArgs","loadStyles","instanceOptions","loadStyleSheet","reload","remaining","local","loadInitialFileCallback","loadStyleSheets","sheets","watchMode","watchTimer","unwatch","registerStylesheetsImmediately","links","rel","registerStylesheets","record","refresh","startTime","endTime","totalMilliseconds","remainingSheets","refreshStyles","resolveOrReject","pageLoadFinished"],"mappings":"oDAEAA,OAAAC,eAAAC,EAAA,cACAC,OAAA,IAGA,IAAAC,EAAA,iHACAC,EAAA,6BACAC,EAAA,qGAGAC,EAAAC,EAAA,sGAGAC,EAAAD,EAAA,iTAGAE,EAAAF,EAAA,oMAIAG,EAAAH,EAAA,oDAGAI,EAAAJ,EAAA,0GAGAK,EAAAL,EAAA,gBAuJA,SAAAA,EAAAM,GAGA,IAFA,IAAAC,KACAC,EAAAF,EAAAG,MAAA,KACAC,EAAA,EAAiBA,EAAAF,EAAAG,OAAkBD,IACnCH,EAAAC,EAAAE,KAAA,EAEA,OAAAH,EAGA,IACAK,EAAA,aAUA,IAAAC,EAAA,SAAAC,GAKA,IAAAC,KACAC,GACAC,KAAA,OACAC,UAiJA,OAlUA,SAAAJ,EAAAK,GACA,IAAAC,EACAC,EACAC,EACAC,KACAC,EAAAV,EAMA,IAJAS,EAAAC,KAAA,WACA,OAAAC,UAAAd,OAAA,IAGAG,GAAA,CAIA,GAHAO,GAAA,EAGAE,EAAAC,QAAAnB,EAAAkB,EAAAC,QA8CAV,IAAAY,QAAA,IAAAC,OAAA,iBAAAJ,EAAAC,OAAA,mBAAAI,EAAAC,GAMA,OALAA,IAAAH,QAAA,sDACAP,EAAAE,OACAF,EAAAE,MAAAQ,GAGA,KAGAC,EAAA,EAAAP,EAAAC,aApBA,GAhCA,GAAAV,EAAAiB,QAAA,YACAX,EAAAN,EAAAiB,QAAA,YAEA,IACAZ,EAAAa,SACAb,EAAAa,QAAAlB,EAAAmB,UAAA,EAAAb,IAEAN,IAAAmB,UAAAb,EAAA,GACAC,GAAA,GAIO,GAAAP,EAAAiB,QAAA,OACPT,EAAAR,EAAAQ,MAAAzB,MAGAiB,IAAAmB,UAAAX,EAAA,GAAAX,QACAW,EAAA,GAAAI,QAAA7B,EAAAiC,GACAT,GAAA,GAIO,GAAAP,EAAAiB,QAAA,OACPT,EAAAR,EAAAQ,MAAA1B,MAGAkB,IAAAmB,UAAAX,EAAA,GAAAX,QACAW,EAAA,GAAAI,QAAA9B,EAAAsC,GACAb,GAAA,GAIAA,EAAA,CAGA,IAAAQ,GAFAT,EAAAN,EAAAiB,QAAA,MAEA,EAAAjB,IAAAmB,UAAA,EAAAb,GACAN,EAAAM,EAAA,KAAAN,EAAAmB,UAAAb,GAEAD,EAAAE,OACAF,EAAAE,MAAAQ,GAgBA,GAAAf,GAAAU,EACA,qBAAAV,EAEAU,EAAAV,EAMA,SAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,GAGA,GAFAF,IAAAG,cAEAtC,EAAAmC,GACA,KAAAb,EAAAC,QAAAtB,EAAAqB,EAAAC,SACAM,EAAA,EAAAP,EAAAC,QAcA,GAVArB,EAAAiC,IAAAb,EAAAC,QAAAY,GACAN,EAAA,EAAAM,IAGAE,EAAAvC,EAAAqC,MAAAE,IAGAf,EAAAiB,KAAAJ,GAGAjB,EAAAsB,MAAA,CACA,IAAAC,KAEAL,EAAAX,QAAA5B,EAAA,SAAAwB,EAAAqB,GACA,IAAAhD,EAAAiD,UAAA,GAAAA,UAAA,GAAAA,UAAA,GAAAA,UAAA,GAAAA,UAAA,GAAAA,UAAA,GAAAxC,EAAAuC,KAAA,GAEAD,EAAAF,MACAG,OACAhD,QACAkD,QAAAlD,EAAA+B,QAAA,2BAIAP,EAAAsB,OACAtB,EAAAsB,MAAAL,EAAAM,EAAAJ,IAKA,SAAAR,EAAAK,EAAAC,GAEA,GAAAA,EAMA,IAAAU,EAAAvB,EAAAZ,OAAA,EAAwCmC,GAAA,GACxCvB,EAAAuB,IAAAV,EADkDU,UALlD,IAAAA,EAAA,EAYA,GAAAA,GAAA,GAEA,QAAApC,EAAAa,EAAAZ,OAAA,EAAoCD,GAAAoC,EAAUpC,IAC9CS,EAAA4B,KACA5B,EAAA4B,IAAAxB,EAAAb,IAKAa,EAAAZ,OAAAmC,GAhEAhB,IAoGAkB,CARAlC,EAXA,SAAAA,GACA,OAAAA,EAIAY,QAAA,kCAAAA,QAAA,iCAAAA,QAAA,gBAAAA,QAAA,gBAMAuB,CADAnC,MAAA,IAAAY,QAAA,cAUAe,MAAA,SAAAN,EAAAO,EAAAJ,GACA1B,EAAAuB,EAAAO,EAAAJ,GAEA,IAAArB,GACAA,KAAA,UACAkB,OAGA,IAAAO,EAAA/B,SACAM,EAAAnB,KAAA4C,EAAAQ,OAAA,SAAAC,EAAArD,GACA,IAAA6C,EAAA7C,EAAA6C,KACAhD,EAAAG,EAAAH,MAoDA,OAzCAA,IAJAA,GADAA,GADAA,GADAA,GADAA,IAAA+B,QAAA,YAAwC,MACxCA,QAAA,UAAsC,MACtCA,QAAA,UAAsC,MACtCA,QAAA,WAAuC,MACvCA,QAAA,YAAwC,MAGxCjB,MAAA,UACA2C,IAAA,SAAAzD,GACA,OAAAA,EAAAoC,QAAA,OACA,IAAAsB,EAAA1D,EAAAc,MAAA,QACA6C,EAAA3D,EAAAc,MAAA,QACA,GAAA4C,EAAA5C,MAAA,OAAAE,OAAA,EACA,OAAA0C,EAAAD,IAAA,SAAAG,GACA,IAAAC,EAAAC,OAAAC,SAAAH,GACA,OAAAI,MAAAH,GAIA7D,EAFA2D,EAAA,MADAE,GAAA,GACA,SAKA,IAAAA,EAAAC,OAAAC,SAAAL,GACA,OAAAM,MAAAH,GAIA7D,EAFA2D,EAAA,MADAE,GAAA,GACA,OAKA,OAAA7D,IAEWiE,KAAA,KAIXT,EAAAR,GACAkB,MAAAC,QAAAX,EAAAR,IAEAQ,EAAAR,GAAAH,KAAA7C,GAGAwD,EAAAR,IAAAQ,EAAAR,GAAAhD,GAIAwD,EAAAR,GAAAhD,EAGAwD,QAeA,IAVA,g4BACAY,SAAA5B,KACAlB,EAAAnB,MAAAmB,EAAAnB,KAAAkE,MACA/C,EAAAnB,KAAAkE,MAAA/C,EAAAnB,KAAAkE,MAAA,IAAA7B,GAEAlB,EAAAnB,KAAAmB,EAAAnB,SACAmB,EAAAnB,KAAAkE,MAAA7B,IAIAG,EAAA,CAIA,IAAA2B,EAAAlD,EAAA,IAAAC,OACAkD,IAAAD,EAAA/C,QACA+C,EAAA/C,UAEA+C,EAAA/C,MAAAsB,KAAAvB,QAEAF,EAAAoD,QAAAlD,IAGA8B,IAAA,SAAAZ,GACAvB,EAAAuB,GAEA,IAAAlB,EAAAF,EAAAqD,QAKA,GAJAnD,EAAAkB,SACAkC,QAAAC,MAAA,mCAGA,IAAAvD,EAAAJ,OACAK,EAAAE,MAAAsB,KAAAvB,OACO,CACP,IAAAgD,EAAAlD,EAAA,QACAmD,IAAAD,EAAA/C,QACA+C,EAAA/C,UAEA+C,EAAA/C,MAAAsB,KAAAvB,KAGAI,MAAA,SAAAQ,GAEA,GADAjB,EAAAiB,GACA,KAAAA,EAAA,CAGA,IAAAZ,GACAA,KAAA,OACAY,QAEA,OAAAd,EAAAJ,OACAK,EAAAE,MAAAsB,KAAAvB,OACO,CACP,IAAAgD,EAAAlD,EAAA,QACAmD,IAAAD,EAAA/C,QACA+C,EAAA/C,UAEA+C,EAAA/C,MAAAsB,KAAAvB,MAGAe,QAAA,SAAAH,GACAjB,EAAAiB,GACA,IAAAZ,GACAA,KAAA,UACAY,QAEAoC,EAAAlD,EAAA,QACAmD,IAAAD,EAAA/C,QACA+C,EAAA/C,UAEA+C,EAAA/C,MAAAsB,KAAAvB,MAGAD,GA+CAtB,EAAA6E,UA5CA,SAAAC,QACA,IAAAA,MAAA,IAEA,IAAAC,EAAA,GACAC,EAAA,GACA,IAAAF,EAEA,OADAH,QAAAM,IAAA,gCACA,EAKA,IAFA,IAAAC,EAAA/D,EAAA2D,GAAAtD,MAEAR,EAAA,EAAAmE,EAAAD,EAAAjE,OAA0CD,EAAAmE,EAASnE,IACnD+D,EAAAK,EAAAF,EAAAlE,IAGA,SAAAoE,EAAA7D,GACA,GAAAA,EAAAC,MAAA,CACAwD,GAAA,gBAAAzD,EAAAnB,KAAAkE,MAAA,KACA,QAAAtD,EAAA,EAAAmE,EAAA5D,EAAAC,MAAAP,OAA8CD,EAAAmE,EAASnE,IACvD,WAAAO,QACA6D,EAAA7D,EAAAC,MAAAR,IAGAgE,GAAA,cAEA,WAAAzD,SACA,OAAAA,EAAAkB,IACAuC,GAAA,iBAAAzD,EAAAnB,KAAAkE,MAAA,UAAA/C,EAAAnB,KAAAiF,IAAA,aAEAL,GAAA,gBAAAzD,EAAAnB,KAAAkE,MAAA,aAGA,QAAA/C,SACAyD,GAAA,SAAAzD,EAAAY,KAAA,WAIA,OAAA6C,EAGA,OAAAD,wIC9VAO,GACArC,KAAA,GACAsC,KAFA,WAGA,OACAC,aAAA,EACAC,aAAA,EACAC,WACAzC,KAAA,OACAd,KAAA,GACAwD,GAAA,cAEAC,YAAA,EACAC,WAAA,GACAC,aAGAC,UACAC,eADA,WAEA,IACAC,EADAlE,KAAA2D,SAAA3D,KAAAyD,cAAAG,GACA5E,MAAA,KAIA,OAHAgB,KAAAmE,UAAAC,QAAA,SAAAC,GACAA,EAAAC,UAAAJ,EAAA5B,SAAA+B,EAAAnD,QAEAlB,KAAAmE,WAEAA,UATA,WAiBA,OAPAnE,KAAA2D,SAAA3D,KAAAyD,cAAAG,GACA5E,MAAA,KACA2C,IAAA,SAAA0C,GACA,OACAnD,KAAAmD,OAMAE,OACAd,cACA/D,QADA,WAEAM,KAAAwE,sBACAxE,KAAAyE,oBAEAC,WAAA,GAEAhB,cACAhE,QADA,WAEAM,KAAAyE,oBAEAC,WAAA,GAEAf,UACAjE,QADA,SACAxB,GACAA,EAAAkC,MACAJ,KAAAmE,UAAAC,QAAA,SAAAC,GACAA,EAAAjE,KAAA,KAGAJ,KAAAyE,oBAGAE,MAAA,IAIAC,QAhEA,WAiEAhC,QAAAM,IAAA2B,EAAAC,IAIAC,SACAN,iBADA,WAEA,IAAAO,EAAAhF,KAAA2D,SAAA3D,KAAAyD,cAAAvC,KACA0C,EAAA5D,KAAAiE,eAAAjE,KAAA0D,cAAAxC,KACAlB,KAAAiF,SAAAjF,KAAA2D,SAAA3D,KAAAyD,cAAArD,KACA,SAAA4E,GAAA,SAAApB,EACA5D,KAAAkF,aACA,SAAAF,GAAA,SAAApB,GACA5D,KAAAmF,cAIAD,WAZA,WAaA,GAAAlF,KAAA8D,WAAA,CACA,IAAAsB,EAAAC,EAAA,MAAArF,KAAA8D,YAEA9D,KAAAsF,gBAAAF,KAEAD,WAlBA,WAmBA,GAAAnF,KAAA8D,WAAA,CACA,IAAAyB,EAAAxH,OAAAyH,EAAA,UAAAzH,CAAAiC,KAAA8D,YACA9D,KAAAsF,gBAAAC,KAGAE,WAxBA,WAyBA,IAAArF,EAAAsF,QAAArG,MACAsG,SAAA,MAEA3F,KAAAsF,gBAAAlF,IAEAkF,gBA9BA,SA8BAlF,GACAJ,KAAAiE,eAAAjE,KAAA0D,cAAAtD,QAAA,SAGAoE,oBAlCA,WAmCA,IAAAZ,EAAA5D,KAAA2D,SAAA3D,KAAA0D,cAAAE,GACA5D,KAAA+D,QAAAH,EAAA5E,MAAA,QCnJe4G,GADEC,OAFjB,WAA0B,IAAAC,EAAA9F,KAAa+F,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAAA,EAAA,UAAAA,EAAA,UAA2ChF,OAAOkF,KAAA,MAAWF,EAAA,WAAgBhF,OAAOmF,KAAA,eAAqBC,OAAQnI,MAAA4H,EAAA,aAAAQ,SAAA,SAAAC,GAAkDT,EAAArC,aAAA8C,GAAqBC,WAAA,iBAA4BV,EAAAW,GAAAX,EAAA,kBAAAzB,EAAA1E,GAA4C,OAAAsG,EAAA,eAAyBpE,IAAAlC,EAAAsB,OAAiByF,MAAArC,EAAAnD,QAAmB+E,EAAA,OAAYU,YAAA,2BAAqCV,EAAA,YAAiBU,YAAA,WAAA1F,OAA8BmF,KAAA,WAAAQ,KAAA,GAAAC,YAAA,SAAkDR,OAAQnI,MAAAmG,EAAA,KAAAiC,SAAA,SAAAC,GAA2CT,EAAAgB,KAAAzC,EAAA,OAAAkC,IAA4BC,WAAA,gBAAyB,OAAQ,OAAAV,EAAAiB,GAAA,KAAAd,EAAA,UAAkChF,OAAOkF,KAAA,KAAUF,EAAA,OAAYU,YAAA,YAAsBb,EAAAiB,GAAA,UAAAjB,EAAAiB,GAAA,KAAAd,EAAA,UAA4ChF,OAAOkF,KAAA,MAAWF,EAAA,WAAgBhF,OAAOmF,KAAA,eAAqBC,OAAQnI,MAAA4H,EAAA,aAAAQ,SAAA,SAAAC,GAAkDT,EAAApC,aAAA6C,GAAqBC,WAAA,iBAA4BV,EAAAW,GAAAX,EAAA,wBAAAzB,EAAA1E,GAAkD,OAAAsG,EAAA,eAAyBpE,IAAAlC,EAAAsB,OAAiByF,MAAArC,EAAAnD,KAAAoD,SAAAD,EAAAC,YAA4C2B,EAAA,OAAYU,YAAA,iCAA2CV,EAAA,YAAiBU,YAAA,WAAA1F,OAA8BmF,KAAA,WAAA9B,SAAAwB,EAAAjC,WAAA+C,KAAA,GAAAC,YAAA,YAA+ER,OAAQnI,MAAAmG,EAAA,KAAAiC,SAAA,SAAAC,GAA2CT,EAAAgB,KAAAzC,EAAA,OAAAkC,IAA4BC,WAAA,gBAAyB,OAAQ,gBAE91CQ,oBCCjB,IAcAC,EAdyBC,EAAQ,OAcjCC,CACE5D,EACAqC,GATF,EAVA,SAAAwB,GACEF,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB,+BC1BhC,SAAAK,EAAAC,IAsBA,WAgBA,GAVA,iBAAAtJ,GAEA,iBAAAuJ,GAEA,iBAAAF,GAEA,iBAAAC,EAIA,CACA,GAAAvH,KAAAyH,gBAEA,GAAAzH,KAAAyH,eAAAC,eACA,YAFA1H,KAAAyH,kBAGAzH,KAAAyH,eAAAC,kBACAzJ,EAAA+B,KAAAyH,eAAAC,eAIA,IAovBAC,EAAAC,EACAC,EArvBAC,GACAC,KAAA,OACAC,UAAA,YACAC,QAAA,UACAC,OAAA,SACAC,MAAA,QACAC,IAAA,OAGA,SAAAC,EAAA3I,EAAA4I,GACAtI,KAAAuI,SAAAD,WACA7F,GAAAzC,KAAAuI,SAAAC,kBACAxI,KAAAuI,SAAAC,iBAAA,GAGAxI,KAAAyI,gBAAA/I,GACAM,KAAA0I,SAAAhJ,EACAM,KAAA2I,QAwYA,SAAAC,EAAAtC,GACAsC,EAAAC,OAAAC,KAAA9I,KAAAsG,GAAyCyC,kBAAA,EAAAC,SAAA,EAAAC,kBAAA,IAqGzC,SAAAC,EAAA5C,EAAAgC,GACAtI,KAAA2I,QACA3I,KAAAuI,SAAAD,WACA7F,GAAAzC,KAAAuI,SAAAQ,mBACA/I,KAAAuI,SAAAQ,kBAAA,QACAtG,GAAAzC,KAAAuI,SAAAS,UACAhJ,KAAAuI,SAAAS,SAAA,QACAvG,GAAAzC,KAAAuI,SAAAU,mBACAjJ,KAAAuI,SAAAU,kBAAA,GACA,mBAAA3C,IACAtG,KAAAmJ,UAAA7C,GAnfA+B,EAAAe,QAAA,eACAf,EAAAgB,eAAA,eACAhB,EAAAiB,cAAA,MACAjB,EAAAkB,WAAA,yBAGAlB,EAAAmB,UACA,sHACAnB,EAAAoB,QAAA,UAKApB,EAAAqB,UAAAC,cAAA,SAAAnG,GACAxD,KAAA2I,QACA3I,KAAA4J,WAAApG,GACAxD,KAAA6J,QAIAxB,EAAAqB,UAAAE,WAAA,SAAApG,GACAxD,KAAA8J,OACA9J,KAAA+J,YAAA,IAAAC,MAAA,wDACAhK,KAAAiK,SAAAzG,EACAxD,KAAAkK,aAIA7B,EAAAqB,UAAAG,KAAA,WACA,IAAA7J,KAAA8J,MAAA,CAKA,GAHA9J,KAAA8J,OAAA,EAGA9J,KAAAiK,QAAA/K,OAAA,CACA,IAAAiL,EAAAnK,KAAAiK,QACAjK,KAAAiK,QAAA,GACA,IAAAG,GACAC,IAAAF,EACA3G,KAAAxD,KAAAsK,aAAAxC,EAAAC,KAAAoC,IAAAlK,QAAAoI,EAAAe,QAAA,IACAhD,KAAApG,KAAAsK,aAEAtK,KAAAsK,aAAAxC,EAAAM,KAAApI,KAAAsK,aAAAxC,EAAAI,QAAAlI,KAAAsK,aAAAxC,EAAAK,QACAiC,EAAAlJ,KAAAlB,KAAAuK,aAAAH,EAAA5G,OACAxD,KAAAwK,aAAAJ,GACApK,KAAAyK,UAAA1J,KAAAqJ,GAGApK,KAAA0K,eACA1K,KAAA0I,SAAAmB,SAIAxB,EAAAqB,UAAAf,MAAA,WACA3I,KAAAiK,QAAA,GACAjK,KAAA8J,OAAA,EACA9J,KAAAyK,aACAzK,KAAA2K,iBAAA,EACA3K,KAAA4K,SAAA,EACA5K,KAAA6K,MAAA,EACA7K,KAAA8K,WACAC,IAAA,EACAC,IAAA,EACAC,WAAA,EACAC,SAAA,GAEAlL,KAAAsK,YAAAxC,EAAAC,KACA/H,KAAAmL,YAAA,GACAnL,KAAAoL,aACApL,KAAA0I,SAAAC,SAKAN,EAAAqB,UAAAnB,SAAA,KACAF,EAAAqB,UAAAhB,SAAA,KACAL,EAAAqB,UAAAO,QAAA,KACA5B,EAAAqB,UAAAI,OAAA,EACAzB,EAAAqB,UAAAe,UAAA,KACApC,EAAAqB,UAAAiB,iBAAA,EACAtC,EAAAqB,UAAAkB,SAAA,EACAvC,EAAAqB,UAAAmB,MAAA,EACAxC,EAAAqB,UAAAoB,UAAA,KACAzC,EAAAqB,UAAAY,YAAAxC,EAAAC,KACAM,EAAAqB,UAAAyB,YAAA,GAGA9C,EAAAqB,UAAA0B,UAAA,KAIA/C,EAAAqB,UAAA2B,gBAAA,SAAAC,GAIA,IAHA,IAAAC,EAAAD,EAAApM,OACAsM,EAAA,EAEAA,EAAAD,GAAA,CACA,IAAAnB,EAAAkB,EAAAE,KACApB,EAAAhE,MAAA0B,EAAAM,KAAAgC,EAAAhE,MAAA0B,EAAAI,QAAAkC,EAAAhE,MAAA0B,EAAA2D,OACAzL,KAAAwK,aAAAJ,GAGA,UAIA/B,EAAAqB,UAAAc,aAAA,SAAAJ,GAEA,GAAAA,EAAAhE,MAAA0B,EAAAI,QAAAkC,EAAAhE,MAAA0B,EAAAK,OAAAiC,EAAAhE,MAAA0B,EAAAM,IAAA,CAGA,IAKAvI,EALAc,EAAAyJ,EAAA5G,KAAAxE,MAAAqJ,EAAAiB,cAAA,MACAoC,EAAAtB,EAAA5G,KAAAhD,UAAAG,EAAAzB,QACA,KAAAwM,EAAAxM,OAAA,GAKA,IADAmJ,EAAAmB,UAAAmC,UAAA,EACA9L,EAAAwI,EAAAmB,UAAAoC,KAAAF,SACAjJ,GAAA2H,EAAAyB,UACAzB,EAAAyB,YAEA,iBAAAhM,EAAA,IAAAA,EAAA,GAAAX,OACAkL,EAAAyB,QAAAhM,EAAA,IAAAA,EAAA,GACI,iBAAAA,EAAA,IAAAA,EAAA,GAAAX,OACJkL,EAAAyB,QAAAhM,EAAA,GAAAiM,YAAAjM,EAAA,GAAAiM,WACI,iBAAAjM,EAAA,IAAAA,EAAA,GAAAX,OACJkL,EAAAyB,QAAAhM,EAAA,IAAAA,EAAA,GACI,iBAAAA,EAAA,IAAAA,EAAA,GAAAX,SACJkL,EAAAyB,QAAAhM,EAAA,IAAAA,EAAA,MAMAwI,EAAAqB,UAAAa,aAAA,SAAA/G,GACA,SAAAA,GAAA,IAAAA,EACA,SACA,IAAA3D,EAAAwI,EAAAkB,WAAAqC,KAAApI,GACA,OAAA3D,GAEAA,EAAA,WAAAA,EAAA,GADA,IAMAwI,EAAAqB,UAAAQ,UAAA,WAEA,IADA,IAAA6B,EAAA/L,KAAAiK,QAAA/K,OAAA,EACAmJ,EAAAoB,QAAAuC,KAAAhM,KAAAiK,UAAA,CACAjK,KAAA6K,MAAAxC,EAAAoB,QAAAkC,UAAA,EACA,IAAAM,EAAAjM,KAAAiK,QAAAiC,OAAAlM,KAAA6K,OACAV,EAAAnK,KAAAiK,QAAAzJ,UAAAR,KAAA4K,SAAA5K,KAAA6K,OAGAT,GACAC,IAAAF,EACA3G,KAAAxD,KAAAsK,aAAAxC,EAAAC,KAAAoC,IAAAlK,QAAAoI,EAAAe,QAAA,IACAhD,KAAApG,KAAAsK,aAGA6B,EAAAnM,KAAAuK,aAAAH,EAAA5G,MAIA,GAAAxD,KAAAoL,UAAAlM,OACA,GAAAc,KAAAoL,UAAApL,KAAAoL,UAAAlM,OAAA,IAAA4I,EAAAI,QACA,cAAAiE,EAAArL,cACAd,KAAAoL,UAAAgB,WAEA,MAAAhC,EAAAC,IAAA/J,QAAA,OAIA,GAFA8J,EAAAhE,KAAA0B,EAAAC,KAEA/H,KAAAyK,UAAAvL,QAAAc,KAAAyK,UAAAzK,KAAAyK,UAAAvL,OAAA,GAAAkH,MAAA0B,EAAAC,MACAsE,EAAArM,KAAAyK,UAAAzK,KAAAyK,UAAAvL,OAAA,IACAmL,IAAAgC,EAAA7I,KAAA6I,EAAAhC,IAAArK,KAAAmL,YAAAf,EAAAC,IACAD,EAAAC,IAAAD,EAAA5G,KAAA,QAKA,GAAAxD,KAAAoL,UAAApL,KAAAoL,UAAAlM,OAAA,IAAA4I,EAAAK,OACA,aAAAgE,EAAArL,cACAd,KAAAoL,UAAAgB,WAEA,MAAAhC,EAAAC,IAAA/J,QAAA,OAIA,GAFA8J,EAAAhE,KAAA0B,EAAAC,KAEA/H,KAAAyK,UAAAvL,QAAAc,KAAAyK,UAAAzK,KAAAyK,UAAAvL,OAAA,GAAAkH,MAAA0B,EAAAC,KAAA,CACA,IAAAsE,EAAArM,KAAAyK,UAAAzK,KAAAyK,UAAAvL,OAAA,GACA,IAAAkL,EAAAC,KACAgC,EAAAhC,IAAAgC,EAAA7I,KAAA6I,EAAAhC,IAAArK,KAAAmL,YAAAf,EAAAC,IACAD,EAAAC,IAAAD,EAAA5G,KAAA,IAEA6I,EAAAhC,IAAAgC,EAAA7I,KAAA6I,EAAAhC,IAAArK,KAAAmL,gBAGA,IAAAf,EAAAC,MACAD,EAAAC,IAAAD,EAAA5G,KAAA4G,EAAAC,UAMA,GAAArK,KAAAoL,UAAApL,KAAAoL,UAAAlM,OAAA,IAAA4I,EAAAG,QAAA,CACA,IAAAqE,EAAAlC,EAAAC,IAAAnL,OACA,QAAAkL,EAAAC,IAAA6B,OAAAI,EAAA,SAAAlC,EAAAC,IAAA6B,OAAAI,EAAA,SAAAL,EAIA,GAFAjM,KAAAoL,UAAAgB,MAEApM,KAAAyK,UAAAvL,QAAAc,KAAAyK,UAAAzK,KAAAyK,UAAAvL,OAAA,GAAAkH,MAAA0B,EAAAG,SACAoE,EAAArM,KAAAyK,UAAAzK,KAAAyK,UAAAvL,OAAA,IACAmL,IAAAgC,EAAA7I,MAAA6I,EAAAhC,IAAAD,EAAAC,KAAApK,QAAAoI,EAAAgB,eAAA,IACAe,EAAAC,IAAAD,EAAA5G,KAAA,GACA4G,EAAAhE,KAAA0B,EAAAC,UAGAqC,EAAAhE,KAAA0B,EAAAG,aAKA,GAFAmC,EAAAhE,KAAA0B,EAAAG,QAEAjI,KAAAyK,UAAAvL,QAAAc,KAAAyK,UAAAzK,KAAAyK,UAAAvL,OAAA,GAAAkH,MAAA0B,EAAAG,SACAoE,EAAArM,KAAAyK,UAAAzK,KAAAyK,UAAAvL,OAAA,IACAmL,IAAAgC,EAAA7I,KAAA6I,EAAAhC,IAAAD,EAAAC,IAAA4B,EACA7B,EAAAC,IAAAD,EAAA5G,KAAA,GACA4G,EAAAhE,KAAA0B,EAAAC,UAGAqC,EAAAC,IAAAD,EAAA5G,KAAA4G,EAAAC,IAAA4B,EAMA,GAAA7B,EAAAhE,MAAA0B,EAAAM,IAAA,CACAgC,EAAAlJ,KAAAiL,EACA,IAAAI,EAAAJ,EAAArL,cAEA,MAAAsJ,EAAAC,IAAA/J,QAAA,QACA8J,EAAAhE,KAAA0B,EAAAG,eACAmC,EAAA,KACAkC,EAAAlC,EAAAC,IAAAnL,OAEA,KAAAkL,EAAAC,IAAA6B,OAAAI,EAAA,SAAAlC,EAAAC,IAAA6B,OAAAI,EAAA,SAAAL,EACA7B,EAAAC,IAAAD,EAAA5G,KAAA4G,EAAAC,IAAApK,QAAAoI,EAAAgB,eAAA,KAEAe,EAAAC,KAAA4B,EACAjM,KAAAoL,UAAArK,KAAA+G,EAAAG,eAGA,GAAAmC,EAAAC,IAAA/J,QAAA,SAAA8J,EAAAC,IAAA/J,QAAA,KACA8J,EAAAhE,KAAA0B,EAAAE,UAGA,UAAAuE,GACAnC,EAAAhE,KAAA0B,EAAAI,OAEA,KAAAkC,EAAA5G,KAAA0I,OAAA9B,EAAA5G,KAAAtE,OAAA,IACAc,KAAAoL,UAAArK,KAAA+G,EAAAI,SAEA,WAAAqE,EACAnC,EAAAhE,KAAA0B,EAAAI,OACA,SAAAqE,GACAnC,EAAAhE,KAAA0B,EAAAK,MAEA,KAAAiC,EAAA5G,KAAA0I,OAAA9B,EAAA5G,KAAAtE,OAAA,IACAc,KAAAoL,UAAArK,KAAA+G,EAAAK,QAEA,UAAAoE,IACAnC,EAAAhE,KAAA0B,EAAAK,OACAiC,EAAAlJ,MAAA,KAAAkJ,EAAAlJ,KAAAgL,OAAA,KACA9B,EAAA5G,KAAA4G,EAAAlJ,MAIA,IAAAkJ,EAAAC,KAAAD,EAAAhE,MAAA0B,EAAAC,OACA/H,KAAAuI,SAAAC,kBAAA4B,EAAAoC,WACApC,EAAAoC,SAAAxM,KAAAyM,YAAArC,EAAAhE,MAAA0B,EAAAM,MAEApI,KAAAwK,aAAAJ,GACApK,KAAAyK,UAAA1J,KAAAqJ,GAGAA,EAAAhE,MAAA0B,EAAAC,MAEAqC,EAAAhE,MAAA0B,EAAAG,SAEAmC,EAAAhE,MAAA0B,EAAAE,WAEA,KAAAoC,EAAA5G,KAAA0I,OAAA9B,EAAA5G,KAAAtE,OAAA,IAEAc,KAAAyK,UAAA1J,MACAsJ,IAAA,IAAAD,EAAAlJ,KACAsC,KAAA,IAAA4G,EAAAlJ,KACAA,KAAA,IAAAkJ,EAAAlJ,KACAkF,KAAAgE,EAAAhE,QAGApG,KAAAsK,YAAA,KAAA2B,EAAAnE,EAAAM,IAAAN,EAAAC,KACA/H,KAAA4K,SAAA5K,KAAA6K,MAAA,EACA7K,KAAAmL,YAAAc,EAGAjM,KAAAuI,SAAAC,kBACAxI,KAAAyM,cACAzM,KAAA8K,UAAAC,KAAA/K,KAAA8K,UAAAI,SACAlL,KAAA8K,UAAAI,SAAA,EACAlL,KAAA8K,UAAAG,WAAA,GAEAjL,KAAAiK,QAAAjK,KAAA4K,UAAAmB,EAAA/L,KAAAiK,QAAAzJ,UAAAR,KAAA4K,UAAA,GACA5K,KAAA4K,SAAA,EAEA5K,KAAA0K,gBAGArC,EAAAqB,UAAA+C,YAAA,SAAAtO,GAMA,IALA,IAAAuO,EACAC,EAAA3M,KAAA8K,UACAxJ,EAAAtB,KAAA4K,UAAAzM,EAAA,KACAyO,EAAAzO,GAAA,GAAAwO,EAAA1B,YAAA,GAAAjL,KAAA4K,SAEQ+B,EAAA1B,WAAA3J,EAAoBqL,EAAA1B,aAE5B,OADAyB,EAAA1M,KAAAiK,QAAAiC,OAAAS,EAAA1B,cAEA0B,EAAAzB,WACAyB,EAAA3B,IAAA,GACI,MAAA0B,GACJC,EAAA3B,MAGA,OACA6B,KAAAF,EAAA5B,IAAA4B,EAAAzB,SAAA,EACAF,IAAA2B,EAAA3B,KAAA4B,EAAA,OAKAvE,EAAAqB,UAAAjB,gBAAA,SAAA/I,GACA,oBAAAA,EACA,UAAAsK,MAAA,4BACA,sBAAAtK,EAAAiJ,MACA,UAAAqB,MAAA,qCACA,sBAAAtK,EAAAmK,KACA,UAAAG,MAAA,oCACA,sBAAAtK,EAAAoN,SACA,UAAA9C,MAAA,wCACA,sBAAAtK,EAAAqN,UACA,UAAA/C,MAAA,yCACA,sBAAAtK,EAAAsN,aACA,UAAAhD,MAAA,4CACA,sBAAAtK,EAAAuN,eACA,UAAAjD,MAAA,+CAIA3B,EAAAqB,UAAAgB,aAAA,SAAAwC,GAEA,GADAA,OACAlN,KAAAoL,UAAAlM,QAAAgO,EAEA,KAAAlN,KAAAyK,UAAAvL,QAAA,CACA,IAAAkL,EAAApK,KAAAyK,UAAA9H,QACA,OAAAyH,EAAAhE,MACA,KAAA0B,EAAAG,QACAjI,KAAA0I,SAAAsE,aAAA5C,GACA,MACA,KAAAtC,EAAAE,UACAhI,KAAA0I,SAAAuE,eAAA7C,GACA,MACA,KAAAtC,EAAAC,KACA/H,KAAA0I,SAAAqE,UAAA3C,GACA,MACA,QACApK,KAAA0I,SAAAoE,SAAA1C,MAMA/B,EAAAqB,UAAAK,YAAA,SAAAlH,GACA,sBAAA7C,KAAA0I,SAAA7F,MAGA,MAAAA,EAFA7C,KAAA0I,SAAA7F,UAiWA8E,EAxVAiB,GAyVAf,EAAA,cACA6B,WAFA9B,EAxVAsB,GA0VAQ,UACA/B,EAAAkB,OAAAjB,EACAD,EAAA+B,UAAA,IAAA7B,EACAF,EAAA+B,UAAAyD,YAAAxF,EA3VAiB,EAAAc,UAAAG,KAAA,WACA,IACAuD,EADAC,KAGAC,EAAAC,EAAAC,qBAAA,SAAAtP,GAA8D,aAAAA,GAAA,QAAAA,GAA6C8B,KAAAyN,KAAA,GAI3G,GAHAH,EAAApO,SACAkO,EAAAE,EAAA,IAEAF,EAAA,CACA,UAAAA,EAAAlM,KAAA,CACAmM,EAAAjH,KAAA,MACAgH,IAAAM,SAAA,GACAL,EAAAM,GAAA,GACA,IACAN,EAAAO,MAAAL,EAAAC,qBAAA,QAAAJ,EAAAM,UAAA,MAAAA,SAAA,GAAAlK,KACK,MAAAqK,IACL,IACAR,EAAAS,KAAAP,EAAAC,qBAAA,OAAAJ,EAAAM,UAAA,MAAAA,SAAA,GAAAlK,KACK,MAAAqK,IACL,IACAR,EAAAU,YAAAR,EAAAC,qBAAA,cAAAJ,EAAAM,UAAA,MAAAA,SAAA,GAAAlK,KACK,MAAAqK,IACL,IACAR,EAAAW,QAAA,IAAAC,KAAAV,EAAAC,qBAAA,gBAAAJ,EAAAM,UAAA,MAAAA,SAAA,GAAAlK,MACK,MAAAqK,IACL,IACAR,EAAAa,OAAAX,EAAAC,qBAAA,iBAAAJ,EAAAM,UAAA,MAAAA,SAAA,GAAAlK,KACK,MAAAqK,IACLR,EAAAtO,SACAwO,EAAAC,qBAAA,OAAAJ,EAAAM,UAAAtJ,QAAA,SAAAC,EAAA1E,EAAAwO,GACA,IAAAC,KACA,IACAA,EAAAT,GAAAJ,EAAAC,qBAAA,OAAAnJ,EAAAqJ,UAAA,MAAAA,SAAA,GAAAlK,KACM,MAAAqK,IACN,IACAO,EAAAR,MAAAL,EAAAC,qBAAA,QAAAnJ,EAAAqJ,UAAA,MAAAA,SAAA,GAAAlK,KACM,MAAAqK,IACN,IACAO,EAAAN,KAAAP,EAAAC,qBAAA,OAAAnJ,EAAAqJ,UAAA,MAAAA,SAAA,GAAAlK,KACM,MAAAqK,IACN,IACAO,EAAAL,YAAAR,EAAAC,qBAAA,cAAAnJ,EAAAqJ,UAAA,MAAAA,SAAA,GAAAlK,KACM,MAAAqK,IACN,IACAO,EAAAC,QAAA,IAAAJ,KAAAV,EAAAC,qBAAA,UAAAnJ,EAAAqJ,UAAA,MAAAA,SAAA,GAAAlK,MACM,MAAAqK,IACNR,EAAAtO,MAAAgC,KAAAqN,SAEI,CACJf,EAAAjH,KAAA,OACA,IACAiH,EAAAM,GAAAJ,EAAAC,qBAAA,KAAAJ,EAAAM,UAAA,MAAAA,SAAA,GAAAlK,KACK,MAAAqK,IACL,IACAR,EAAAO,MAAAL,EAAAC,qBAAA,QAAAJ,EAAAM,UAAA,MAAAA,SAAA,GAAAlK,KACK,MAAAqK,IACL,IACAR,EAAAS,KAAAP,EAAAC,qBAAA,OAAAJ,EAAAM,UAAA,MAAA7B,QAAAyC,KACK,MAAAT,IACL,IACAR,EAAAU,YAAAR,EAAAC,qBAAA,WAAAJ,EAAAM,UAAA,MAAAA,SAAA,GAAAlK,KACK,MAAAqK,IACL,IACAR,EAAAW,QAAA,IAAAC,KAAAV,EAAAC,qBAAA,UAAAJ,EAAAM,UAAA,MAAAA,SAAA,GAAAlK,MACK,MAAAqK,IACL,IACAR,EAAAa,OAAAX,EAAAC,qBAAA,QAAAJ,EAAAM,UAAA,MAAAA,SAAA,GAAAlK,KACK,MAAAqK,IACLR,EAAAtO,SACAwO,EAAAC,qBAAA,QAAAJ,EAAAM,UAAAtJ,QAAA,SAAAC,EAAA1E,EAAAwO,GACA,IAAAC,KACA,IACAA,EAAAT,GAAAJ,EAAAC,qBAAA,KAAAnJ,EAAAqJ,UAAA,MAAAA,SAAA,GAAAlK,KACM,MAAAqK,IACN,IACAO,EAAAR,MAAAL,EAAAC,qBAAA,QAAAnJ,EAAAqJ,UAAA,MAAAA,SAAA,GAAAlK,KACM,MAAAqK,IACN,IACAO,EAAAN,KAAAP,EAAAC,qBAAA,OAAAnJ,EAAAqJ,UAAA,MAAA7B,QAAAyC,KACM,MAAAT,IACN,IACAO,EAAAL,YAAAR,EAAAC,qBAAA,UAAAnJ,EAAAqJ,UAAA,MAAAA,SAAA,GAAAlK,KACM,MAAAqK,IACN,IACAO,EAAAC,QAAA,IAAAJ,KAAAV,EAAAC,qBAAA,UAAAnJ,EAAAqJ,UAAA,MAAAA,SAAA,GAAAlK,MACM,MAAAqK,IACNR,EAAAtO,MAAAgC,KAAAqN,KAIApO,KAAAyN,IAAAJ,EAEAzE,EAAAC,OAAAa,UAAAG,KAAAf,KAAA9I,OAoBAkJ,EAAAqF,YACAC,KAAA,EACAC,KAAA,EACAC,SAAA,EACAC,GAAA,EACA3D,IAAA,EACA4D,MAAA,EACAC,GAAA,EACAC,IAAA,EACA/L,MAAA,EACAgM,QAAA,EACAjB,KAAA,EACAkB,KAAA,EACAC,MAAA,EACAC,MAAA,GAGAhG,EAAAiG,aAAA,QAIAjG,EAAAQ,UAAA+D,IAAA,KAGAvE,EAAAQ,UAAAf,MAAA,WACA3I,KAAAyN,OACAzN,KAAA8J,OAAA,EACA9J,KAAAoL,aACApL,KAAAoL,UAAArL,KAAA,WACA,OAAAC,KAAAd,OAAAc,UAAAd,OAAA,UAIAgK,EAAAQ,UAAAG,KAAA,WACA7J,KAAA8J,OAAA,EACA9J,KAAAoP,eAAA,OAEAlG,EAAAQ,UAAAoD,SAAA,SAAA1C,GACApK,KAAAqP,cAAAjF,IAEAlB,EAAAQ,UAAAqD,UAAA,SAAA3C,GACApK,KAAAuI,SAAAQ,kBACAG,EAAAiG,aAAAnD,KAAA5B,EAAA5G,OAEAxD,KAAAqP,cAAAjF,IAEAlB,EAAAQ,UAAAsD,aAAA,SAAA5C,GACApK,KAAAqP,cAAAjF,IAEAlB,EAAAQ,UAAAuD,eAAA,SAAA7C,GACApK,KAAAqP,cAAAjF,IAEAlB,EAAAQ,UAAA7G,MAAA,SAAAA,GACA7C,KAAAoP,eAAAvM,IAKAqG,EAAAQ,UAAAnB,SAAA,KACAW,EAAAQ,UAAAP,UAAA,KACAD,EAAAQ,UAAAI,OAAA,EACAZ,EAAAQ,UAAA0B,UAAA,KAEAlC,EAAAQ,UAAA0F,eAAA,SAAAvM,GACA,sBAAA7C,KAAAmJ,UAKAnJ,KAAAmJ,UAAAtG,EAAA7C,KAAAyN,UAJA,GAAA5K,EACA,MAAAA,GAMAqG,EAAAQ,UAAA4F,WAAA,SAAAlF,GACA,IAAAlJ,EAAAkJ,EAAAlJ,KAAAJ,cAIA,MAHA,KAAAI,EAAAgL,OAAA,KACAhL,IAAAV,UAAA,IAEAR,KAAAuI,SAAAU,oBAAAC,EAAAqF,WAAArN,IAGAgI,EAAAQ,UAAA2F,cAAA,SAAAjF,GAUA,GATApK,KAAA8J,OACA9J,KAAAoP,eAAA,IAAApF,MAAA,gFACAhK,KAAAuI,SAAAS,iBAGAoB,EAAAC,IACA,OAAAD,EAAAhE,MAAA,UAAAgE,EAAAhE,MAAA,SAAAgE,EAAAhE,aACAgE,EAAA5G,MAEAxD,KAAAoL,UAAArL,OAgBA,GAAAqK,EAAAhE,MAAA0B,EAAAC,MAAAqC,EAAAhE,MAAA0B,EAAAG,SAAAmC,EAAAhE,MAAA0B,EAAAE,UACA,QAAAoC,EAAAlJ,KAAAgL,OAAA,IAGA,IAAAqD,EAAAnF,EAAAlJ,KAAAV,UAAA,GACA,IAAAR,KAAAsP,WAAAlF,GAAA,CAEA,IADA,IAAA/I,EAAArB,KAAAoL,UAAAlM,OAAA,EACAmC,GAAA,GAAArB,KAAAoL,UAAA/J,KAAAH,MAAAqO,IACA,GAAAlO,GAAA,GAAArB,KAAAoL,UAAA,GAAAlK,MAAAqO,EACA,KAAAlO,EAAArB,KAAAoL,UAAAlM,OAAA,GACAc,KAAAoL,UAAAgB,YAIApM,KAAAoL,UAAArL,OAAA2N,WACA1N,KAAAoL,UAAArL,OAAA2N,aACA1N,KAAAoL,UAAArL,OAAA2N,SAAA3M,KAAAqJ,GACApK,KAAAsP,WAAAlF,IACApK,KAAAoL,UAAArK,KAAAqJ,QAIApK,KAAAoL,UAAArL,OAAA2N,WACA1N,KAAAoL,UAAArL,OAAA2N,aACA1N,KAAAoL,UAAArL,OAAA2N,SAAA3M,KAAAqJ,QAtCAA,EAAAhE,MAAA0B,EAAAC,MAAAqC,EAAAhE,MAAA0B,EAAAG,SAAAmC,EAAAhE,MAAA0B,EAAAE,UACA,KAAAoC,EAAAlJ,KAAAgL,OAAA,KACAlM,KAAAyN,IAAA1M,KAAAqJ,GACApK,KAAAsP,WAAAlF,IACApK,KAAAoL,UAAArK,KAAAqJ,IAKApK,KAAAyN,IAAA1M,KAAAqJ,IAkCA,IAAAmD,GACAiC,YAAA,SAAAlH,EAAA8B,GACA,IAAAA,EACA,SAGA,QAAAvI,KAAAyG,EACA,eAAAzG,EAAA,CACA,UAAAuI,EAAAhE,MAAA,UAAAgE,EAAAhE,MAAA,SAAAgE,EAAAhE,KACA,SAEA,IAAAkC,EAAA,SAAA8B,EAAAlJ,MACA,cAEK,eAAAW,GACL,IAAAyG,EAAA,SAAA8B,EAAAhE,MACA,cAEK,mBAAAvE,EAAA,CACL,WAAAuI,EAAAhE,MAAA,WAAAgE,EAAAhE,MAAA,aAAAgE,EAAAhE,KACA,SAEA,IAAAkC,EAAA,aAAA8B,EAAA5G,MACA,cAGA,IAAA4G,EAAAyB,UAAAvD,EAAAzG,GAAAuI,EAAAyB,QAAAhK,IACA,SAKA,UAGA4N,YAAA,SAAAnH,EAAAoH,EAAAC,EAAAC,GAIA,GAHAD,OAAAlN,IAAAkN,GAAA,OAAAA,OACAC,EAAA1N,MAAAD,SAAA2N,KAAA,EAAA3N,SAAA2N,IAEAF,EACA,SAGA,IACAG,EADAvC,KAGA,SAAAwC,EAAAC,GACA,gBAAA7R,GAA6B,OAAAA,GAAA6R,GAE7B,QAAAlO,KAAAyG,EACA,mBAAAA,EAAAzG,KACAyG,EAAAzG,GAAAiO,EAAAxH,EAAAzG,KAQA,GAJA0L,EAAAiC,YAAAlH,EAAAoH,IACApC,EAAAvM,KAAA2O,GAGAE,GAAA,GAAAtC,EAAApO,QAAA0Q,EACA,SAGA,GAAAD,GAAAD,EAAAhC,SACAmC,EAAAH,EAAAhC,aACI,MAAAgC,aAAAtN,OAGJ,SAFAyN,EAAAH,EAKA,QAAAzQ,EAAA,EAAkBA,EAAA4Q,EAAA3Q,SAClBoO,IAAA0C,OAAAzC,EAAAkC,YAAAnH,EAAAuH,EAAA5Q,GAAA0Q,EAAAC,MACAA,GAAA,GAAAtC,EAAApO,QAAA0Q,IAF0C3Q,KAO1C,UAGAgR,eAAA,SAAAtC,EAAA+B,EAAAC,GACA,IAAAO,EAAA3C,EAAAkC,aAAsC9B,MAAS+B,EAAAC,EAAA,GAC/C,OAAAO,EAAAhR,OAAAgR,EAAA,SAGA1C,qBAAA,SAAAtM,EAAAwO,EAAAC,EAAAC,GACA,OAAArC,EAAAkC,aAAgCU,SAAAjP,GAAiBwO,EAAAC,EAAAC,IAGjDQ,qBAAA,SAAAhK,EAAAsJ,EAAAC,EAAAC,GACA,OAAArC,EAAAkC,aAAgCY,SAAAjK,GAAiBsJ,EAAAC,EAAAC,KAYjD3R,EAAAoK,SAEApK,EAAAiL,iBAEAjL,EAAA2K,aAEA3K,EAAA6J,cAEA7J,EAAAsP,WA9xBA,mDCtBA,IAAA+C,EAAiBpJ,EAAQ,SAEzB,WAUA,SAAAqJ,EAAAzR,GAEA,IAAA0R,KAEA,QAAAvR,KAAAH,EACA,WAAAA,EAAAG,GAAAmH,KAAA,CAEA,IAAAqK,KAEA,GAAA3R,EAAAG,GAAA4M,SAAA/M,EAAAG,GAAA4M,QAAAtJ,MAAA,CACAkO,EAAArK,KAAA,QAEA,IAAAsK,EAAA5R,EAAAG,GAAA4M,QAAAtJ,MAAAvD,MAAA,KAKA,QAAA2R,KAJAD,EAAAxR,OAAA,IACAuR,EAAA/C,aAGAgD,EACA,GAAAC,EACAF,EAAAvP,KAAAwP,EAAAC,IAEAF,EAAA/C,SAAAiD,EAAA,MACAF,EAAA/C,SAAAiD,EAAA,GAAAvK,KAAA,mBACAqK,EAAA/C,SAAAiD,EAAA,GAAAzP,KAAAwP,EAAAC,SAKiB7R,EAAAG,GAAA4M,SAAA/M,EAAAG,GAAA4M,QAAA8B,IACjB8C,EAAArK,KAAA,KACAqK,EAAAvP,KAAApC,EAAAG,GAAA4M,QAAA8B,IACiB,QAAA7O,EAAAG,GAAAmH,OACjBqK,EAAArK,KAAA,MACAqK,EAAAvP,KAAApC,EAAAG,GAAAiC,MAGApC,EAAAG,GAAAyO,UAAA5O,EAAAG,GAAAyO,SAAA,YAAA5O,EAAAG,GAAAyO,SAAA,GAAAtH,OACAqK,EAAA/C,SACA+C,EAAA/C,SAAA+C,EAAA/C,SAAAsC,OAAAO,EAAAzR,EAAAG,GAAAyO,WAEA+C,EAAA/C,SAAA6C,EAAAzR,EAAAG,GAAAyO,WAIA8C,EAAAzP,KAAA0P,GAIA,OAAAD,EAGA,SAAAI,EAAA9R,EAAA+R,GAGA,IADA,IAAA5R,EAAAH,EAAAI,OACAD,KAGA,IADA,IAAA0R,EAAA1R,EACA0R,KAEA7R,EAAAG,IAAAH,EAAAG,GAAAiC,MAAApC,EAAA6R,IAAA7R,EAAA6R,GAAAzP,MAAApC,EAAAG,GAAAiC,OAAApC,EAAA6R,GAAAzP,OAEApC,EAAAG,GAAAyO,WAEA5O,EAAA6R,GAAAjD,SAEA5O,EAAA6R,GAAAjD,SAAA5O,EAAA6R,GAAAjD,SAAAsC,OAAAlR,EAAAG,GAAAyO,UAEA5O,EAAA6R,GAAAjD,SAAA5O,EAAAG,GAAAyO,iBAIA5O,EAAAG,IAKA,IAAA6R,KACAlQ,KAEA,QAAAmQ,KAAAjS,EAEAA,EAAAiS,GAAArD,WACA5O,EAAAiS,GAAArD,SAAAkD,EAAA9R,EAAAiS,GAAArD,WAGA,qBAAA5O,EAAAiS,GAAA3K,KACA0K,EAAA/P,KAAAjC,EAAAiS,IAEAnQ,EAAAG,KAAAjC,EAAAiS,IAIA,OAAAD,EAAAd,OAAApP,GAGA,SAAAiQ,EAAA/R,EAAAkS,GACAA,KAAA,GACA,IAAAR,KAEA,QAAAvR,KAAAH,EAAA,CAEA,IAAAmS,EAAA,GAaA,GAZA,UAAAnS,EAAAG,GAAAmH,KACA6K,EAAA,IACa,OAAAnS,EAAAG,GAAAmH,KACb6K,EAAA,IACa,QAAAnS,EAAAG,GAAAmH,KACb6K,EAAA,GACa,qBAAAnS,EAAAG,GAAAmH,OACb6K,EAAA,MAGAT,EAAAzP,KAAAiQ,EAAAC,EAAAnS,EAAAG,GAAAiC,KAAA,OAEApC,EAAAG,GAAAyO,SAAA,CAEA,IAAAA,EAAAmD,EAAA/R,EAAAG,GAAAyO,SAAAsD,EAAA,MACA,QAAAL,KAAAjD,EACA8C,EAAAzP,KAAA2M,EAAAiD,IAIAH,EAAAzP,KAAAiQ,EAAA,KAGA,OAAAR,EAaAvS,EAAAsS,cACAtS,EAAA2S,mBACA3S,EAAA4S,QACA5S,EAAA+E,MAZA,SAAA3D,GAMA,OAFAwR,EADAD,EADAL,EADAlR,EA1IA,SAAAA,GAEA,IAAAK,EAAA,IAAA4Q,EAAApH,eAAA,SAAArG,EAAA4K,MAA+EzE,SAAA,EAAAD,kBAAA,IAG/E,OAFA,IAAAuH,EAAAjI,OAAA3I,GAAAiK,cAAAtK,GAEAK,EAAA+N,IAqIAyD,CAAA7R,MAKA8C,KAAA,OAjJA;;;;;;;;;GCQA,IAAAgP,IAIC,WAAqB,aA2DtB,SAAAC,EAAA9C,GACA,OAAAA,EAAArO,QAAA,0BACAA,QAAA,2BACAA,QAAA,UACAA,QAAA,mBACAA,QAAA,kBACAA,QAAA,WAEA,SAAAoR,EAAA/I,EAAA5H,GACA,QAAA4Q,KAAA5Q,EAAA6Q,QACA,GAAA7Q,EAAA6Q,QAAAC,eAAAF,GACA,WAAAA,GAAA,oBAAAA,GAAA,aAAAA,GAAA,mBAAAA,EACAhJ,EAAAgJ,GAAA5Q,EAAA6Q,QAAAD,QAGA,IACAhJ,EAAAgJ,GAAAG,KAAAzO,MAAAtC,EAAA6Q,QAAAD,IAEA,MAAAI,KAMA,IAAAC,GACAC,UAAA,SAAAC,EAAAC,EAAAC,GAEA,IAAAzD,EAAAyD,EAAAzD,MAAA,GAEAX,EAAA,SAAAoE,EAAAnE,OAAAwD,EAAA9C,IAEA0D,EAAAH,EAAA5B,eAAAtC,GACAsE,GAAA,EAEAC,EAAAL,EAAAM,cAAA,SACAD,EAAAE,aAAA,mBACAL,EAAAM,OACAH,EAAAE,aAAA,QAAAL,EAAAM,OAEAH,EAAAvE,KACAuE,EAAAI,aACAJ,EAAAK,YAAAV,EAAAW,eAAAV,IAEAG,EAAA,OAAAD,KAAAS,WAAAvT,OAAA,GAAAgT,EAAAO,WAAAvT,OAAA,GACA8S,EAAAU,WAAAC,YAAAT,EAAAQ,WAAAC,WAEA,IAAAC,EAAAf,EAAArE,qBAAA,WAGA,UAAAwE,IAAA,IAAAC,EAAA,CACA,IAAAY,EAAAd,KAAAe,aAAA,KACAD,EACAA,EAAAE,WAAAC,aAAAd,EAAAW,GAGAD,EAAAL,YAAAL,GASA,GANAF,IAAA,IAAAC,GACAD,EAAAe,WAAAE,YAAAjB,GAKAE,EAAAI,WACA,IACAJ,EAAAI,WAAAY,QAAApB,EAEA,MAAAqB,GACA,UAAAnJ,MAAA,2CAIAoJ,cAAA,SAAAC,GACA,IAEAC,EAFAzB,EAAAwB,EAAAxB,SACA,OAAAA,EAAAuB,gBACAE,EAAAzB,EAAArE,qBAAA,WACA8F,EAAApU,OAAA,KA2CAqU,GACA1Q,MAAA,SAAA2Q,GACAxT,KAAAyT,WAAA,QAAAD,IAEAE,KAAA,SAAAF,GACAxT,KAAAyT,WAAA,OAAAD,IAEAG,KAAA,SAAAH,GACAxT,KAAAyT,WAAA,OAAAD,IAEArU,MAAA,SAAAqU,GACAxT,KAAAyT,WAAA,QAAAD,IAEAI,YAAA,SAAAC,GACA7T,KAAA8T,WAAA/S,KAAA8S,IAEAE,eAAA,SAAAF,GACA,QAAA5U,EAAA,EAA2BA,EAAAe,KAAA8T,WAAA5U,OAA4BD,IACvD,GAAAe,KAAA8T,WAAA7U,KAAA4U,EAEA,YADA7T,KAAA8T,WAAAE,OAAA/U,EAAA,IAKAwU,WAAA,SAAArN,EAAAoN,GACA,QAAAvU,EAAA,EAA2BA,EAAAe,KAAA8T,WAAA5U,OAA4BD,IAAA,CACvD,IAAAgV,EAAAjU,KAAA8T,WAAA7U,GAAAmH,GACA6N,GACAA,EAAAT,KAIAM,eAOAI,EAAA,WACA,SAAAA,EAAAC,EAAAC,GACApU,KAAAoU,mBACAD,QAIA,IAHA,IACAE,KACAC,EAAAD,EAAArE,QAFA,sEAGA/Q,EAAA,EAA2BA,EAAAqV,EAAApV,OAAsBD,IAAA,CACjD,IAAAsV,EAAAD,EAAArV,GACAuV,EAAAL,EAAAI,GACAC,EACAxU,KAAAuU,GAAAC,EAAAC,KAAAN,GAEAlV,EAAAoV,EAAAnV,QACAc,KAAA0T,KAAA,8CAAAa,IA6BA,OAzBAL,EAAAxK,UAAAgL,eAAA,SAAAC,EAAAC,EAAAtM,EAAAuM,EAAAC,GACAH,GACApB,EAAAG,KAAA,kFAEA,MAAAkB,GACArB,EAAAG,KAAA,qFAEA,IAAAU,EAAApU,KAAAoU,aACA9L,EAAAyM,gBACAX,KAAApE,OAAAoE,GAAApE,OAAA1H,EAAAyM,cAAAC,oBAEA,QAAA/V,EAAAmV,EAAAlV,OAAA,EAAiDD,GAAA,EAAQA,IAAA,CACzD,IAAAgW,EAAAb,EAAAnV,GACA,GAAAgW,EAAAH,EAAA,2BAAAH,EAAAC,EAAAtM,EAAAuM,GACA,OAAAI,EAGA,aAEAf,EAAAxK,UAAAwL,eAAA,SAAAD,GACAjV,KAAAoU,aAAArT,KAAAkU,IAEAf,EAAAxK,UAAAyL,kBAAA,WACAnV,KAAAoU,iBAEAF,EA3CA,GA8CAkB,GACAC,UAAA,UACAC,aAAA,UACAC,KAAA,UACAC,WAAA,UACAC,MAAA,UACAC,MAAA,UACAC,OAAA,UACAC,MAAA,UACAC,eAAA,UACAC,KAAA,UACAC,WAAA,UACAC,MAAA,UACAC,UAAA,UACAC,UAAA,UACAC,WAAA,UACAC,UAAA,UACAC,MAAA,UACAC,eAAA,UACAC,SAAA,UACAC,QAAA,UACAC,KAAA,UACAC,SAAA,UACAC,SAAA,UACAC,cAAA,UACAC,SAAA,UACAC,SAAA,UACAC,UAAA,UACAC,UAAA,UACAC,YAAA,UACAC,eAAA,UACAC,WAAA,UACAC,WAAA,UACAC,QAAA,UACAC,WAAA,UACAC,aAAA,UACAC,cAAA,UACAC,cAAA,UACAC,cAAA,UACAC,cAAA,UACAC,WAAA,UACAC,SAAA,UACAC,YAAA,UACAC,QAAA,UACAC,QAAA,UACAC,WAAA,UACAC,UAAA,UACAC,YAAA,UACAC,YAAA,UACAC,QAAA,UACAC,UAAA,UACAC,WAAA,UACAC,KAAA,UACAC,UAAA,UACAC,KAAA,UACAC,KAAA,UACAC,MAAA,UACAC,YAAA,UACAC,SAAA,UACAC,QAAA,UACAC,UAAA,UACAC,OAAA,UACAC,MAAA,UACAC,MAAA,UACAC,SAAA,UACAC,cAAA,UACAC,UAAA,UACAC,aAAA,UACAC,UAAA,UACAC,WAAA,UACAC,UAAA,UACAC,qBAAA,UACAC,UAAA,UACAC,UAAA,UACAC,WAAA,UACAC,UAAA,UACAC,YAAA,UACAC,cAAA,UACAC,aAAA,UACAC,eAAA,UACAC,eAAA,UACAC,eAAA,UACAC,YAAA,UACAC,KAAA,UACAC,UAAA,UACAC,MAAA,UACAC,QAAA,UACAC,OAAA,UACAC,iBAAA,UACAC,WAAA,UACAC,aAAA,UACAC,aAAA,UACAC,eAAA,UACAC,gBAAA,UACAC,kBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,aAAA,UACAC,UAAA,UACAC,UAAA,UACAC,SAAA,UACAC,YAAA,UACAC,KAAA,UACAC,QAAA,UACAC,MAAA,UACAC,UAAA,UACAC,OAAA,UACAC,UAAA,UACAC,OAAA,UACAC,cAAA,UACAC,UAAA,UACAC,cAAA,UACAC,cAAA,UACAC,WAAA,UACAC,UAAA,UACAC,KAAA,UACAC,KAAA,UACAC,KAAA,UACAC,WAAA,UACAC,OAAA,UACAC,cAAA,UACAC,IAAA,UACAC,UAAA,UACAC,UAAA,UACAC,YAAA,UACAC,OAAA,UACAC,WAAA,UACAC,SAAA,UACAC,SAAA,UACAC,OAAA,UACAC,OAAA,UACAC,QAAA,UACAC,UAAA,UACAC,UAAA,UACAC,UAAA,UACAC,KAAA,UACAC,YAAA,UACAC,UAAA,UACAC,IAAA,UACAC,KAAA,UACAC,QAAA,UACAC,OAAA,UACAC,UAAA,UACAC,OAAA,UACAC,MAAA,UACAC,MAAA,UACAC,WAAA,UACAC,OAAA,UACAC,YAAA,WAGAC,GACAvf,QACAwf,EAAA,EACAC,GAAA,IACAC,GAAA,KACAC,GAAA,MACAC,GAAA,SACAC,GAAA,SACAC,GAAA,aAEAC,UACAC,EAAA,EACAC,GAAA,MAEAC,OACAC,IAAA,KAAAC,KAAAC,IACAC,IAAA,MACAC,KAAA,MACAC,KAAA,IAIAlc,GAAgB4R,SAAAqJ,mBAQhBkB,EAAA,WACA,SAAAA,IACA3f,KAAAwC,OAAA,KACAxC,KAAA4f,sBAAAnd,EACAzC,KAAA6f,iBAAApd,EACAzC,KAAA8f,SAAA,KACA9f,KAAA+f,OAAA,KACA,IAAAC,EAAAhgB,KACAjC,OAAAC,eAAAgC,KAAA,mBACAigB,IAAA,WAAkC,OAAAD,EAAAE,cAElCniB,OAAAC,eAAAgC,KAAA,SACAigB,IAAA,WAAkC,OAAAD,EAAAG,cA8IlC,OA3IAR,EAAAjW,UAAA0W,UAAA,SAAAC,EAAA7d,GACA,SAAA8d,EAAA9gB,GACAA,gBAAAmgB,IACAngB,EAAAgD,UAGAJ,MAAAC,QAAAge,GACAA,EAAAjc,QAAAkc,GAGAA,EAAAD,IAGAV,EAAAjW,UAAAyW,SAAA,WACA,OAAAngB,KAAAugB,QAAAvgB,KAAAwC,QAAAxC,KAAAwC,OAAA2d,YAAA,GAEAR,EAAAjW,UAAAwW,SAAA,WACA,OAAAlgB,KAAAwgB,WAAAxgB,KAAAwC,QAAAxC,KAAAwC,OAAA0d,gBAEAP,EAAAjW,UAAA+W,cAAA,WAAoD,UACpDd,EAAAjW,UAAAgX,MAAA,SAAAC,GACA,IAAAC,KASA,OARA5gB,KAAA6gB,OAAAF,GACAG,IAAA,SAAAlU,EAAAsT,EAAAvgB,GACAihB,EAAA7f,KAAA6L,IAEAmU,QAAA,WACA,WAAAH,EAAA1hB,UAGA0hB,EAAAze,KAAA,KAEAwd,EAAAjW,UAAAmX,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA9gB,KAAA9B,QAEAyhB,EAAAjW,UAAAuX,OAAA,SAAAC,GACAlhB,KAAA9B,MAAAgjB,EAAAC,MAAAnhB,KAAA9B,QAEAyhB,EAAAjW,UAAA0X,KAAA,WAA2C,OAAAphB,MAC3C2f,EAAAjW,UAAA2X,SAAA,SAAAV,EAAAW,EAAAxc,EAAAyc,GACA,OAAAD,GACA,eAAAxc,EAAAyc,EACA,eAAAzc,EAAAyc,EACA,eAAAzc,EAAAyc,EACA,eAAAzc,EAAAyc,IAGA5B,EAAAjW,UAAA8X,OAAA,SAAAb,EAAAziB,GACA,IAAAujB,EAAAd,KAAAe,aAEA,SAAA1f,QAAA9D,EAAA,OAAAyjB,QAAAF,IAAAvjB,GAEAyhB,EAAAiC,QAAA,SAAA9c,EAAAyc,GAMA,GAAAzc,EAAA,SAGA,WAAAyc,EAAAnb,MAAA,cAAAmb,EAAAnb,KACA,OAAAtB,EAAA8c,QAAAL,GAEA,GAAAA,EAAAK,QACA,OAAAL,EAAAK,QAAA9c,GAEA,GAAAA,EAAAsB,OAAAmb,EAAAnb,KAAA,CAKA,GAFAtB,IAAA5G,MACAqjB,IAAArjB,OACAkE,MAAAC,QAAAyC,GACA,OAAAA,IAAAyc,EAAA,OAAA9e,EAEA,GAAAqC,EAAA5F,SAAAqiB,EAAAriB,OAAA,CAGA,QAAAD,EAAA,EAA2BA,EAAA6F,EAAA5F,OAAcD,IACzC,OAAA0gB,EAAAiC,QAAA9c,EAAA7F,GAAAsiB,EAAAtiB,IACA,OAGA,YAEA0gB,EAAAkC,eAAA,SAAA/c,EAAAyc,GACA,OAAAzc,EAAAyc,GAAA,EACAzc,IAAAyc,EAAA,EACAzc,EAAAyc,EAAA,OAAA9e,GAGAkd,EAAAjW,UAAAoY,iBAAA,WAIA,OAHA,MAAA9hB,KAAA4f,mBACA5f,KAAA4f,iBAAA,GAEA,IAAA5f,KAAA4f,kBAEAD,EAAAjW,UAAAqY,mBAAA,WACA,MAAA/hB,KAAA4f,mBACA5f,KAAA4f,iBAAA,GAEA5f,KAAA4f,iBAAA5f,KAAA4f,iBAAA,GAEAD,EAAAjW,UAAAsY,sBAAA,WACA,MAAAhiB,KAAA4f,mBACA5f,KAAA4f,iBAAA,GAEA5f,KAAA4f,iBAAA5f,KAAA4f,iBAAA,GAIAD,EAAAjW,UAAAuY,iBAAA,WACAjiB,KAAA6f,aAAA,GAIAF,EAAAjW,UAAAwY,mBAAA,WACAliB,KAAA6f,aAAA,GAMAF,EAAAjW,UAAAyY,UAAA,WACA,OAAAniB,KAAA6f,aAEAF,EAAAjW,UAAA0Y,eAAA,WACA,OACAxC,iBAAA5f,KAAA4f,iBACAC,YAAA7f,KAAA6f,cAGAF,EAAAjW,UAAA2Y,mBAAA,SAAA1O,GACAA,IAGA3T,KAAA4f,iBAAAjM,EAAAiM,iBACA5f,KAAA6f,YAAAlM,EAAAkM,cAEAF,EA1JA,GAgKA2C,EAAA,SAAAC,EAAAzd,EAAA0d,GACA,IAAAxC,EAAAhgB,KAOAoC,MAAAC,QAAAkgB,GACAviB,KAAAuiB,MAEAA,EAAArjB,QAAA,GACAc,KAAAuiB,OACAA,EAAA1iB,MAAA,SAA2B8B,IAAA,SAAA+K,EAAAzN,GAC3BA,EAAA,EACA+gB,EAAAuC,IAAAxhB,KAAAkB,SAAAyK,EAAA,KAGAsT,EAAAyC,MAAAxgB,SAAAyK,EAAA,YAKA1M,KAAAuiB,OACAA,EAAAvjB,MAAA,IAAA2C,IAAA,SAAA+K,EAAAzN,GACAA,EAAA,EACA+gB,EAAAuC,IAAAxhB,KAAAkB,SAAAyK,IAAA,KAGAsT,EAAAyC,MAAAxgB,SAAAyK,IAAA,WAIA1M,KAAAyiB,MAAAziB,KAAAyiB,QAAA,iBAAA3d,IAAA,QACA,IAAA0d,IACAxiB,KAAA9B,MAAAskB,IAoLA,SAAAE,EAAA9gB,EAAA+gB,GACA,OAAArD,KAAAsD,IAAAtD,KAAAqD,IAAA/gB,EAAA,GAAA+gB,GAEA,SAAAE,EAAAjhB,GACA,UAAAA,EAAAD,IAAA,SAAA+K,GAEA,QADAA,EAAAgW,EAAApD,KAAAwD,MAAApW,GAAA,MACA,WAAAA,EAAAZ,SAAA,MACS3J,KAAA,IAxLTmgB,EAAA5Y,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,QACA4c,KAAA,WACA,IAAAC,EAAAjjB,KAAAuiB,IAAA,OAAAW,EAAAljB,KAAAuiB,IAAA,OAAAhB,EAAAvhB,KAAAuiB,IAAA,OAIA,aAHAU,KAAA,OAAAA,EAAA,MAAA3D,KAAA6D,KAAAF,EAAA,kBAGA,OAFAC,KAAA,OAAAA,EAAA,MAAA5D,KAAA6D,KAAAD,EAAA,kBAEA,OADA3B,KAAA,OAAAA,EAAA,MAAAjC,KAAA6D,KAAA5B,EAAA,mBAGAV,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA9gB,KAAA0gB,MAAAC,KAEAD,MAAA,SAAAC,EAAAyC,GACA,IACAC,EACAZ,EACAa,EAHAC,EAAA5C,KAAA4C,WAAAH,EAIAI,KAKA,GADAf,EAAAziB,KAAAwhB,OAAAb,EAAA3gB,KAAAyiB,OACAziB,KAAA9B,MACA,OAAA8B,KAAA9B,MAAAoC,QAAA,OACAmiB,EAAA,IACAa,EAAA,YAGA,QAAAtjB,KAAA9B,MAAAoC,QAAA,OASA,OAAAN,KAAA9B,MAPAolB,EADAb,EAAA,EACA,OAGA,WAQAA,EAAA,IACAa,EAAA,QAGA,OAAAA,GACA,WACAE,EAAAxjB,KAAAuiB,IAAA5gB,IAAA,SAAA+K,GACA,OAAAgW,EAAApD,KAAAwD,MAAApW,GAAA,OACqBsD,OAAA0S,EAAAD,EAAA,IACrB,MACA,WACAe,EAAAziB,KAAA2hB,EAAAD,EAAA,IACA,UACAY,EAAArjB,KAAAyjB,QACAD,GACAxjB,KAAAwhB,OAAAb,EAAA0C,EAAAK,GACA1jB,KAAAwhB,OAAAb,EAAA,IAAA0C,EAAAnE,GAAA,IACAlf,KAAAwhB,OAAAb,EAAA,IAAA0C,EAAA1W,GAAA,KACAqD,OAAAwT,GAEA,GAAAF,EAEA,OAAAA,EAAA,IAAAE,EAAArhB,KAAA,KAAAohB,EAAA,aAGA,GADAF,EAAArjB,KAAA2jB,QACAJ,EAAA,CACA,IAAAK,EAAAP,EAAArkB,MAAA,IAEA4kB,EAAA,KAAAA,EAAA,IAAAA,EAAA,KAAAA,EAAA,IAAAA,EAAA,KAAAA,EAAA,KACAP,EAAA,IAAAO,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAGA,OAAAP,GAQAQ,QAAA,SAAAlD,EAAAW,EAAAwC,GAGA,IAFA,IAAAvB,EAAA,IAAAngB,MAAA,GACAqgB,EAAAziB,KAAAyiB,OAAA,EAAAqB,EAAArB,OAAAqB,EAAArB,MACA/V,EAAA,EAA2BA,EAAA,EAAOA,IAClC6V,EAAA7V,GAAA1M,KAAAqhB,SAAAV,EAAAW,EAAAthB,KAAAuiB,IAAA7V,GAAAoX,EAAAvB,IAAA7V,IAEA,WAAA4V,EAAAC,EAAAE,IAEAkB,MAAA,WACA,OAAAd,EAAA7iB,KAAAuiB,MAEAkB,MAAA,WACA,IAEAC,EACAxE,EAHA+D,EAAAjjB,KAAAuiB,IAAA,OAAAW,EAAAljB,KAAAuiB,IAAA,OAAAhB,EAAAvhB,KAAAuiB,IAAA,OAAAzd,EAAA9E,KAAAyiB,MACAE,EAAArD,KAAAqD,IAAAM,EAAAC,EAAA3B,GAAAqB,EAAAtD,KAAAsD,IAAAK,EAAAC,EAAA3B,GAGA5U,GAAAgW,EAAAC,GAAA,EACAmB,EAAApB,EAAAC,EACA,GAAAD,IAAAC,EACAc,EAAAxE,EAAA,MAEA,CAEA,OADAA,EAAAvS,EAAA,GAAAoX,GAAA,EAAApB,EAAAC,GAAAmB,GAAApB,EAAAC,GACAD,GACA,KAAAM,EACAS,GAAAR,EAAA3B,GAAAwC,GAAAb,EAAA3B,EAAA,KACA,MACA,KAAA2B,EACAQ,GAAAnC,EAAA0B,GAAAc,EAAA,EACA,MACA,KAAAxC,EACAmC,GAAAT,EAAAC,GAAAa,EAAA,EAGAL,GAAA,EAEA,OAAoBA,EAAA,IAAAA,EAAAxE,IAAAvS,IAAA7H,MAGpBkf,MAAA,WACA,IAEAN,EACAxE,EAHA+D,EAAAjjB,KAAAuiB,IAAA,OAAAW,EAAAljB,KAAAuiB,IAAA,OAAAhB,EAAAvhB,KAAAuiB,IAAA,OAAAzd,EAAA9E,KAAAyiB,MACAE,EAAArD,KAAAqD,IAAAM,EAAAC,EAAA3B,GAAAqB,EAAAtD,KAAAsD,IAAAK,EAAAC,EAAA3B,GAGA3f,EAAA+gB,EACAoB,EAAApB,EAAAC,EAOA,GALA1D,EADA,IAAAyD,EACA,EAGAoB,EAAApB,EAEAA,IAAAC,EACAc,EAAA,MAEA,CACA,OAAAf,GACA,KAAAM,EACAS,GAAAR,EAAA3B,GAAAwC,GAAAb,EAAA3B,EAAA,KACA,MACA,KAAA2B,EACAQ,GAAAnC,EAAA0B,GAAAc,EAAA,EACA,MACA,KAAAxC,EACAmC,GAAAT,EAAAC,GAAAa,EAAA,EAGAL,GAAA,EAEA,OAAoBA,EAAA,IAAAA,EAAAxE,IAAAtd,IAAAkD,MAEpBmf,OAAA,WACA,OAAApB,GAAA,IAAA7iB,KAAAyiB,OAAAzS,OAAAhQ,KAAAuiB,OAEAX,QAAA,SAAAsC,GACA,OAAAA,EAAA3B,KACA2B,EAAA3B,IAAA,KAAAviB,KAAAuiB,IAAA,IACA2B,EAAA3B,IAAA,KAAAviB,KAAAuiB,IAAA,IACA2B,EAAA3B,IAAA,KAAAviB,KAAAuiB,IAAA,IACA2B,EAAAzB,QAAAziB,KAAAyiB,MAAA,OAAAhgB,KAGA6f,EAAA6B,YAAA,SAAAC,GACA,IAAA1X,EACA7K,EAAAuiB,EAAAtjB,cAOA,GANAsU,EAAA5D,eAAA3P,GACA6K,EAAA,IAAA4V,EAAAlN,EAAAvT,GAAAwiB,MAAA,IAEA,gBAAAxiB,IACA6K,EAAA,IAAA4V,GAAA,WAEA5V,EAEA,OADAA,EAAAxO,MAAAkmB,EACA1X,GAaA,IAAA4X,EAAA,SAAA9kB,GACAQ,KAAA9B,MAAAsB,GAEA8kB,EAAA5a,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,QACAya,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA,KACA9gB,KAAA9B,MAAA2iB,OAAAF,EAAAK,GACAA,EAAAF,IAAA,MAEAM,KAAA,SAAAT,GACA,WAAA2D,EAAAtkB,KAAA9B,MAAAkjB,KAAAT,OAIA,IAAA4D,GACAC,IAAA,EACAC,KAAA,EACAC,KAAA,GAEAC,EAAA,SAAAzmB,GACA,MAAAA,GACA8B,KAAA9B,MAAA,IACA8B,KAAA4kB,mBAAA,IAGA5kB,KAAA9B,UAAA2mB,OAAA,GACA7kB,KAAA4kB,kBAAA,KAAA5kB,KAAA9B,QAGAymB,EAAAjb,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,aACAya,OAAA,SAAAF,EAAAK,GACA,IAAA8D,EAAAnE,EAAA4C,UAAAgB,EAAAvkB,KAAA9B,OAAA,OACA8iB,EAAAF,IAAAgE,EAAA9kB,KAAA9B,MAAA4mB,MAIA,IAAAC,EAAA,SAAAC,EAAA9mB,EAAA+mB,EAAAtlB,EAAAulB,EAAA9C,GACApiB,KAAAglB,wBAAAL,EACAK,EAAA,IAAAL,EAAAK,GAEAhlB,KAAA9B,MADA,iBAAAA,EACAA,EAAA2mB,OAEA3mB,GAIA,GAEA8B,KAAAilB,aACAjlB,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAAqiB,mBAAAD,GACApiB,KAAAogB,UAAApgB,KAAAglB,WAAAhlB,OAEA+kB,EAAArb,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,UACA6a,OAAA,SAAAC,GACA,IAAAhjB,EAAA8B,KAAA9B,MACA8B,KAAAglB,WAAA9D,EAAAC,MAAAnhB,KAAAglB,YACA,iBAAA9mB,IACA8B,KAAA9B,MAAAgjB,EAAAC,MAAAjjB,KAGAkjB,KAAA,SAAAT,GACA,WAAAoE,EAAA/kB,KAAAglB,WAAAhlB,KAAA9B,MAAAkjB,KAAAphB,KAAA9B,MAAAkjB,KAAAT,GAAA3gB,KAAA9B,MAAA8B,KAAAilB,WAAAjlB,KAAAmgB,WAAAngB,KAAAkgB,WAAAlgB,KAAAoiB,mBAEA+C,MAAA,WACA,WAAAJ,EAAA/kB,KAAAglB,WAAAhlB,KAAA9B,MAAA8B,KAAAilB,WAAAjlB,KAAAmgB,WAAAngB,KAAAkgB,WAAAlgB,KAAAoiB,mBAEAvB,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA9gB,KAAA0gB,MAAAC,GAAA3gB,KAAAkgB,WAAAlgB,KAAAmgB,aAEAO,MAAA,SAAAC,GACAA,QACA,IAAAziB,EAAA8B,KAAA9B,MACAknB,EAAAzE,EAAAyE,cAQA,OAPAlnB,aAAAomB,IAGA3D,EAAAyE,eAAA,GAEAlnB,IAAAwiB,MAAAxiB,EAAAwiB,MAAAC,GAAAziB,EACAyiB,EAAAyE,gBACA,KAAAlnB,GAAA,MAAA8B,KAAAglB,WAAA9mB,MAAAgO,OAAA,GACA,GAGAlM,KAAAglB,WAAAtE,MAAAC,GAAAziB,KAKA,IAAAmnB,GACAC,OAAA,EACAC,gBAAA,EACAC,OAAA,GAGAC,GACAC,IAAA,EACAC,MAAA,EACAC,IAAA,GASA,SAAAC,EAAAC,GACA,OAAA/nB,OAAA2L,UAAAoC,SAAAhD,KAAAgd,GAAAzB,MAAA,MAmBA,SAAAhiB,EAAAyjB,GACA,gBAAAD,EAAAC;;;;;;;;;;;;;;oFAmDA,SAAAC,EAAAC,EAAA1d,GAEA,YADA,IAAAA,IAAiCA,MACjCjG,EAAA2jB,GACAA,EAAArkB,IAAA,SAAA1C,GAA4C,OAAA8mB,EAAA9mB,EAAAqJ,KAjE5C,WAAAud,EADAC,EAmEAE,IAhEAF,EAAA3Y,cAAApP,eAAAkoB,eAAAH,KAAA/nB,OAAA2L,UAiEAsc,EAtCA,WACA,QAAA9G,EAAA,EAAAjgB,EAAA,EAAAinB,EAAA/kB,UAAAjC,OAAqDD,EAAAinB,EAAQjnB,IAAAigB,GAAA/d,UAAAlC,GAAAC,OAC7D,IAAA+jB,EAAA7gB,MAAA8c,GAAAiH,EAAA,MAAAlnB,EAAA,EAA4CA,EAAAinB,EAAQjnB,IACpD,QAAA6F,EAAA3D,UAAAlC,GAAA0R,EAAA,EAAAyV,EAAAthB,EAAA5F,OAA4DyR,EAAAyV,EAAQzV,IAAAwV,IACpElD,EAAAkD,GAAArhB,EAAA6L,GACA,OAAAsS,EAoCAoD,CAFAtoB,OAAAuoB,oBAAAN,GACAjoB,OAAAwoB,sBAAAP,IACAvkB,OAAA,SAAA+kB,EAAA3kB,GACA,OAAAQ,EAAAiG,EAAAme,SAAAne,EAAAme,MAAAnkB,SAAAT,GACA2kB,GAnCA,SAAAA,EAAA3kB,EAAA6kB,EAAAC,EAAAC,GACA,IAAAC,KAAyBC,qBAAAhe,KAAA6d,EAAA9kB,GACzB,aACA,gBACA,eAAAglB,IACAL,EAAA3kB,GAAA6kB,GACAE,GAAA,kBAAAC,GACA9oB,OAAAC,eAAAwoB,EAAA3kB,GACA3D,MAAAwoB,EACAK,YAAA,EACAC,UAAA,EACAC,cAAA,IA4BAC,CAAAV,EAAA3kB,EADAkkB,EADAC,EAAAnkB,GACAyG,GACA0d,EAAA1d,EAAA6e,eACAX,QA9EA,IAAAV,EAmFA,SAAArZ,EAAA9M,EAAAynB,GAIA,IAHA,IAAArW,EAAApR,EAAA,EACAkN,EAAA,KACAwa,GAAA,IACAtW,GAAA,UAAAqW,EAAAlb,OAAA6E,IACAsW,IAKA,MAHA,iBAAA1nB,IACAkN,GAAAua,EAAA/C,MAAA,EAAA1kB,GAAAE,MAAA,YAAAX,SAGA2N,OACAwa,UAGA,SAAAC,EAAAC,GACA,IAAAtoB,EACAC,EAAAqoB,EAAAroB,OACA6mB,EAAA,IAAA3jB,MAAAlD,GACA,IAAAD,EAAA,EAAmBA,EAAAC,EAAYD,IAC/B8mB,EAAA9mB,GAAAsoB,EAAAtoB,GAEA,OAAA8mB,EAEA,SAAAZ,EAAArmB,GACA,IAAA0oB,KACA,QAAAC,KAAA3oB,EACAA,EAAA0S,eAAAiW,KACAD,EAAAC,GAAA3oB,EAAA2oB,IAGA,OAAAD,EAEA,SAAAE,EAAAC,EAAAC,GACA,IAAAC,EAAAD,MACA,IAAAA,EAAAE,UAAA,CACAD,KACA,IAAAE,EAAAhC,EAAA4B,GACAE,EAAAC,UAAAC,EACA,IAAAP,EAAAI,EAAA7B,EAAA6B,MACA7pB,OAAAglB,OAAA8E,EAAAE,EAAAP,GAEA,OAAAK,EAEA,SAAAG,EAAAL,EAAAC,GACA,GAAAA,KAAAE,UACA,OAAAF,EAEA,IAAAK,EAAAP,EAAAC,EAAAC,GAQA,GAPAK,EAAAC,aACAD,EAAAE,KAAA9C,EAAAG,QAGAyC,EAAAG,eACAH,EAAAI,YAAA5C,EAAAG,KAEA,iBAAAqC,EAAAE,KACA,OAAAF,EAAAE,KAAArnB,eACA,aACAmnB,EAAAE,KAAA9C,EAAAC,OACA,MACA,sBACA2C,EAAAE,KAAA9C,EAAAE,gBACA,MACA,aACA,aACA0C,EAAAE,KAAA9C,EAAAG,OACA,MACA,QACAyC,EAAAE,KAAA9C,EAAAG,OAGA,oBAAAyC,EAAAI,YACA,OAAAJ,EAAAI,YAAAvnB,eACA,UACAmnB,EAAAI,YAAA5C,EAAAC,IACA,MACA,YACAuC,EAAAI,YAAA5C,EAAAE,MACA,MACA,UACAsC,EAAAI,YAAA5C,EAAAG,IAIA,OAAAqC,EAUA,SAAAK,EAAAf,EAAArX,QACA,IAAAA,IAAgCA,MAChC,QAAAjR,EAAA,EAAAspB,EAAAhB,EAAAroB,OAA8CD,EAAAspB,EAActpB,IAAA,CAC5D,IAAAf,EAAAqpB,EAAAtoB,GACAmD,MAAAC,QAAAnE,GACAoqB,EAAApqB,EAAAgS,QAGAzN,IAAAvE,GACAgS,EAAAnP,KAAA7C,GAIA,OAAAgS,EAGA,IAAAsY,EAAAzqB,OAAA0qB,QACAC,UAAA,KACAjc,cACA6a,YACAnC,QACAuC,WACAM,cACAW,MA/BA,SAAAhB,EAAAC,GACA,QAAAH,KAAAG,EACAA,EAAApW,eAAAiW,KACAE,EAAAF,GAAAG,EAAAH,IAGA,OAAAE,GA0BAW,iBAGAM,EAAA,qCAuBAC,EAAA,SAAA1V,EAAA2V,EAAAC,GACA/e,MAAAlB,KAAA9I,MACA,IAAA2U,EAAAxB,EAAAwB,UAAAoU,EAGA,GAFA/oB,KAAAgpB,QAAA7V,EAAA6V,QACAhpB,KAAAF,MAAAqT,EAAArT,MACAgpB,GAAAnU,EAAA,CACA,IAAA5R,EAAA+lB,EAAAG,SAAAtU,GACAuU,EAAAzc,EAAA0G,EAAAxT,MAAAoD,GACA8J,EAAAqc,EAAArc,KACA7B,EAAAke,EAAA7B,OACA8B,EAAAhW,EAAArK,MAAA2D,EAAA0G,EAAArK,KAAA/F,GAAA8J,KACAuc,EAAArmB,IAAA/D,MAAA,SAMA,GALAgB,KAAAoG,KAAA+M,EAAA/M,MAAA,SACApG,KAAA2U,WACA3U,KAAAL,MAAAwT,EAAAxT,MACAK,KAAA6M,KAAA,iBAAAA,IAAA,OACA7M,KAAAqnB,OAAArc,GACAhL,KAAA6M,MAAA7M,KAAAF,MAAA,CACA,IAAAwN,EAAAtN,KAAAF,MAAAD,MAAA+oB,GAQAS,EAAA,IAAAC,SAAA,yBACAC,EAAA,EACA,IACAF,IAEA,MAAAlW,GACA,IAAAtT,EAAAsT,EAAArT,MAAAD,MAAA+oB,GAEAW,EAAA,GADA1c,EAAA5K,SAAApC,EAAA,KAGAyN,IACAA,EAAA,KACAtN,KAAA6M,KAAA5K,SAAAqL,EAAA,IAAAic,GAEAjc,EAAA,KACAtN,KAAAqnB,OAAAplB,SAAAqL,EAAA,MAIAtN,KAAAmpB,WAAA,EACAnpB,KAAAwpB,YAAAJ,EAAAD,GACAnpB,KAAAypB,SACAL,EAAAppB,KAAA6M,KAAA,GACAuc,EAAAppB,KAAA6M,KAAA,GACAuc,EAAAppB,KAAA6M,SAIA,YAAA9O,OAAA2rB,OAAA,CACA,IAAAC,EAAA,aACAA,EAAAjgB,UAAAM,MAAAN,UACAmf,EAAAnf,UAAA,IAAAigB,OAGAd,EAAAnf,UAAA3L,OAAA2rB,OAAA1f,MAAAN,WAEAmf,EAAAnf,UAAAyD,YAAA0b,EAQAA,EAAAnf,UAAAoC,SAAA,SAAAxD,GACAA,QACA,IAAA0gB,EAAA,GACAS,EAAAzpB,KAAAypB,YACA5mB,KACA+mB,EAAA,SAAA/qB,GAAsC,OAAAA,GACtC,GAAAyJ,EAAAshB,QAAA,CACA,IAAAxjB,SAAAkC,EAAAshB,QACA,gBAAAxjB,EACA,MAAA4D,MAAA,+CAAA5D,EAAA,KAEAwjB,EAAAthB,EAAAshB,QAEA,UAAA5pB,KAAA6M,KAAA,CAIA,GAHA,iBAAA4c,EAAA,IACA5mB,EAAA9B,KAAA6oB,EAAA5pB,KAAA6M,KAAA,MAAA4c,EAAA,YAEA,iBAAAA,EAAA,IACA,IAAAI,EAAA7pB,KAAA6M,KAAA,IACA4c,EAAA,KACAI,GAAAJ,EAAA,GAAApF,MAAA,EAAArkB,KAAAqnB,QACAuC,MAAAH,EAAA,GAAAK,OAAA9pB,KAAAqnB,OAAA,WACAoC,EAAA,GAAApF,MAAArkB,KAAAqnB,OAAA,sBAEAxkB,EAAA9B,KAAA8oB,GAEA,iBAAAJ,EAAA,IACA5mB,EAAA9B,KAAA6oB,EAAA5pB,KAAA6M,KAAA,MAAA4c,EAAA,YAEA5mB,IAAAV,KAAA,MAAAynB,EAAA,iBAcA,OAZAZ,GAAAY,EAAA5pB,KAAAoG,KAAA,UAAApG,KAAAgpB,QAAA,OACAhpB,KAAA2U,WACAqU,GAAAY,EAAA,cAAA5pB,KAAA2U,UAEA3U,KAAA6M,OACAmc,GAAAY,EAAA,YAAA5pB,KAAA6M,KAAA,aAAA7M,KAAAqnB,OAAA,gBAEA2B,GAAA,KAAAnmB,EACA7C,KAAAmpB,WACAH,GAAAY,EAAA,gBAAA5pB,KAAA2U,UAAA,SACAqU,GAAAY,EAAA5pB,KAAAmpB,SAAA,YAAAnpB,KAAAwpB,YAAA,MAEAR,GAGA,IAAAe,EAAA,SAAAze,EAAA0e,EAAAC,EAAAtqB,EAAAulB,EAAA9C,GACApiB,KAAAgqB,aACAhqB,KAAAiqB,YACAjqB,KAAAkqB,gBAAAD,EACAjqB,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAAsL,SAAAtL,KAAAyP,YAAAnE,GACAtL,KAAAmqB,oBAAA1nB,EACAzC,KAAAqiB,mBAAAD,GACApiB,KAAAogB,UAAApgB,KAAAsL,SAAAtL,OAEA+pB,EAAArgB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,WACA6a,OAAA,SAAAC,GACAlhB,KAAAsL,WACAtL,KAAAsL,SAAA4V,EAAAkJ,WAAApqB,KAAAsL,WAEAtL,KAAAgqB,aACAhqB,KAAAgqB,WAAA9I,EAAAkJ,WAAApqB,KAAAgqB,aAEAhqB,KAAAiqB,YACAjqB,KAAAiqB,UAAA/I,EAAAC,MAAAnhB,KAAAiqB,aAGAI,cAAA,SAAA/e,EAAA0e,EAAAE,GACA5e,EAAAtL,KAAAyP,YAAAnE,GACA,IAAAgf,EAAA,IAAAP,EAAAze,EAAA0e,GAAAhqB,KAAAgqB,WAAA,KAAAhqB,KAAAmgB,WAAAngB,KAAAkgB,WAAAlgB,KAAAoiB,kBAGA,OAFAkI,EAAAJ,eAAA,MAAAA,IAAAlqB,KAAAkqB,eACAI,EAAAC,WAAAvqB,KAAAuqB,WACAD,GAEA7a,YAAA,SAAA+a,GACA,OAAAA,GAGA,iBAAAA,GACAxqB,KAAAgD,MAAAynB,UAAAD,GAAA,YAAAxqB,KAAAugB,OAAAvgB,KAAAwgB,UAAA,SAAAkK,EAAAxa,GACA,GAAAwa,EACA,UAAA7B,GACAlpB,MAAA+qB,EAAA/qB,MACAqpB,QAAA0B,EAAA1B,SACyBhpB,KAAAgD,MAAA2nB,QAAA3qB,KAAAwgB,UAAA7L,UAEzB6V,EAAAta,EAAA,GAAA5E,WAGAkf,IAbA,IAAAzF,EAAA,UAAA/kB,KAAAugB,OAAAvgB,KAAAwgB,aAeAoK,qBAAA,WACA,IAAAC,EAAA,IAAA9F,EAAA,UAAA/kB,KAAAugB,OAAAvgB,KAAAwgB,WAAAsK,GAAA,IAAAf,GAAAc,GAAA,UAAA7qB,KAAAugB,OAAAvgB,KAAAwgB,YAEA,OADAsK,EAAA,GAAAP,YAAA,EACAO,GAEAjrB,MAAA,SAAAikB,GACA,IAEAiH,EACA9rB,EAHAqM,EAAAtL,KAAAsL,SACAlI,EAAAkI,EAAApM,OAKA,QADA6rB,GADAjH,IAAAkH,iBACA9rB,SACAkE,EAAA2nB,EACA,SAGA,IAAA9rB,EAAA,EAA2BA,EAAA8rB,EAAU9rB,IACrC,GAAAqM,EAAArM,GAAAf,QAAA4lB,EAAA7kB,GACA,SAIA,OAAA8rB,GAEAC,cAAA,WACA,GAAAhrB,KAAAmqB,eACA,OAAAnqB,KAAAmqB,eAEA,IAAA7e,EAAAtL,KAAAsL,SAAA3J,IAAA,SAAAC,GACA,OAAAA,EAAAojB,WAAA9mB,OAAA0D,EAAA1D,aAAA0D,EAAA1D,SACaiE,KAAA,IAAAtC,MAAA,+BASb,OARAyL,EACA,MAAAA,EAAA,IACAA,EAAA3I,QAIA2I,KAEAtL,KAAAmqB,eAAA7e,GAEA2f,qBAAA,WACA,OAAAjrB,KAAAuqB,YACA,IAAAvqB,KAAAsL,SAAApM,QACA,MAAAc,KAAAsL,SAAA,GAAApN,QACA,MAAA8B,KAAAsL,SAAA,GAAA0Z,WAAA9mB,OAAA,KAAA8B,KAAAsL,SAAA,GAAA0Z,WAAA9mB,QAEAkjB,KAAA,SAAAT,GACA,IAAAuJ,EAAAlqB,KAAAiqB,WAAAjqB,KAAAiqB,UAAA7I,KAAAT,GACArV,EAAAtL,KAAAsL,SACA0e,EAAAhqB,KAAAgqB,WAGA,OAFA1e,OAAA3J,IAAA,SAAAwR,GAA8D,OAAAA,EAAAiO,KAAAT,KAC9DqJ,OAAAroB,IAAA,SAAAupB,GAAyE,OAAAA,EAAA9J,KAAAT,KACzE3gB,KAAAqqB,cAAA/e,EAAA0e,EAAAE,IAEArJ,OAAA,SAAAF,EAAAK,GACA,IAAA/hB,EAIA,IAHA0hB,KAAAyE,eAAA,KAAAplB,KAAAsL,SAAA,GAAA0Z,WAAA9mB,OACA8iB,EAAAF,IAAA,IAAA9gB,KAAAkgB,WAAAlgB,KAAAmgB,YAEAlhB,EAAA,EAAuBA,EAAAe,KAAAsL,SAAApM,OAA0BD,IACjDe,KAAAsL,SAAArM,GACA4hB,OAAAF,EAAAK,IAGAmK,YAAA,WACA,OAAAnrB,KAAAkqB,kBAIA,IAAAkB,EAAA,SAAAltB,GACA,IAAAA,EACA,UAAA8L,MAAA,oCAEA5H,MAAAC,QAAAnE,GAIA8B,KAAA9B,QAHA8B,KAAA9B,WAMAktB,EAAA1hB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,QACA6a,OAAA,SAAAC,GACAlhB,KAAA9B,QACA8B,KAAA9B,MAAAgjB,EAAAkJ,WAAApqB,KAAA9B,SAGAkjB,KAAA,SAAAT,GACA,WAAA3gB,KAAA9B,MAAAgB,OACAc,KAAA9B,MAAA,GAAAkjB,KAAAT,GAGA,IAAAyK,EAAAprB,KAAA9B,MAAAyD,IAAA,SAAAC,GACA,OAAAA,EAAAwf,KAAAT,OAIAE,OAAA,SAAAF,EAAAK,GACA,IAAA/hB,EACA,IAAAA,EAAA,EAAuBA,EAAAe,KAAA9B,MAAAgB,OAAuBD,IAC9Ce,KAAA9B,MAAAe,GAAA4hB,OAAAF,EAAAK,GACA/hB,EAAA,EAAAe,KAAA9B,MAAAgB,QACA8hB,EAAAF,IAAAH,KAAA4C,SAAA,aAMA,IAAA8H,EAAA,SAAAntB,GACA8B,KAAA9B,SAEAmtB,EAAA3hB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,UACAya,OAAA,SAAAF,EAAAK,GACA,SAAAhhB,KAAA9B,MACA,MAAuBkI,KAAA,SAAA4iB,QAAA,4BAEvBhI,EAAAF,IAAA9gB,KAAA9B,UAGAmtB,EAAAC,KAAA,IAAAD,EAAA,QACAA,EAAAE,MAAA,IAAAF,EAAA,SAEA,IAAAG,EAAA,SAAAttB,EAAAyB,EAAAulB,EAAAuG,EAAAC,EAAAtJ,GACApiB,KAAA9B,QACA8B,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAAyrB,WACAzrB,KAAA0rB,iBAAA,IAAAA,KACA1rB,KAAA2rB,WAAA,EACA3rB,KAAAqiB,mBAAAD,IAEAoJ,EAAA9hB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,YACAgb,KAAA,WACA,WAAAoK,EAAAxrB,KAAA9B,MAAA8B,KAAAugB,OAAAvgB,KAAAwgB,UAAAxgB,KAAAyrB,SAAAzrB,KAAA0rB,YAAA1rB,KAAAoiB,mBAEAR,QAAA,SAAAkC,GACA,OAAAA,EAAApD,OAAA1gB,KAAA0gB,UAAAoD,EAAApD,QAAA,OAAAje,GAEAge,cAAA,WACA,OAAAzgB,KAAA0rB,aAEA7K,OAAA,SAAAF,EAAAK,GACAhhB,KAAA6f,YAAA+L,QAAA5rB,KAAA9B,OACA8B,KAAA6f,aACAmB,EAAAF,IAAA9gB,KAAA9B,MAAA8B,KAAAwgB,UAAAxgB,KAAAugB,OAAAvgB,KAAAyrB,aAKA,IAAAI,EAAAxG,EAWA,IAAAyG,EAAA,SAAA5qB,EAAAhD,EAAA6tB,EAAApD,EAAAhpB,EAAAulB,EAAAzmB,EAAAutB,GACAhsB,KAAAkB,OACAlB,KAAA9B,mBAAAyhB,EAAAzhB,EAAA,IAAAktB,GAAAltB,EAAA,IAAAstB,EAAAttB,GAAA,OACA8B,KAAA+rB,YAAA,IAAAA,EAAAlH,OAAA,GACA7kB,KAAA2oB,QACA3oB,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAAvB,WAAA,EACAuB,KAAAgsB,cAAAvpB,IAAAupB,IACA9qB,EAAAgL,QAAA,MAAAhL,EAAAgL,OAAA,GACAlM,KAAA2rB,WAAA,EACA3rB,KAAAogB,UAAApgB,KAAA9B,MAAA8B,OAEA8rB,EAAApiB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,cACAya,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA9gB,KAAAkB,MAAAyf,EAAA4C,SAAA,UAAAvjB,KAAAkgB,WAAAlgB,KAAAmgB,YACA,IACAngB,KAAA9B,MAAA2iB,OAAAF,EAAAK,GAEA,MAAA7N,GAGA,MAFAA,EAAAxT,MAAAK,KAAAugB,OACApN,EAAAwB,SAAA3U,KAAAwgB,UAAA7L,SACAxB,EAEA6N,EAAAF,IAAA9gB,KAAA+rB,WAAA/rB,KAAAvB,QAAAkiB,EAAAsL,UAAAtL,EAAA4C,SAAA,QAA0GvjB,KAAAwgB,UAAAxgB,KAAAugB,SAE1Ga,KAAA,SAAAT,GACA,IAAAuL,EAAAC,EAAAC,GAAA,EAAAlrB,EAAAlB,KAAAkB,KAAA8qB,EAAAhsB,KAAAgsB,SACA,iBAAA9qB,IAGAA,EAAA,IAAAA,EAAAhC,QAAAgC,EAAA,aAAAmqB,EACAnqB,EAAA,GAAAhD,MA3CA,SAAAyiB,EAAAzf,GACA,IACAjC,EADAf,EAAA,GAEA6S,EAAA7P,EAAAhC,OACA8hB,GAAsBF,IAAA,SAAA5B,GAAoBhhB,GAAAghB,IAC1C,IAAAjgB,EAAA,EAAmBA,EAAA8R,EAAO9R,IAC1BiC,EAAAjC,GAAAmiB,KAAAT,GAAAE,OAAAF,EAAAK,GAEA,OAAA9iB,EAmCAmuB,CAAA1L,EAAAzf,GACA8qB,GAAA,GAGA,SAAA9qB,GAAAyf,EAAAwH,OAAA0D,EAAAvG,SACA8G,GAAA,EACAF,EAAAvL,EAAAwH,KACAxH,EAAAwH,KAAA0D,EAAAtG,iBAEA,IAGA,GAFA5E,EAAA2L,eAAAvrB,SACAorB,EAAAnsB,KAAA9B,MAAAkjB,KAAAT,IACA3gB,KAAAgsB,UAAA,oBAAAG,EAAA/lB,KACA,MAA2B4iB,QAAA,8CAC3BrpB,MAAAK,KAAAmgB,WAAAxL,SAAA3U,KAAAkgB,WAAAvL,UAEA,IAAAoX,EAAA/rB,KAAA+rB,UACAQ,EAAA5L,EAAA2L,eAAAlgB,MAIA,OAHA2f,GAAAQ,EAAAR,YACAA,EAAAQ,EAAAR,WAEA,IAAAD,EAAA5qB,EAAAirB,EAAAJ,EAAA/rB,KAAA2oB,MAAA3oB,KAAAmgB,WAAAngB,KAAAkgB,WAAAlgB,KAAAvB,OAAAutB,GAEA,MAAA7Y,GAKA,KAJA,iBAAAA,EAAAxT,QACAwT,EAAAxT,MAAAK,KAAAmgB,WACAhN,EAAAwB,SAAA3U,KAAAkgB,WAAAvL,UAEAxB,EAEA,QACAiZ,IACAzL,EAAAwH,KAAA+D,KAIAM,cAAA,WACA,WAAAV,EAAA9rB,KAAAkB,KAAAlB,KAAA9B,MAAA,aAAA8B,KAAA2oB,MAAA3oB,KAAAmgB,WAAAngB,KAAAkgB,WAAAlgB,KAAAvB,WAIA,IAAAguB,EAAA,WACA,SAAAA,EAAA9L,EAAA+L,EAAAC,GACA,IAAAzc,EAAA,GACA,GAAAyQ,EAAAiM,kBAAAjM,EAAA4C,SACA,OAAA5C,EAAAiM,iBACA,eACA1c,EAAAuc,EAAAI,UAAAH,GACA,MACA,iBACAxc,EAAAuc,EAAAK,aAAAJ,GACA,MACA,UACAxc,EAAAuc,EAAAI,UAAAH,IAAAC,GAAA,IAAAF,EAAAK,aAAAJ,GAIA,OAAAxc,EAiBA,OAfAuc,EAAAI,UAAA,SAAAH,GACA,iBAAAA,EAAAD,UAAAM,WAAA,KAAAL,EAAAD,UAAAO,SAAA,SAEAP,EAAAK,aAAA,SAAAJ,GACA,IAAAO,EAAAP,EAAAD,UAAAO,SAIA,MAHA,gBAAAhhB,KAAAihB,KACAA,EAAA,UAAAA,GAEA,gDAAqDA,EAAAhtB,QAAA,uBAAA6E,GAIrD,MAHA,MAAAA,IACAA,EAAA,KAEA,KAAAA,IACa,4BAAW4nB,EAAAD,UAAAM,WAAA,QAExBN,EAjCA,GAoCAxkB,EAAA,SAAA/J,EAAAgvB,EAAAvtB,EAAAulB,GACAllB,KAAA9B,QACA8B,KAAAktB,gBACAltB,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAA2rB,WAAA,GAEA1jB,EAAAyB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,UACAya,OAAA,SAAAF,EAAAK,GACAhhB,KAAAysB,WACAzL,EAAAF,IAAA2L,EAAA9L,EAAA3gB,WAAAkgB,WAAAlgB,KAAAmgB,YAEAa,EAAAF,IAAA9gB,KAAA9B,QAEAivB,SAAA,SAAAxM,GACA,IAAAyM,EAAAzM,EAAA4C,UAAA,MAAAvjB,KAAA9B,MAAA,GACA,OAAA8B,KAAAktB,eAAAE,KAIA,IAAAC,KACAC,EAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAF,EAGA,QAAAtuB,EAAA,EAAuBA,EAAAwuB,EAAAvuB,OAA6BD,IACpDsuB,EAAA/b,eAAAic,EAAAxuB,MACAuuB,EAAAC,EAAAxuB,IAAAsuB,EAAAE,EAAAxuB,MAOAyuB,GAEA,QACA,cACA,WACA,gBACA,WACA,kBACA,WACA,aACA,aACA,OACA,eAEA,iBAEA,iBAEAL,EAAAM,MAAA,SAAArlB,GACAglB,EAAAhlB,EAAAtI,KAAA0tB,GACA,iBAAA1tB,KAAA4tB,QACA5tB,KAAA4tB,OAAA5tB,KAAA4tB,SAGA,IAAAC,GACA,QACA,WACA,OACA,cACA,YACA,iBACA,UACA,oBACA,gBACA,iBACA,eAuFA,SAAAC,EAAAC,GACA,6BAAA/hB,KAAA+hB,GAEA,SAAAC,EAAAD,GACA,YAAAA,EAAA7hB,OAAA,GAzFAmhB,EAAAY,KAAA,SAAA3lB,EAAA4lB,GACAZ,EAAAhlB,EAAAtI,KAAA6tB,GACA,iBAAA7tB,KAAA4tB,QACA5tB,KAAA4tB,OAAA5tB,KAAA4tB,QAEA5tB,KAAAkuB,aACAluB,KAAAssB,eAAAtsB,KAAAssB,oBAEAe,EAAAY,KAAAvkB,UAAAykB,UAAA,WACAnuB,KAAAouB,YACApuB,KAAAouB,cAEApuB,KAAAouB,UAAArtB,MAAA,GACAf,KAAAquB,QAAA,GAEAhB,EAAAY,KAAAvkB,UAAA4kB,SAAA,WACAtuB,KAAAouB,UAAAhiB,MACApM,KAAAouB,UAAAlvB,SACAc,KAAAquB,QAAA,IAGAhB,EAAAY,KAAAvkB,UAAA6kB,cAAA,WACAvuB,KAAAwuB,cACAxuB,KAAAwuB,gBAEAxuB,KAAAwuB,YAAAztB,MAAA,IAEAssB,EAAAY,KAAAvkB,UAAA+kB,iBAAA,WACAzuB,KAAAwuB,YAAApiB,OAEAihB,EAAAY,KAAAvkB,UAAA2kB,QAAA,EACAhB,EAAAY,KAAAvkB,UAAAglB,QAAA,EACArB,EAAAY,KAAAvkB,UAAAilB,SAAA,SAAArN,GACA,QAAAthB,KAAA0uB,YAGA,MAAApN,GAAAthB,KAAAmoB,OAAA9C,EAAAC,QAAAtlB,KAAAwuB,aAAAxuB,KAAAwuB,YAAAtvB,YAGAc,KAAAmoB,KAAA9C,EAAAE,kBACAvlB,KAAAwuB,aAAAxuB,KAAAwuB,YAAAtvB,UAIAmuB,EAAAY,KAAAvkB,UAAAklB,oBAAA,SAAAb,GAEA,OADA/tB,KAAAqoB,cAAA5C,EAAAE,MAAAqI,EAAAF,GACAC,IAEAV,EAAAY,KAAAvkB,UAAAmlB,YAAA,SAAAd,EAAAe,GACA,IAAAC,EAUA,OATAD,KAAA,GACAC,EAAA/uB,KAAAgvB,cAAAF,EAAAf,GAGAC,EAAAD,IACAD,EAAAgB,KACA,IAAAd,EAAAe,KACAA,EAAA,KAAAA,GAEAA,GAEA1B,EAAAY,KAAAvkB,UAAAslB,cAAA,SAAAjB,GACA,IACAkB,EADAC,EAAAnB,EAAA/uB,MAAA,KAAAmwB,UAGA,IADApB,KACA,IAAAmB,EAAAhwB,QAEA,OADA+vB,EAAAC,EAAA9iB,OAEA,QACA,MACA,SACA,IAAA2hB,EAAA7uB,QAAA,OAAA6uB,IAAA7uB,OAAA,GACA6uB,EAAAhtB,KAAAkuB,GAGAlB,EAAA3hB,MAEA,MACA,QACA2hB,EAAAhtB,KAAAkuB,GAIA,OAAAlB,EAAA5rB,KAAA,MAwCA,IAAAitB,EA9BA,SAAAC,EAAA5gB,GACA,OACA6gB,SACAxO,IAAA,SAAA5f,EAAAmoB,GAGAnoB,IAAAJ,cACAd,KAAAsvB,MAAA9d,eAAAtQ,GACAlB,KAAAsvB,MAAApuB,GAAAmoB,GAEAkG,YAAA,SAAAjb,GACA,IAAAkb,EAAAxvB,KACAjC,OAAA0xB,KAAAnb,GAAAlQ,QAAA,SAAAlD,GACAsuB,EAAA1O,IAAA5f,EAAAoT,EAAApT,OAGA+e,IAAA,SAAA/e,GACA,OAAAlB,KAAAsvB,MAAApuB,IAAAuN,KAAAwR,IAAA/e,IAEAwuB,kBAAA,WACA,OAAA1vB,KAAAsvB,OAEAK,QAAA,WACA,OAAAN,EAAArvB,OAEA0pB,OAAA,SAAAjb,GACA,OAAA4gB,EAAA5gB,KAIA4gB,CAAA,MAEAO,GACAxO,KAAA,WACA,IAAAxf,EAAA5B,KAAA6vB,OACA1c,EAAAnT,KAAA8vB,OACA,GAAA3c,EACA,MAAAA,EAEA,SAAAvR,EACA,OAAAA,EAAAypB,EAAAC,KAAAD,EAAAE,OAGArtB,MAAA,SAAA0D,GACA5B,KAAA6vB,OAAAjuB,GAEAiB,MAAA,SAAAsQ,GACAnT,KAAA8vB,OAAA3c,GAEAxK,MAAA,WACA3I,KAAA6vB,OAAA7vB,KAAA8vB,OAAA,OAIAC,EAAA,SAAAC,EAAAC,EAAAC,EAAA9N,GACApiB,KAAAgwB,YACAhwB,KAAAiwB,QACAjwB,KAAAmwB,YACAnwB,KAAAowB,WAAA,KACApwB,KAAAqwB,YAAA,KACArwB,KAAAkwB,gBACAlwB,KAAAqiB,mBAAAD,GACApiB,KAAA2rB,WAAA,EACA3rB,KAAAogB,UAAApgB,KAAAgwB,UAAAhwB,MACAA,KAAAogB,UAAApgB,KAAAiwB,MAAAjwB,OAEA+vB,EAAArmB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,UACAkqB,WAAA,EACA7P,cAAA,WAAoC,UACpCQ,OAAA,SAAAC,GACAlhB,KAAA4tB,MACA5tB,KAAA4tB,MAAA1M,EAAAkJ,WAAApqB,KAAA4tB,OAAA,GAEA5tB,KAAAgwB,YACAhwB,KAAAgwB,UAAA9O,EAAAkJ,WAAApqB,KAAAgwB,YAEAhwB,KAAAiwB,OAAAjwB,KAAAiwB,MAAA/wB,SACAc,KAAAiwB,MAAA/O,EAAAkJ,WAAApqB,KAAAiwB,SAGA7O,KAAA,SAAAT,GACA,IAAAqP,EACAO,EACAC,EACAvxB,EACAwxB,EACAC,GAAA,EACA,GAAA1wB,KAAAgwB,YAAAO,EAAAvwB,KAAAgwB,UAAA9wB,QAAA,CAMA,IALA8wB,EAAA,IAAA5tB,MAAAmuB,GACAX,EAAA/sB,OACAuD,KAAA,SACA4iB,QAAA,6DAEA/pB,EAAA,EAA2BA,EAAAsxB,EAAYtxB,IAAA,CACvCuxB,EAAAxwB,KAAAgwB,UAAA/wB,GAAAmiB,KAAAT,GACA,QAAAhQ,EAAA,EAAmCA,EAAA6f,EAAAllB,SAAApM,OAA8ByR,IACjE,GAAA6f,EAAAllB,SAAAqF,GAAAsU,WAAA,CACAwL,GAAA,EACA,MAGAT,EAAA/wB,GAAAuxB,EACAA,EAAAtG,iBACAwG,GAAA,GAGA,GAAAD,EAAA,CACA,IAAAE,EAAA,IAAAvuB,MAAAmuB,GACA,IAAAtxB,EAAA,EAA+BA,EAAAsxB,EAAYtxB,IAC3CuxB,EAAAR,EAAA/wB,GACA0xB,EAAA1xB,GAAAuxB,EAAA9P,MAAAC,GAEA3gB,KAAAgD,MAAAynB,UAAAkG,EAAAxuB,KAAA,mBAAA6tB,EAAA,GAAA7P,WAAA6P,EAAA,GAAA9P,WAAA,SAAAwK,EAAAxa,GACAA,IACA8f,EAAA1H,EAAApY,MAIA0f,EAAAjnB,aAGA+nB,GAAA,EAEA,IAEAE,EACAC,EAHAZ,EAAAjwB,KAAAiwB,MAAA3I,EAAAtnB,KAAAiwB,OAAA,KACAa,EAAA,IAAAf,EAAAC,EAAAC,EAAAjwB,KAAAkwB,cAAAlwB,KAAAoiB,kBAGA0O,EAAAC,gBAAA/wB,KACA8wB,EAAAE,KAAAhxB,KAAAgxB,KACAF,EAAAG,UAAAjxB,KAAAixB,UACAH,EAAAI,aAAAlxB,KAAAkxB,aACAlxB,KAAAysB,YACAqE,EAAArE,UAAAzsB,KAAAysB,WAEAiE,IACAT,EAAA/wB,OAAA,GAIA4xB,EAAA1B,iBAAA,SAAAlB,GAIA,IAHA,IAEA5gB,EAFArO,EAAA,EACA8R,EAAAmd,EAAAhvB,OAEsBD,IAAA8R,IAAS9R,EAE/B,GADAqO,EAAA4gB,EAAAjvB,GAAAmwB,iBAEA,OAAA9hB,EAGA,OAAA8hB,EAVA,CAWazO,EAAAuN,QAAAyB,UAEb,IAAAwB,EAAAxQ,EAAAuN,OACAiD,EAAAzuB,QAAAouB,GAEA,IAAAM,EAAAzQ,EAAAqP,UACAoB,IACAzQ,EAAAqP,UAAAoB,MAEAA,EAAA1uB,QAAA1C,KAAAgwB,YAEAc,EAAAE,MAAAF,EAAAI,eAAAJ,EAAAZ,gBACAY,EAAAO,YAAA1Q,GAIA,IAAA2Q,EAAAR,EAAAb,MACA,IAAAhxB,EAAA,EAAuB2xB,EAAAU,EAAAryB,GAAqBA,IAC5C2xB,EAAAW,YACAD,EAAAryB,GAAA2xB,EAAAxP,KAAAT,IAGA,IAAA6Q,EAAA7Q,EAAA8Q,aAAA9Q,EAAA8Q,YAAAvyB,QAAA,EAEA,IAAAD,EAAA,EAAuB2xB,EAAAU,EAAAryB,GAAqBA,IAC5C,cAAA2xB,EAAAxqB,MAEA6pB,EAAAW,EAAAxP,KAAAT,GAAA+Q,OAAA,SAAAzO,GACA,QAAAA,aAAA6I,GAAA7I,EAAA+I,YAIA8E,EAAA9E,SAAA/I,EAAA/hB,QAIAowB,EAAAtd,OAAA2d,MAAAL,GAAAryB,EAAA,GAAA+Q,OAAAigB,IACAhxB,GAAAgxB,EAAA/wB,OAAA,EACA4xB,EAAAc,cAEA,iBAAAhB,EAAAxqB,OAEA6pB,EAAAW,EAAAxP,KAAAT,GAAAsP,MAAAyB,OAAA,SAAAzO,GACA,QAAAA,aAAA6I,GAAA7I,EAAA+I,YAMAsF,EAAAtd,OAAA2d,MAAAL,GAAAryB,EAAA,GAAA+Q,OAAAigB,IACAhxB,GAAAgxB,EAAA/wB,OAAA,EACA4xB,EAAAc,cAIA,IAAA3yB,EAAA,EAAuB2xB,EAAAU,EAAAryB,GAAqBA,IAC5C2xB,EAAAW,YACAD,EAAAryB,GAAA2xB,IAAAxP,KAAAwP,EAAAxP,KAAAT,GAAAiQ,GAIA,IAAA3xB,EAAA,EAAuB2xB,EAAAU,EAAAryB,GAAqBA,IAE5C,GAAA2xB,aAAAb,GAAAa,EAAAZ,WAAA,IAAAY,EAAAZ,UAAA9wB,QAEA0xB,EAAAZ,UAAA,IAAAY,EAAAZ,UAAA,GAAA/E,uBAAA,CACAqG,EAAAtd,OAAA/U,IAAA,GACA,IAAA0R,EAAA,EAAuCkgB,EAAAD,EAAAX,MAAAtf,GAA2BA,IAClEkgB,aAAAlR,IACAkR,EAAAxO,mBAAAuO,EAAAxO,kBACAyO,aAAA/E,GAAA+E,EAAA7E,UACAsF,EAAAtd,SAAA/U,EAAA,EAAA4xB,IAUA,GAFAM,EAAAxuB,QACAyuB,EAAAzuB,QACAge,EAAA8Q,YACA,IAAAxyB,EAAAuyB,EAAyCvyB,EAAA0hB,EAAA8Q,YAAAvyB,OAAgCD,IACzE0hB,EAAA8Q,YAAAxyB,GAAA4yB,gBAAA7B,GAGA,OAAAc,GAEAO,YAAA,SAAA1Q,GACA,IACA1hB,EACA6yB,EAFA7B,EAAAjwB,KAAAiwB,MAGA,GAAAA,EAGA,IAAAhxB,EAAA,EAAuBA,EAAAgxB,EAAA/wB,OAAkBD,IACzC,WAAAgxB,EAAAhxB,GAAAmH,QACA0rB,EAAA7B,EAAAhxB,GAAAmiB,KAAAT,MACAmR,EAAA5yB,QAAA,IAAA4yB,EAAA5yB,SACA+wB,EAAAjc,OAAA2d,MAAA1B,GAAAhxB,EAAA,GAAA+Q,OAAA8hB,IACA7yB,GAAA6yB,EAAA5yB,OAAA,GAGA+wB,EAAAjc,OAAA/U,EAAA,EAAA6yB,GAEA9xB,KAAA4xB,eAIApF,cAAA,WASA,OARA,IAAAuD,EAAA/vB,KAAAgwB,UAAAhwB,KAAAiwB,MAAAtuB,IAAA,SAAAshB,GACA,OAAAA,EAAAuJ,cACAvJ,EAAAuJ,gBAGAvJ,IAEajjB,KAAAkwB,cAAAlwB,KAAAoiB,mBAGb2P,UAAA,SAAAvO,GACA,OAAAA,GAAA,IAAAA,EAAAtkB,QAGA8yB,eAAA,SAAAxO,EAAA7C,GACA,IAAAsR,EAAAjyB,KAAAgwB,UAAAhwB,KAAAgwB,UAAA9wB,OAAA,GACA,QAAA+yB,EAAA/H,kBAGA+H,EAAAhI,YACAgI,EAAAhI,UAAA7I,KAAA,IAAAiM,EAAAY,KAAAtN,IAAAuN,WAKA0D,WAAA,WACA5xB,KAAAkyB,UAAA,KACAlyB,KAAAowB,WAAA,KACApwB,KAAAqwB,YAAA,KACArwB,KAAAmwB,aAEAgC,UAAA,WAoBA,OAnBAnyB,KAAAowB,aACApwB,KAAAowB,WAAApwB,KAAAiwB,MAAkDjwB,KAAAiwB,MAAAxuB,OAAA,SAAA2wB,EAAAnP,GAOlD,GANAA,aAAA6I,IAAA,IAAA7I,EAAA+I,WACAoG,EAAAnP,EAAA/hB,MAAA+hB,GAKA,WAAAA,EAAA7c,MAAA6c,EAAA+N,MAAA/N,EAAA+N,KAAAmB,UAAA,CACA,IAAAE,EAAApP,EAAA+N,KAAAmB,YACA,QAAAG,KAAAD,EACAA,EAAA7gB,eAAA8gB,KACAF,EAAAE,GAAArP,EAAA+N,KAAAhF,SAAAsG,IAIA,OAAAF,WAGApyB,KAAAowB,YAEAmC,WAAA,WAiBA,OAhBAvyB,KAAAqwB,cACArwB,KAAAqwB,YAAArwB,KAAAiwB,MAAmDjwB,KAAAiwB,MAAAxuB,OAAA,SAAA2wB,EAAAnP,GACnD,GAAAA,aAAA6I,IAAA,IAAA7I,EAAA+I,SAAA,CACA,IAAAwG,EAAA,IAAAvP,EAAA/hB,KAAAhC,QAAA+jB,EAAA/hB,KAAA,aAAAmqB,EACApI,EAAA/hB,KAAA,GAAAhD,MAAA+kB,EAAA/hB,KAEAkxB,EAAA,IAAAI,GAIAJ,EAAA,IAAAI,GAAAzxB,KAAAkiB,GAHAmP,EAAA,IAAAI,IAAAvP,GAMA,OAAAmP,WAGApyB,KAAAqwB,aAEArE,SAAA,SAAA9qB,GACA,IAAAuxB,EAAAzyB,KAAAmyB,YAAAjxB,GACA,GAAAuxB,EACA,OAAAzyB,KAAA0yB,WAAAD,IAGAE,SAAA,SAAAzxB,GACA,IAAAuxB,EAAAzyB,KAAAuyB,aAAArxB,GACA,GAAAuxB,EACA,OAAAzyB,KAAA0yB,WAAAD,IAGAG,gBAAA,WACA,QAAA3zB,EAAAe,KAAAiwB,MAAA/wB,OAA2CD,EAAA,EAAOA,IAAA,CAClD,IAAAwzB,EAAAzyB,KAAAiwB,MAAAhxB,EAAA,GACA,GAAAwzB,aAAA3G,EACA,OAAA9rB,KAAA0yB,WAAAD,KAIAC,WAAA,SAAAG,GACA,IAAA7S,EAAAhgB,KACA,SAAA8yB,EAAAL,GACA,OAAAA,EAAAv0B,iBAAAstB,IAAAiH,EAAA1S,QACA,iBAAA0S,EAAAv0B,YACA8B,KAAAgD,MAAAynB,UAAAgI,EAAAv0B,aAAA,qBAAAu0B,EAAAv0B,MAAAiiB,WAAAsS,EAAAvS,WAAA,SAAAwK,EAAAxa,GACAwa,IACA+H,EAAA1S,QAAA,GAEA7P,IACAuiB,EAAAv0B,MAAAgS,EAAA,GACAuiB,EAAA1G,UAAA7b,EAAA,OACAuiB,EAAA1S,QAAA,KAKA0S,EAAA1S,QAAA,EAEA0S,GAGAA,EAGA,GAAArwB,MAAAC,QAAAwwB,GAGA,CACA,IAAAE,KAIA,OAHAF,EAAAzuB,QAAA,SAAA2M,GACAgiB,EAAAhyB,KAAA+xB,EAAAhqB,KAAAkX,EAAAjP,MAEAgiB,EAPA,OAAAD,EAAAhqB,KAAAkX,EAAA6S,IAUAG,SAAA,WACA,IAAAhzB,KAAAiwB,MACA,SAEA,IAEAhxB,EACA2xB,EAHAqC,KACAhD,EAAAjwB,KAAAiwB,MAGA,IAAAhxB,EAAA,EAAuB2xB,EAAAX,EAAAhxB,GAAmBA,IAC1C2xB,EAAAN,WACA2C,EAAAlyB,KAAA6vB,GAGA,OAAAqC,GAEAC,YAAA,SAAAtC,GACA,IAAAX,EAAAjwB,KAAAiwB,MACAA,EACAA,EAAAvtB,QAAAkuB,GAGA5wB,KAAAiwB,OAAAW,GAEA5wB,KAAAogB,UAAAwQ,EAAA5wB,OAEAmzB,KAAA,SAAA3C,EAAAxQ,EAAA0R,GACA1R,KAAAhgB,KACA,IACAH,EACAuzB,EAFAnD,KAGApuB,EAAA2uB,EAAA9P,QACA,OAAA7e,KAAA7B,KAAAmwB,SACAnwB,KAAAmwB,SAAAtuB,IAEA7B,KAAAgzB,WAAA5uB,QAAA,SAAAwsB,GACA,GAAAA,IAAA5Q,EACA,QAAArP,EAAA,EAAmCA,EAAAigB,EAAAZ,UAAA9wB,OAA2ByR,IAE9D,GADA9Q,EAAA2wB,EAAA3wB,MAAA+wB,EAAAZ,UAAArf,IACA,CACA,GAAA6f,EAAAllB,SAAApM,OAAAW,GACA,IAAA6xB,KAAAd,GAAA,CACAwC,EAAAxC,EAAAuC,KAAA,IAAApJ,EAAAyG,EAAAllB,SAAA+Y,MAAAxkB,IAAAmgB,EAAA0R,GACA,QAAAzyB,EAAA,EAAmDA,EAAAm0B,EAAAl0B,SAAwBD,EAC3Em0B,EAAAn0B,GAAA8uB,KAAAhtB,KAAA6vB,GAEAxuB,MAAAsH,UAAA3I,KAAA4wB,MAAA1B,EAAAmD,SAIAnD,EAAAlvB,MAA4C6vB,OAAA7C,UAE5C,SAKA/tB,KAAAmwB,SAAAtuB,GAAAouB,EACAA,IAEApP,OAAA,SAAAF,EAAAK,GACA,IAAA/hB,EACA0R,EAIA0iB,EACAzC,EACA7C,EAJAuF,KAKA3S,EAAA4S,SAAA5S,EAAA4S,UAAA,EACAvzB,KAAAgxB,MACArQ,EAAA4S,WAEA,IAEAC,EAFAC,EAAA9S,EAAA4C,SAAA,GAAAnhB,MAAAue,EAAA4S,SAAA,GAAApxB,KAAA,MACAuxB,EAAA/S,EAAA4C,SAAA,GAAAnhB,MAAAue,EAAA4S,UAAApxB,KAAA,MAEAwxB,EAAA,EACAC,EAAA,EACA,IAAA30B,EAAA,EAAuB2xB,EAAA5wB,KAAAiwB,MAAAhxB,GAAwBA,IAC/C2xB,aAAA3oB,GACA2rB,IAAA30B,GACA20B,IAEAN,EAAAvyB,KAAA6vB,IAEAA,EAAAiD,WAAAjD,EAAAiD,aACAP,EAAAtf,OAAA2f,EAAA,EAAA/C,GACA+C,IACAC,KAEA,WAAAhD,EAAAxqB,MACAktB,EAAAtf,OAAA4f,EAAA,EAAAhD,GACAgD,KAGAN,EAAAvyB,KAAA6vB,GAMA,GAHA0C,KAAAtjB,OAAAsjB,IAGAtzB,KAAAgxB,KAAA,EACAqC,EAAA5G,EAAA9L,EAAA3gB,KAAA0zB,MAEA1S,EAAAF,IAAAuS,GACArS,EAAAF,IAAA4S,IAEA,IAAA9F,EAAA5tB,KAAA4tB,MACAkG,EAAAlG,EAAA1uB,OACA60B,OAAA,EAEA,IADAP,EAAA7S,EAAA4C,SAAA,UAAAmQ,EACAz0B,EAAA,EAA2BA,EAAA60B,EAAa70B,IAExC,GAAA80B,GADAhG,EAAAH,EAAA3uB,IACAC,OASA,IANAD,EAAA,GACA+hB,EAAAF,IAAA0S,GAEA7S,EAAAyE,eAAA,EACA2I,EAAA,GAAAlN,OAAAF,EAAAK,GACAL,EAAAyE,eAAA,EACAzU,EAAA,EAA+BA,EAAAojB,EAAgBpjB,IAC/Cod,EAAApd,GAAAkQ,OAAAF,EAAAK,GAGAA,EAAAF,KAAAH,EAAA4C,SAAA,IAAiD,QAAOkQ,GAGxD,IAAAx0B,EAAA,EAAuB2xB,EAAA0C,EAAAr0B,GAAuBA,IAAA,CAC9CA,EAAA,IAAAq0B,EAAAp0B,SACAyhB,EAAAsL,UAAA,GAEA,IAAA+H,EAAArT,EAAAsL,SACA2E,EAAAnQ,cAAAmQ,KACAjQ,EAAAsL,UAAA,GAEA2E,EAAA/P,OACA+P,EAAA/P,OAAAF,EAAAK,GAEA4P,EAAA1yB,OACA8iB,EAAAF,IAAA8P,EAAA1yB,MAAA4N,YAEA6U,EAAAsL,SAAA+H,GACArT,EAAAsL,UAAA2E,EAAAzO,YACAnB,EAAAF,IAAAH,EAAA4C,SAAA,QAAAkQ,GAGA9S,EAAAsL,UAAA,EAGAjsB,KAAAgxB,OACAhQ,EAAAF,IAAAH,EAAA4C,SAAA,IAAiD,KAAAmQ,EAAA,KACjD/S,EAAA4S,YAEAvS,EAAAD,WAAAJ,EAAA4C,WAAAvjB,KAAAixB,WACAjQ,EAAAF,IAAA,OAGAmT,cAAA,SAAArG,EAAAjN,EAAAqP,GACA,QAAA9Q,EAAA,EAA2BA,EAAA8Q,EAAA9wB,OAAsBggB,IACjDlf,KAAAk0B,aAAAtG,EAAAjN,EAAAqP,EAAA9Q,KAGAgV,aAAA,SAAAtG,EAAAjN,EAAA6P,GACA,SAAA2D,EAAAC,EAAAC,GACA,IAAAC,EAAA3jB,EACA,OAAAyjB,EAAAl1B,OACAo1B,EAAA,IAAAhQ,EAAA8P,EAAA,QAEA,CACA,IAAAG,EAAA,IAAAnyB,MAAAgyB,EAAAl1B,QACA,IAAAyR,EAAA,EAA+BA,EAAAyjB,EAAAl1B,OAA0ByR,IACzD4jB,EAAA5jB,GAAA,IAAAoU,EAAA,KAAAqP,EAAAzjB,GAAA0jB,EAAApP,WAAAoP,EAAA9T,OAAA8T,EAAA7T,WAEA8T,EAAA,IAAAhQ,EAAA,IAAAyF,EAAAwK,IAEA,OAAAD,EAEA,SAAAE,EAAAC,EAAAJ,GACA,IAAAjqB,EAGA,OAFAA,EAAA,IAAA2a,EAAA,KAAA0P,EAAAJ,EAAApP,WAAAoP,EAAA9T,OAAA8T,EAAA7T,WACA,IAAAuJ,GAAA3f,IAMA,SAAAsqB,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA9C,EAAA+C,EAaA,GAXAD,KAGAJ,EAAAz1B,OAAA,GAEA+yB,GADA8C,EAAAzN,EAAAqN,IACAvoB,MACA4oB,EAAAF,EAAAzK,cAAA/C,EAAA2K,EAAA3mB,YAGA0pB,EAAAF,EAAAzK,kBAEAuK,EAAA11B,OAAA,GAMA,IAAA8lB,EAAA6P,EAAA7P,WACAiQ,EAAAL,EAAA,GAAAtpB,SAAA,GACA0Z,EAAAJ,oBAAAqQ,EAAAjQ,WAAAJ,oBACAI,EAAAiQ,EAAAjQ,YAGAgQ,EAAA1pB,SAAAvK,KAAA,IAAAgkB,EAAAC,EAAAiQ,EAAA/2B,MAAA22B,EAAA5P,WAAA4P,EAAAtU,OAAAsU,EAAArU,YACAwU,EAAA1pB,SAAA0pB,EAAA1pB,SAAA0E,OAAA4kB,EAAA,GAAAtpB,SAAA+Y,MAAA,IAOA,GAJA,IAAA2Q,EAAA1pB,SAAApM,QACA61B,EAAAh0B,KAAAi0B,GAGAJ,EAAA11B,OAAA,GACA,IAAAg2B,EAAAN,EAAAvQ,MAAA,GACA6Q,IAAAvzB,IAAA,SAAA6uB,GACA,OAAAA,EAAAnG,cAAAmG,EAAAllB,eAEAypB,IAAA/kB,OAAAklB,GAEA,OAAAH,EAKA,SAAAI,EAAAR,EAAAS,EAAAP,EAAAC,EAAA5kB,GACA,IAAAS,EACA,IAAAA,EAAA,EAA2BA,EAAAgkB,EAAAz1B,OAA0ByR,IAAA,CACrD,IAAAokB,EAAAL,EAAAC,EAAAhkB,GAAAykB,EAAAP,EAAAC,GACA5kB,EAAAnP,KAAAg0B,GAEA,OAAA7kB,EAEA,SAAAmlB,EAAA/pB,EAAA0kB,GACA,IAAA/wB,EAAAq2B,EACA,OAAAhqB,EAAApM,OAGA,OAAA8wB,EAAA9wB,OAIA,IAAAD,EAAA,EAA2Bq2B,EAAAtF,EAAA/wB,GAAsBA,IAEjDq2B,EAAAp2B,OAAA,EACAo2B,IAAAp2B,OAAA,GAAAo2B,IAAAp2B,OAAA,GAAAmrB,cAAAiL,IAAAp2B,OAAA,GAAAoM,SAAA0E,OAAA1E,IAGAgqB,EAAAv0B,KAAA,IAAAgpB,EAAAze,SATA0kB,EAAAjvB,MAAA,IAAAgpB,EAAAze,KAyHA,SAAAiqB,EAAAnT,EAAAoT,GACA,IAAAlL,EAAAkL,EAAAnL,cAAAmL,EAAAlqB,SAAAkqB,EAAAxL,WAAAwL,EAAAtL,gBAEA,OADAI,EAAAjI,mBAAAD,GACAkI,EAGA,IAAArrB,EAAAw2B,EAGA,IAlHA,SAAAC,EAAA9H,EAAAjN,EAAAgV,GAWA,IAAA12B,EAAA0R,EAAAwV,EAAAyP,EAAAC,EAAAC,EAAAR,EAAAzK,EAAA3rB,EAAA+yB,EACA7nB,EACA2rB,EAFAC,GAAA,EAoBA,IAPAJ,KAIAC,OAGA52B,EAAA,EAA2B4rB,EAAA8K,EAAArqB,SAAArM,GAA+BA,IAE1D,SAAA4rB,EAAA3sB,MAAA,CACA,IAAA+3B,GArBAF,UADA3rB,EAsBAygB,GApBA3sB,iBAAAomB,IAGAyR,EAAA3rB,EAAAlM,uBACA6rB,EAGAgM,EANA,MAoBA,SAAAE,EAAA,CAGAZ,EAAAO,EAAAC,GACA,IACAK,EADAC,KAEAC,KAIA,IAHAF,EAAAR,EAAAS,EAAAxV,EAAAsV,GACAD,KAAAE,EAEA/P,EAAA,EAAuCA,EAAAgQ,EAAAj3B,OAAwBinB,IAE/DgP,EAAAU,GADArB,EAAAL,EAAAgC,EAAAhQ,GAAA0E,OACAA,EAAA8K,EAAAS,GAEAP,EAAAO,EACAR,UAGAA,EAAA70B,KAAA8pB,OAGA,CAQA,IAPAmL,GAAA,EAEAF,KAGAT,EAAAO,EAAAC,GAEAllB,EAAA,EAAmCA,EAAAklB,EAAA32B,OAAyByR,IAI5D,GAHA2kB,EAAAO,EAAAllB,GAGA,IAAAgQ,EAAAzhB,OAGAo2B,EAAAp2B,OAAA,GACAo2B,EAAA,GAAAhqB,SAAAvK,KAAA,IAAAgkB,EAAA8F,EAAA7F,WAAA,GAAA6F,EAAA5F,WAAA4F,EAAAtK,OAAAsK,EAAArK,YAEAsV,EAAA/0B,KAAAu0B,QAIA,IAAAnP,EAAA,EAA2CA,EAAAxF,EAAAzhB,OAAoBinB,IAAA,CAG/D,IAAA4O,EAAAL,EAAAY,EAAA3U,EAAAwF,GAAA0E,EAAA8K,GAEAG,EAAA/0B,KAAAg0B,GAKAc,EAAAC,EACAF,KAMA,IADAP,EAAAO,EAAAC,GACA52B,EAAA,EAA2BA,EAAA42B,EAAA32B,OAAyBD,KACpDC,EAAA22B,EAAA52B,GAAAC,QACA,IACA0uB,EAAA7sB,KAAA80B,EAAA52B,IACAgzB,EAAA4D,EAAA52B,GAAAC,EAAA,GACA22B,EAAA52B,GAAAC,EAAA,GAAA+yB,EAAA5H,cAAA4H,EAAA3mB,SAAAqqB,EAAA3L,aAGA,OAAAgM,EAUAN,CADAD,KACA9U,EAAA6P,GAEA,GAAA7P,EAAAzhB,OAAA,EAEA,IADAu2B,KACAx2B,EAAA,EAA+BA,EAAA0hB,EAAAzhB,OAAoBD,IAAA,CACnD,IAAAo3B,EAAA1V,EAAA1hB,GAAA0C,IAAA4zB,EAAA9gB,KAAAzU,KAAAwwB,EAAApO,mBACAiU,EAAAt1B,KAAAyvB,GACAiF,EAAA10B,KAAAs1B,QAIAZ,IAAAjF,IAGA,IAAAvxB,EAAA,EAAuBA,EAAAw2B,EAAAv2B,OAAqBD,IAC5C2uB,EAAA7sB,KAAA00B,EAAAx2B,OAKA,IAAAq3B,EAAA,SAAAp1B,EAAAhD,EAAA+xB,EAAAtwB,EAAAulB,EAAAuH,EAAA8J,EAAAnU,GACA,IAAAnjB,EAGA,GAFAe,KAAAkB,OACAlB,KAAA9B,mBAAAyhB,EAAAzhB,IAAA,IAAAstB,EAAAttB,KACA+xB,EAAA,CAQA,IAPA7tB,MAAAC,QAAA4tB,GACAjwB,KAAAiwB,SAGAjwB,KAAAiwB,UACAjwB,KAAAiwB,MAAA,GAAAD,UAAA,IAAAjG,KAAA,UAAApqB,EAAAulB,GAAA0F,wBAEA3rB,EAAA,EAAuBA,EAAAe,KAAAiwB,MAAA/wB,OAAuBD,IAC9Ce,KAAAiwB,MAAAhxB,GAAAiyB,cAAA,EAEAlxB,KAAAogB,UAAApgB,KAAAiwB,MAAAjwB,MAEAA,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAAysB,YACAzsB,KAAAu2B,aAAA,EACAv2B,KAAAqiB,mBAAAD,GACApiB,KAAA2rB,WAAA,GAEA2K,EAAA5sB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,SACA6a,OAAA,SAAAC,GACA,IAAAhjB,EAAA8B,KAAA9B,MAAA+xB,EAAAjwB,KAAAiwB,MACAA,IACAjwB,KAAAiwB,MAAA/O,EAAAkJ,WAAA6F,IAEA/xB,IACA8B,KAAA9B,MAAAgjB,EAAAC,MAAAjjB,KAGAuiB,cAAA,WACA,OAAAzgB,KAAAiwB,QAAAjwB,KAAA6zB,aAEAA,UAAA,WACA,mBAAA7zB,KAAAkB,MAEA2f,OAAA,SAAAF,EAAAK,GACA,IAAA9iB,EAAA8B,KAAA9B,MAAA+xB,EAAAjwB,KAAAiwB,MACAjP,EAAAF,IAAA9gB,KAAAkB,KAAAlB,KAAAkgB,WAAAlgB,KAAAmgB,YACAjiB,IACA8iB,EAAAF,IAAA,KACA5iB,EAAA2iB,OAAAF,EAAAK,IAEAiP,EACAjwB,KAAAw2B,cAAA7V,EAAAK,EAAAiP,GAGAjP,EAAAF,IAAA,MAGAM,KAAA,SAAAT,GACA,IAAA8V,EAAAC,EAAAx4B,EAAA8B,KAAA9B,MAAA+xB,EAAAjwB,KAAAiwB,MAmBA,OAhBAwG,EAAA9V,EAAAgW,UACAD,EAAA/V,EAAA8Q,YAEA9Q,EAAAgW,aACAhW,EAAA8Q,eACAvzB,IACAA,IAAAkjB,KAAAT,IAEAsP,KAEAA,KAAA,GAAA7O,KAAAT,KACA,GAAAqQ,MAAA,GAGArQ,EAAAgW,UAAAF,EACA9V,EAAA8Q,YAAAiF,EACA,IAAAJ,EAAAt2B,KAAAkB,KAAAhD,EAAA+xB,EAAAjwB,KAAAmgB,WAAAngB,KAAAkgB,WAAAlgB,KAAAysB,UAAAzsB,KAAAu2B,SAAAv2B,KAAAoiB,mBAEA4J,SAAA,SAAA9qB,GACA,GAAAlB,KAAAiwB,MAEA,OAAAF,EAAArmB,UAAAsiB,SAAAljB,KAAA9I,KAAAiwB,MAAA,GAAA/uB,IAGAiyB,KAAA,WACA,GAAAnzB,KAAAiwB,MAEA,OAAAF,EAAArmB,UAAAypB,KAAAxB,MAAA3xB,KAAAiwB,MAAA,GAAA9uB,YAGA6xB,SAAA,WACA,GAAAhzB,KAAAiwB,MAEA,OAAAF,EAAArmB,UAAAspB,SAAArB,MAAA3xB,KAAAiwB,MAAA,KAGAuG,cAAA,SAAA7V,EAAAK,EAAAiP,GACA,IACAhxB,EADA23B,EAAA3G,EAAA/wB,OAIA,GAFAyhB,EAAA4S,SAAA,KAAA5S,EAAA4S,UAEA5S,EAAA4C,SAAA,CAEA,IADAvC,EAAAF,IAAA,KACA7hB,EAAA,EAA2BA,EAAA23B,EAAa33B,IACxCgxB,EAAAhxB,GAAA4hB,OAAAF,EAAAK,GAIA,OAFAA,EAAAF,IAAA,UACAH,EAAA4S,WAIA,IAAAG,EAAA,KAAAtxB,MAAAue,EAAA4S,UAAApxB,KAAA,MAAAsxB,EAAAC,EAAA,KACA,GAAAkD,EAGA,CAGA,IAFA5V,EAAAF,IAAA,KAA8B2S,GAC9BxD,EAAA,GAAApP,OAAAF,EAAAK,GACA/hB,EAAA,EAA2BA,EAAA23B,EAAa33B,IACxC+hB,EAAAF,IAAA2S,GACAxD,EAAAhxB,GAAA4hB,OAAAF,EAAAK,GAEAA,EAAAF,IAAA4S,EAAA,UATA1S,EAAAF,IAAA,KAA8B4S,EAAA,KAW9B/S,EAAA4S,cAIA,IAAAsD,EAAA,SAAA/F,EAAA5C,GACAluB,KAAA8wB,UACA9wB,KAAAkuB,SACAluB,KAAAogB,UAAApgB,KAAA8wB,QAAA9wB,OAEA62B,EAAAntB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,kBACAmrB,WAAA,EACAtQ,OAAA,SAAAC,GACAlhB,KAAA8wB,QAAA5P,EAAAC,MAAAnhB,KAAA8wB,UAEA1P,KAAA,SAAAT,GACA,IAAAuN,EAAAluB,KAAAkuB,QAAA5G,EAAA3G,EAAAuN,QACA,WAAA2I,EAAA72B,KAAA8wB,QAAA5C,IAEA4I,SAAA,SAAAnW,GACA,OAAA3gB,KAAA8wB,QAAA1P,KAAAphB,KAAAkuB,OAAA,IAAAb,EAAAY,KAAAtN,EAAA3gB,KAAAkuB,OAAAle,OAAA2Q,EAAAuN,SAAAvN,MAIA,IAAAoW,EAAA,SAAAC,EAAAC,EAAAC,GACAl3B,KAAAg3B,YAAA1P,EAAA0P,GAAAG,UACAn3B,KAAAi3B,cAAA3P,EAAA2P,GAAAE,UACAD,EACAl3B,KAAAk3B,aAEAF,KAAA93B,SACAc,KAAAk3B,WAAAF,EAAA,KAGAD,EAAArtB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,OACA+e,MAAA,WACA,WAAA4R,EAAAzP,EAAAtnB,KAAAg3B,WAAA1P,EAAAtnB,KAAAi3B,aAAAj3B,KAAAk3B,aAEArW,OAAA,SAAAF,EAAAK,GAEA,IAAAoW,EAAAzW,KAAAyW,YACA,IAAAp3B,KAAAg3B,UAAA93B,OACA8hB,EAAAF,IAAA9gB,KAAAg3B,UAAA,KAEAI,GAAAp3B,KAAAk3B,WACAlW,EAAAF,IAAA9gB,KAAAk3B,aAEAE,GAAAp3B,KAAAi3B,YAAA/3B,QACA8hB,EAAAF,IAAA9gB,KAAAi3B,YAAA,KAGAnrB,SAAA,WACA,IAAA7M,EAAAo4B,EAAAr3B,KAAAg3B,UAAA70B,KAAA,KACA,IAAAlD,EAAA,EAAuBA,EAAAe,KAAAi3B,YAAA/3B,OAA6BD,IACpDo4B,GAAA,IAAAr3B,KAAAi3B,YAAAh4B,GAEA,OAAAo4B,GAEAzV,QAAA,SAAAkC,GACA,OAAA9jB,KAAAs3B,GAAAxT,EAAAhY,YAAA,OAAArJ,GAEA60B,GAAA,SAAAC,GACA,OAAAv3B,KAAA8L,WAAA0rB,gBAAAD,EAAAC,eAEAC,SAAA,WACA,OAAAv3B,OAAA,8DAAA8L,KAAAhM,KAAA0gB,UAEAK,QAAA,WACA,WAAA/gB,KAAAg3B,UAAA93B,QAAA,IAAAc,KAAAi3B,YAAA/3B,QAEAw4B,WAAA,WACA,OAAA13B,KAAAg3B,UAAA93B,QAAA,OAAAc,KAAAi3B,YAAA/3B,QAEAyC,IAAA,SAAA2E,GACA,IAAArH,EACA,IAAAA,EAAA,EAAuBA,EAAAe,KAAAg3B,UAAA93B,OAA2BD,IAClDe,KAAAg3B,UAAA/3B,GAAAqH,EAAAtG,KAAAg3B,UAAA/3B,IAAA,GAEA,IAAAA,EAAA,EAAuBA,EAAAe,KAAAi3B,YAAA/3B,OAA6BD,IACpDe,KAAAi3B,YAAAh4B,GAAAqH,EAAAtG,KAAAi3B,YAAAh4B,IAAA,IAGA04B,UAAA,WACA,IAAAC,EAEAC,EACAC,EAFA5nB,KAUA,IAAA4nB,KAPAD,EAAA,SAAAE,GAKA,OAHAH,EAAApmB,eAAAumB,KAAA7nB,EAAA4nB,KACA5nB,EAAA4nB,GAAAC,GAEAA,GAEAtZ,EACAA,EAAAjN,eAAAsmB,KACAF,EAAAnZ,EAAAqZ,GACA93B,KAAA2B,IAAAk2B,IAGA,OAAA3nB,GAEA8nB,OAAA,WACA,IACAD,EACA94B,EAFAg5B,KAGA,IAAAh5B,EAAA,EAAuBA,EAAAe,KAAAg3B,UAAA93B,OAA2BD,IAElDg5B,EADAF,EAAA/3B,KAAAg3B,UAAA/3B,KACAg5B,EAAAF,IAAA,KAEA,IAAA94B,EAAA,EAAuBA,EAAAe,KAAAi3B,YAAA/3B,OAA6BD,IAEpDg5B,EADAF,EAAA/3B,KAAAi3B,YAAAh4B,KACAg5B,EAAAF,IAAA,KAIA,IAAAA,KAFA/3B,KAAAg3B,aACAh3B,KAAAi3B,eACAgB,EACA,GAAAA,EAAAzmB,eAAAumB,GAAA,CACA,IAAAG,EAAAD,EAAAF,GACA,GAAAG,EAAA,EACA,IAAAj5B,EAAA,EAAmCA,EAAAi5B,EAAWj5B,IAC9Ce,KAAAg3B,UAAAj2B,KAAAg3B,QAGA,GAAAG,EAAA,EACA,IAAAj5B,EAAA,EAAmCA,GAAAi5B,EAAYj5B,IAC/Ce,KAAAi3B,YAAAl2B,KAAAg3B,GAKA/3B,KAAAg3B,UAAAG,OACAn3B,KAAAi3B,YAAAE,UAOA,IAAAgB,EAAA,SAAAj6B,EAAAk6B,GAEA,GADAp4B,KAAA9B,MAAAm6B,WAAAn6B,GACAgE,MAAAlC,KAAA9B,OACA,UAAA8L,MAAA,8BAEAhK,KAAAo4B,qBAAArB,EAAAqB,EACA,IAAArB,EAAAqB,WAAA31B,GACAzC,KAAAogB,UAAApgB,KAAAo4B,KAAAp4B,OAEAm4B,EAAAzuB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,YACA6a,OAAA,SAAAC,GACAlhB,KAAAo4B,KAAAlX,EAAAC,MAAAnhB,KAAAo4B,OAEAhX,KAAA,SAAAT,GACA,OAAA3gB,MAEAs4B,QAAA,WACA,WAAAhW,GAAAtiB,KAAA9B,MAAA8B,KAAA9B,MAAA8B,KAAA9B,SAEA2iB,OAAA,SAAAF,EAAAK,GACA,GAAAL,KAAAyW,cAAAp3B,KAAAo4B,KAAAV,aACA,UAAA1tB,MAAA,sFAAAhK,KAAAo4B,KAAAtsB,YAEA,IAAA5N,EAAA8B,KAAAwhB,OAAAb,EAAA3gB,KAAA9B,OACAq6B,EAAAC,OAAAt6B,GAKA,GAJA,IAAAA,KAAA,MAAAA,GAAA,OAEAq6B,EAAAr6B,EAAAyjB,QAAA,IAAA1hB,QAAA,WAEA0gB,KAAA4C,SAAA,CAEA,OAAArlB,GAAA8B,KAAAo4B,KAAAX,WAEA,YADAzW,EAAAF,IAAAyX,GAIAr6B,EAAA,GAAAA,EAAA,IACAq6B,EAAA,EAAAzO,OAAA,IAGA9I,EAAAF,IAAAyX,GACAv4B,KAAAo4B,KAAAvX,OAAAF,EAAAK,IAKA6C,QAAA,SAAAlD,EAAAW,EAAAwC,GAEA,IAAA5lB,EAAA8B,KAAAqhB,SAAAV,EAAAW,EAAAthB,KAAA9B,MAAA4lB,EAAA5lB,OACAk6B,EAAAp4B,KAAAo4B,KAAAjT,QACA,SAAA7D,GAAA,MAAAA,EACA,OAAA8W,EAAApB,UAAA93B,QAAA,IAAAk5B,EAAAnB,YAAA/3B,OACAk5B,EAAAtU,EAAAsU,KAAAjT,QACAnlB,KAAAo4B,KAAAlB,aACAkB,EAAAlB,WAAAl3B,KAAAo4B,KAAAlB,iBAGA,OAAApT,EAAAsU,KAAApB,UAAA93B,QAAA,IAAAk5B,EAAAnB,YAAA/3B,YACA,CAEA,GADA4kB,IAAA2U,UAAAz4B,KAAAo4B,KAAAT,aACAhX,EAAAyW,aAAAtT,EAAAsU,KAAAtsB,aAAAssB,EAAAtsB,WACA,UAAA9B,MAAA,8EACAouB,EAAAtsB,WAAA,UAAAgY,EAAAsU,KAAAtsB,WAAA,MAEA5N,EAAA8B,KAAAqhB,SAAAV,EAAAW,EAAAthB,KAAA9B,MAAA4lB,EAAA5lB,WAGA,MAAAojB,GACA8W,EAAApB,UAAAoB,EAAApB,UAAAhnB,OAAA8T,EAAAsU,KAAApB,WAAAG,OACAiB,EAAAnB,YAAAmB,EAAAnB,YAAAjnB,OAAA8T,EAAAsU,KAAAnB,aAAAE,OACAiB,EAAAJ,UAEA,MAAA1W,IACA8W,EAAApB,UAAAoB,EAAApB,UAAAhnB,OAAA8T,EAAAsU,KAAAnB,aAAAE,OACAiB,EAAAnB,YAAAmB,EAAAnB,YAAAjnB,OAAA8T,EAAAsU,KAAApB,WAAAG,OACAiB,EAAAJ,UAEA,WAAAG,EAAAj6B,EAAAk6B,IAEAxW,QAAA,SAAAkC,GACA,IAAAhf,EAAAyc,EACA,GAAAuC,aAAAqU,EAAA,CAGA,GAAAn4B,KAAAo4B,KAAArX,WAAA+C,EAAAsU,KAAArX,UACAjc,EAAA9E,KACAuhB,EAAAuC,OAKA,GAFAhf,EAAA9E,KAAA04B,QACAnX,EAAAuC,EAAA4U,QACA,IAAA5zB,EAAAszB,KAAAxW,QAAAL,EAAA6W,MACA,OAGA,OAAAzY,EAAAkC,eAAA/c,EAAA5G,MAAAqjB,EAAArjB,SAEAw6B,MAAA,WACA,OAAA14B,KAAAy4B,WAAmCv5B,OAAA,KAAA+f,SAAA,IAAAG,MAAA,SAEnCqZ,UAAA,SAAAE,GACA,IAEA15B,EACA64B,EACAF,EACAgB,EAEAC,EAPA36B,EAAA8B,KAAA9B,MACAk6B,EAAAp4B,KAAAo4B,KAAAjT,QAKA2T,KAEA,oBAAAH,EAAA,CACA,IAAA15B,KAAAwf,EACAA,EAAAxf,GAAAuS,eAAAmnB,MACAG,MACA75B,GAAA05B,GAGAA,EAAAG,EAeA,IAAAhB,KAbAe,EAAA,SAAAd,EAAAd,GAEA,OAAAW,EAAApmB,eAAAumB,IACAd,EACA/4B,GAAA05B,EAAAG,GAAAH,EAAAgB,GAGA16B,GAAA05B,EAAAG,GAAAH,EAAAgB,GAEAA,GAEAb,GAEAY,EACAA,EAAAnnB,eAAAsmB,KACAc,EAAAD,EAAAb,GACAF,EAAAnZ,EAAAqZ,GACAM,EAAAz2B,IAAAk3B,IAIA,OADAT,EAAAJ,SACA,IAAAG,EAAAj6B,EAAAk6B,MAIA,IAAAW,EAAA1T,EACA2T,EAAA,SAAA1X,EAAA2X,EAAAC,GACAl5B,KAAAshB,KAAAuD,OACA7kB,KAAAi5B,WACAj5B,KAAAk5B,YAEAF,EAAAtvB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,YACA6a,OAAA,SAAAC,GACAlhB,KAAAi5B,SAAA/X,EAAAkJ,WAAApqB,KAAAi5B,WAEA7X,KAAA,SAAAT,GACA,IAAAW,EAAAxc,EAAA9E,KAAAi5B,SAAA,GAAA7X,KAAAT,GAAAY,EAAAvhB,KAAAi5B,SAAA,GAAA7X,KAAAT,GACA,GAAAA,EAAAgO,SAAA3uB,KAAAshB,IAAA,CAQA,GAPAA,EAAA,OAAAthB,KAAAshB,GAAA,IAAAthB,KAAAshB,GACAxc,aAAAqzB,GAAA5W,aAAAe,IACAxd,IAAAwzB,WAEA/W,aAAA4W,GAAArzB,aAAAwd,IACAf,IAAA+W,YAEAxzB,EAAA+e,UAAAtC,EAAAsC,QAAA,CACA,IAAA/e,aAAAk0B,GAAAzX,aAAAyX,IACA,MAAAl0B,EAAAwc,IAAAX,EAAAwH,OAAA4Q,EAAAxT,gBACA,WAAAyT,EAAAh5B,KAAAshB,IAAAxc,EAAAyc,GAAAvhB,KAAAk5B,UAEA,MAA2B9yB,KAAA,YAC3B4iB,QAAA,gCAEA,OAAAlkB,EAAA+e,QAAAlD,EAAAW,EAAAC,GAGA,WAAAyX,EAAAh5B,KAAAshB,IAAAxc,EAAAyc,GAAAvhB,KAAAk5B,WAGArY,OAAA,SAAAF,EAAAK,GACAhhB,KAAAi5B,SAAA,GAAApY,OAAAF,EAAAK,GACAhhB,KAAAk5B,UACAlY,EAAAF,IAAA,KAEAE,EAAAF,IAAA9gB,KAAAshB,IACAthB,KAAAk5B,UACAlY,EAAAF,IAAA,KAEA9gB,KAAAi5B,SAAA,GAAApY,OAAAF,EAAAK,MA2BA,IAAAmY,GAAA,SAAAj7B,EAAAk7B,GAGA,GAFAp5B,KAAA9B,QACA8B,KAAAo5B,aACAl7B,EACA,UAAA8L,MAAA,2CAGAmvB,GAAAzvB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,aACA6a,OAAA,SAAAC,GACAlhB,KAAA9B,MAAAgjB,EAAAkJ,WAAApqB,KAAA9B,QAEAkjB,KAAA,SAAAT,GACA,IAAA0Y,EACA3K,EAAA/N,EAAAgO,WACAJ,EAAAvuB,KAAAs5B,OACAC,GAAA,EA4BA,OA3BAhL,GACA5N,EAAA4N,gBAEAvuB,KAAA9B,MAAAgB,OAAA,EACAm6B,EAAA,IAAAF,GAAAn5B,KAAA9B,MAAAyD,IAAA,SAAAwR,GACA,OAAAA,EAAAiO,KAGAjO,EAAAiO,KAAAT,GAFAxN,IAGiBnT,KAAAo5B,WAEjB,IAAAp5B,KAAA9B,MAAAgB,SACAc,KAAA9B,MAAA,GAAAo7B,QAAAt5B,KAAA9B,MAAA,GAAAs7B,YAAA7Y,EAAA0N,SACAkL,GAAA,GAEAF,EAAAr5B,KAAA9B,MAAA,GAAAkjB,KAAAT,IAGA0Y,EAAAr5B,KAEAuuB,GACA5N,EAAA8N,oBAEAzuB,KAAAs5B,SAAAt5B,KAAAw5B,YAAA9K,GAAA6K,GACAF,aAAAlB,IACAkB,EAAA,IAAA/U,EAAA+U,IAEAA,GAEAxY,OAAA,SAAAF,EAAAK,GACA,QAAA/hB,EAAA,EAA2BA,EAAAe,KAAA9B,MAAAgB,OAAuBD,IAClDe,KAAA9B,MAAAe,GAAA4hB,OAAAF,EAAAK,IACAhhB,KAAAo5B,WAAAn6B,EAAA,EAAAe,KAAA9B,MAAAgB,QACA8hB,EAAAF,IAAA,MAIA2Y,kBAAA,WACAz5B,KAAA9B,MAAA8B,KAAA9B,MAAAwzB,OAAA,SAAA9vB,GACA,QAAAA,aAAAqG,QAKA,IAAAyxB,GAAA,WACA,SAAAA,EAAAx4B,EAAAyf,EAAAhhB,EAAAulB,GACAllB,KAAAkB,OAAAJ,cACAd,KAAAL,QACAK,KAAA2gB,UACA3gB,KAAAklB,kBACAllB,KAAAqpB,KAAA1I,EAAAuN,OAAA,GAAAkB,iBAAAnP,IAAAjgB,KAAAkB,MAoCA,OAlCAw4B,EAAAhwB,UAAAiwB,QAAA,WACA,OAAA/N,QAAA5rB,KAAAqpB,OAEAqQ,EAAAhwB,UAAAZ,KAAA,SAAA0a,GACA,IAAAgM,EAAAxvB,KACAoC,MAAAC,QAAAmhB,KACAA,OAEA,IAAAoW,EAAA55B,KAAAqpB,KAAAuQ,UACA,IAAAA,IACApW,IAAA7hB,IAAA,SAAAmD,GAA8C,OAAAA,EAAAsc,KAAAoO,EAAA7O,YAE9C,IAAAkZ,EAAA,SAAAx1B,GAAiD,oBAAAA,EAAA+B,OAiBjD,OAdAod,IACAkO,OAAAmI,GACAl4B,IAAA,SAAA0C,GACA,kBAAAA,EAAA+B,KAAA,CACA,IAAA0zB,EAAAz1B,EAAAnG,MAAAwzB,OAAAmI,GACA,WAAAC,EAAA56B,OACA46B,EAAA,GAGA,IAAAX,GAAAW,GAGA,OAAAz1B,KAEA,IAAAu1B,EACA55B,KAAAqpB,KAAAsI,MAAA3xB;;;;;;;;;;;;;;;AA3GA,WACA,QAAAkf,EAAA,EAAAjgB,EAAA,EAAAinB,EAAA/kB,UAAAjC,OAAqDD,EAAAinB,EAAQjnB,IAAAigB,GAAA/d,UAAAlC,GAAAC,OAC7D,IAAA+jB,EAAA7gB,MAAA8c,GAAAiH,EAAA,MAAAlnB,EAAA,EAA4CA,EAAAinB,EAAQjnB,IACpD,QAAA6F,EAAA3D,UAAAlC,GAAA0R,EAAA,EAAAyV,EAAAthB,EAAA5F,OAA4DyR,EAAAyV,EAAQzV,IAAAwV,IACpElD,EAAAkD,GAAArhB,EAAA6L,GACA,OAAAsS,EAsGA8W,EAAA/5B,KAAA2gB,SAAA6C,IAEAxjB,KAAAqpB,KAAAsI,MAAA3xB,KAAAwjB,IAEAkW,EA1CA,GAgDAM,GAAA,SAAA94B,EAAAsiB,EAAA7jB,EAAAulB,GACAllB,KAAAkB,OACAlB,KAAAwjB,OACAxjB,KAAAi6B,KAAA,SAAA/4B,EACAlB,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,GAEA8U,GAAAtwB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,OACA6a,OAAA,SAAAC,GACAlhB,KAAAwjB,OACAxjB,KAAAwjB,KAAAtC,EAAAkJ,WAAApqB,KAAAwjB,QAcApC,KAAA,SAAAT,GACA,IAAA6O,EAAAxvB,KAIAk6B,EAAAvZ,EAAA+N,OACA/N,EAAA+N,QAAA1uB,KAAAi6B,MACAj6B,KAAAi6B,MAAAtZ,EAAA0N,SACA1N,EAAAwN,YAEA,IAMAje,EANAoe,EAAA,YACAkB,EAAAyK,MAAAtZ,EAAA0N,SACA1N,EAAA2N,WAEA3N,EAAA+N,OAAAwL,GAGAC,EAAA,IAAAT,GAAA15B,KAAAkB,KAAAyf,EAAA3gB,KAAAmgB,WAAAngB,KAAAkgB,YACA,GAAAia,EAAAR,UACA,IACAzpB,EAAAiqB,EAAArxB,KAAA9I,KAAAwjB,MACA8K,IAEA,MAAAnb,GACA,GAAAA,EAAA3B,eAAA,SAAA2B,EAAA3B,eAAA,UACA,MAAA2B,EAEA,MACA/M,KAAA+M,EAAA/M,MAAA,UACA4iB,QAAA,8BAAAhpB,KAAAkB,KAAA,KAAAiS,EAAA6V,QAAA,KAAA7V,EAAA6V,QAAA,IACArpB,MAAAK,KAAAmgB,WACAxL,SAAA3U,KAAAkgB,WAAAvL,SACA9H,KAAAsG,EAAA4Z,WACA1F,OAAAlU,EAAAinB,cAIA,UAAAlqB,QAAAzN,IAAAyN,EAaA,OAVAA,aAAAyP,IAKAzP,EAAA,IAAAsb,EAJAtb,IAAA,IAAAA,EAIAA,EAAApE,WAHA,OAMAoE,EAAAqQ,OAAAvgB,KAAAugB,OACArQ,EAAAsQ,UAAAxgB,KAAAwgB,UACAtQ,EAEA,IAAAsT,EAAAxjB,KAAAwjB,KAAA7hB,IAAA,SAAAmD,GAAmD,OAAAA,EAAAsc,KAAAT,KAEnD,OADA2N,IACA,IAAA0L,GAAAh6B,KAAAkB,KAAAsiB,EAAAxjB,KAAAmgB,WAAAngB,KAAAkgB,aAEAW,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA9gB,KAAAkB,KAAA,IAAAlB,KAAAkgB,WAAAlgB,KAAAmgB,YACA,QAAAlhB,EAAA,EAA2BA,EAAAe,KAAAwjB,KAAAtkB,OAAsBD,IACjDe,KAAAwjB,KAAAvkB,GAAA4hB,OAAAF,EAAAK,GACA/hB,EAAA,EAAAe,KAAAwjB,KAAAtkB,QACA8hB,EAAAF,IAAA,MAGAE,EAAAF,IAAA,QAIA,IAAAuZ,GAAA,SAAAn5B,EAAAvB,EAAAulB,GACAllB,KAAAkB,OACAlB,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,GAEAmV,GAAA3wB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,WACAgb,KAAA,SAAAT,GACA,IAAAqL,EAAA9qB,EAAAlB,KAAAkB,KAIA,GAHA,IAAAA,EAAAZ,QAAA,QACAY,EAAA,QAAAm5B,GAAAn5B,EAAAmjB,MAAA,GAAArkB,KAAAmgB,WAAAngB,KAAAkgB,YAAAkB,KAAAT,GAAAziB,OAEA8B,KAAAs6B,WACA,MAAuBl0B,KAAA,OAAA4iB,QAAA,qCAAA9nB,EAAAyT,SAAA3U,KAAAkgB,WAAAvL,SACvBhV,MAAAK,KAAAmgB,YAmBA,GAjBAngB,KAAAs6B,YAAA,EACAtO,EAAAhsB,KAAAmzB,KAAAxS,EAAAuN,OAAA,SAAAtf,GACA,IAAAhN,EAAAgN,EAAAod,SAAA9qB,GACA,GAAAU,EAAA,CACA,GAAAA,EAAAmqB,UACApL,EAAA2L,eAAA3L,EAAA2L,eAAAptB,OAAA,GACA6sB,UAAAnqB,EAAAmqB,UAGA,OAAApL,EAAA0N,OACA,IAAA2L,GAAA,SAAAp4B,EAAA1D,QAAAkjB,KAAAT,GAGA/e,EAAA1D,MAAAkjB,KAAAT,MAMA,OADA3gB,KAAAs6B,YAAA,EACAtO,EAGA,MAAuB5lB,KAAA,OAAA4iB,QAAA,YAAA9nB,EAAA,gBAAAyT,SAAA3U,KAAAkgB,WAAAvL,SACvBhV,MAAAK,KAAAmgB,aAGAgT,KAAA,SAAAr0B,EAAAy7B,GACA,QAAAt7B,EAAA,EAAAgkB,OAAA,EAAuChkB,EAAAH,EAAAI,OAAgBD,IAEvD,GADAgkB,EAAAsX,EAAAzxB,KAAAhK,IAAAG,IAEA,OAAAgkB,EAGA,eAIA,IAAAuX,GAAA,SAAAt5B,EAAAvB,EAAAulB,GACAllB,KAAAkB,OACAlB,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,GAEAsV,GAAA9wB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,WACAgb,KAAA,SAAAT,GACA,IAAAgS,EACAzxB,EAAAlB,KAAAkB,KAEAu5B,EAAA9Z,EAAA5L,cAAA3P,KAAAs1B,SAAAC,aAAAjxB,UAAAkxB,YACA,GAAA56B,KAAAs6B,WACA,MAAuBl0B,KAAA,OAAA4iB,QAAA,oCAAA9nB,EAAAyT,SAAA3U,KAAAkgB,WAAAvL,SACvBhV,MAAAK,KAAAmgB,YAqBA,GAnBAngB,KAAAs6B,YAAA,EACA3H,EAAA3yB,KAAAmzB,KAAAxS,EAAAuN,OAAA,SAAAtf,GACA,IAAAhN,EACAi5B,EAAAjsB,EAAA+jB,SAAAzxB,GACA,GAAA25B,EAAA,CACA,QAAA57B,EAAA,EAAmCA,EAAA47B,EAAA37B,OAAiBD,IACpD2C,EAAAi5B,EAAA57B,GACA47B,EAAA57B,GAAA,IAAA6sB,EAAAlqB,EAAAV,KAAAU,EAAA1D,MAAA0D,EAAAmqB,UAAAnqB,EAAA+mB,MAAA/mB,EAAAjC,MAAAiC,EAAAsjB,gBAAAtjB,EAAAnD,OAAAmD,EAAAoqB,UAIA,GAFAyO,EAAAI,IACAj5B,EAAAi5B,IAAA37B,OAAA,IACA6sB,UACApL,EAAA2L,eAAA3L,EAAA2L,eAAAptB,OAAA,GACA6sB,UAAAnqB,EAAAmqB,UAGA,OADAnqB,IAAA1D,MAAAkjB,KAAAT,MAMA,OADA3gB,KAAAs6B,YAAA,EACA3H,EAGA,MAAuBvsB,KAAA,OAAA4iB,QAAA,aAAA9nB,EAAA,iBAAAyT,SAAA3U,KAAAklB,gBAAAvQ,SACvBhV,MAAAK,KAAAL,QAGAwzB,KAAA,SAAAr0B,EAAAy7B,GACA,QAAAt7B,EAAA,EAAAgkB,OAAA,EAAuChkB,EAAAH,EAAAI,OAAgBD,IAEvD,GADAgkB,EAAAsX,EAAAzxB,KAAAhK,IAAAG,IAEA,OAAAgkB,EAGA,eAIA,IAAA6X,GAAA,SAAAj5B,EAAAyf,EAAApjB,GACA8B,KAAA6B,MACA7B,KAAAshB,KACAthB,KAAA9B,SAEA48B,GAAApxB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,YACAgb,KAAA,SAAAT,GACA,WAAAma,GAAA96B,KAAA6B,IAAAuf,KAAAphB,KAAA6B,IAAAuf,KAAAT,GAAA3gB,KAAA6B,IAAA7B,KAAAshB,GAAAthB,KAAA9B,OAAA8B,KAAA9B,MAAAkjB,KAAAphB,KAAA9B,MAAAkjB,KAAAT,GAAA3gB,KAAA9B,QAEA2iB,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA9gB,KAAA0gB,MAAAC,KAEAD,MAAA,SAAAC,GACA,IAAAziB,EAAA8B,KAAA6B,IAAA6e,MAAA1gB,KAAA6B,IAAA6e,MAAAC,GAAA3gB,KAAA6B,IAKA,OAJA7B,KAAAshB,KACApjB,GAAA8B,KAAAshB,GACApjB,GAAA8B,KAAA9B,MAAAwiB,MAAA1gB,KAAA9B,MAAAwiB,MAAAC,GAAA3gB,KAAA9B,OAEA,IAAAA,EAAA,OAIA,IAAA68B,GAAA,SAAAl8B,EAAAm8B,EAAA55B,EAAAzB,EAAAulB,GACAllB,KAAAoB,QAAA,MAAAA,KACApB,KAAA9B,MAAA88B,GAAA,GACAh7B,KAAAi7B,MAAAp8B,EAAAqN,OAAA,GACAlM,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAAk7B,cAAA,iBACAl7B,KAAAm7B,UAAA,kBACAn7B,KAAA2rB,UAAAvqB,GAEA25B,GAAArxB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,SACAya,OAAA,SAAAF,EAAAK,GACAhhB,KAAAoB,SACA4f,EAAAF,IAAA9gB,KAAAi7B,MAAAj7B,KAAAkgB,WAAAlgB,KAAAmgB,YAEAa,EAAAF,IAAA9gB,KAAA9B,OACA8B,KAAAoB,SACA4f,EAAAF,IAAA9gB,KAAAi7B,QAGAG,kBAAA,WACA,OAAAp7B,KAAA9B,MAAA2B,MAAAG,KAAAk7B,gBAEA9Z,KAAA,SAAAT,GACA,IAAA0a,EAAAr7B,KACA9B,EAAA8B,KAAA9B,MASA,SAAAo9B,EAAAp9B,EAAAq9B,EAAAC,GACA,IAAAC,EAAAv9B,EACA,GAEAu9B,GADAv9B,EAAAu9B,EAAA3vB,YACA7L,QAAAs7B,EAAAC,SACiBt9B,IAAAu9B,GACjB,OAAAA,EAIA,OADAv9B,EAAAo9B,EADAp9B,EAAAo9B,EAAAp9B,EAAA8B,KAAAk7B,cAhBA,SAAAxpB,EAAAxQ,GACA,IAAAU,EAAA,IAAAy4B,GAAA,IAAAn5B,EAAAm6B,EAAAlb,WAAAkb,EAAAnb,YAAAkB,KAAAT,GAAA,GACA,OAAA/e,aAAAm5B,GAAAn5B,EAAA1D,MAAA0D,EAAA8e,UAeA1gB,KAAAm7B,UAbA,SAAAzpB,EAAAxQ,GACA,IAAAU,EAAA,IAAA44B,GAAA,IAAAt5B,EAAAm6B,EAAAlb,WAAAkb,EAAAnb,YAAAkB,KAAAT,GAAA,GACA,OAAA/e,aAAAm5B,GAAAn5B,EAAA1D,MAAA0D,EAAA8e,UAYA,IAAAqa,GAAA/6B,KAAAi7B,MAAA/8B,EAAA8B,KAAAi7B,MAAA/8B,EAAA8B,KAAAoB,QAAApB,KAAAmgB,WAAAngB,KAAAkgB,aAEA0B,QAAA,SAAAkC,GAEA,iBAAAA,EAAA1d,MAAApG,KAAAoB,SAAA0iB,EAAA1iB,QAIA0iB,EAAApD,OAAA1gB,KAAA0gB,UAAAoD,EAAApD,QAAA,OAAAje,EAHAkd,EAAAkC,eAAA7hB,KAAA9B,MAAA4lB,EAAA5lB,UAWA,IAAAw9B,GAAA,SAAAC,EAAAh8B,EAAAulB,EAAA0W,GACA57B,KAAA9B,MAAAy9B,EACA37B,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAA47B,WAEAF,GAAAhyB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,MACA6a,OAAA,SAAAC,GACAlhB,KAAA9B,MAAAgjB,EAAAC,MAAAnhB,KAAA9B,QAEA2iB,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA,QACA9gB,KAAA9B,MAAA2iB,OAAAF,EAAAK,GACAA,EAAAF,IAAA,MAEAM,KAAA,SAAAT,GACA,IACAmO,EADA6M,EAAA37B,KAAA9B,MAAAkjB,KAAAT,GAEA,IAAA3gB,KAAA47B,UAGA,iBADA9M,EAAA9uB,KAAAkgB,YAAAlgB,KAAAkgB,WAAA4O,WAEA,iBAAA6M,EAAAz9B,OACAyiB,EAAAiO,oBAAA+M,EAAAz9B,QACAy9B,EAAAV,QACAnM,IA5BA7uB,QAAA,uBAAAJ,GAA6D,WAAAA,KA8B7D87B,EAAAz9B,MAAAyiB,EAAAkO,YAAA8M,EAAAz9B,MAAA4wB,IAGA6M,EAAAz9B,MAAAyiB,EAAAqO,cAAA2M,EAAAz9B,OAGAyiB,EAAAkb,UACAF,EAAAz9B,MAAA2B,MAAA,eACA,IACAg8B,IADA,IAAAF,EAAAz9B,MAAAoC,QAAA,cACAqgB,EAAAkb,SACA,IAAAF,EAAAz9B,MAAAoC,QAAA,KACAq7B,EAAAz9B,MAAAy9B,EAAAz9B,MAAA+B,QAAA,IAAA47B,EAAA,KAGAF,EAAAz9B,OAAA29B,EAKA,WAAAH,GAAAC,EAAA37B,KAAAmgB,WAAAngB,KAAAkgB,YAAA,MAIA,IAAA4b,GAAA,SAAA59B,EAAA69B,EAAAp8B,EAAAulB,EAAA9C,GACApiB,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACA,IAAA8K,EAAA,IAAAjG,KAAA,UAAA/pB,KAAAugB,OAAAvgB,KAAAwgB,WAAAoK,uBACA5qB,KAAA+7B,SAAA,IAAA3Q,EAAA2Q,GACA/7B,KAAAiwB,OAAA,IAAAF,EAAAC,EAAA9xB,IACA8B,KAAAiwB,MAAA,GAAAiB,cAAA,EACAlxB,KAAAqiB,mBAAAD,GACApiB,KAAA2rB,WAAA,EACA3rB,KAAAogB,UAAA4P,EAAAhwB,MACAA,KAAAogB,UAAApgB,KAAA+7B,SAAA/7B,MACAA,KAAAogB,UAAApgB,KAAAiwB,MAAAjwB,OAEA87B,GAAApyB,UAAA3L,OAAAglB,OAAA,IAAAuT,GACAlwB,KAAA,QACAqa,cAAA,WACA,UAEAQ,OAAA,SAAAC,GACAlhB,KAAA+7B,WACA/7B,KAAA+7B,SAAA7a,EAAAC,MAAAnhB,KAAA+7B,WAEA/7B,KAAAiwB,QACAjwB,KAAAiwB,MAAA/O,EAAAkJ,WAAApqB,KAAAiwB,SAGApP,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA,UAAA9gB,KAAAwgB,UAAAxgB,KAAAugB,QACAvgB,KAAA+7B,SAAAlb,OAAAF,EAAAK,GACAhhB,KAAAw2B,cAAA7V,EAAAK,EAAAhhB,KAAAiwB,QAEA7O,KAAA,SAAAT,GACAA,EAAA8Q,cACA9Q,EAAA8Q,eACA9Q,EAAAgW,cAEA,IAAAtkB,EAAA,IAAAypB,GAAA,QAAA97B,KAAAugB,OAAAvgB,KAAAwgB,UAAAxgB,KAAAoiB,kBAaA,OAZApiB,KAAAysB,YACAzsB,KAAAiwB,MAAA,GAAAxD,UAAAzsB,KAAAysB,UACApa,EAAAoa,UAAAzsB,KAAAysB,WAEApa,EAAA0pB,SAAA/7B,KAAA+7B,SAAA3a,KAAAT,GACAA,EAAAgW,UAAA51B,KAAAsR,GACAsO,EAAA8Q,YAAA1wB,KAAAsR,GACArS,KAAAiwB,MAAA,GAAAb,iBAAAzO,EAAAuN,OAAA,GAAAkB,iBAAAO,UACAhP,EAAAuN,OAAAxrB,QAAA1C,KAAAiwB,MAAA,IACA5d,EAAA4d,OAAAjwB,KAAAiwB,MAAA,GAAA7O,KAAAT,IACAA,EAAAuN,OAAAvrB,QACAge,EAAAgW,UAAAvqB,MACA,IAAAuU,EAAAgW,UAAAz3B,OAAAmT,EAAA2pB,QAAArb,GACAtO,EAAA4pB,WAAAtb,IAEAqb,QAAA,SAAArb,GACA,IAAAzQ,EAAAlQ,KAEA,GAAA2gB,EAAA8Q,YAAAvyB,OAAA,GACA,IAAA8wB,EAAA,IAAAjG,KAAA,UAAA/pB,KAAAmgB,WAAAngB,KAAAkgB,YAAA0K,wBACA1a,EAAA,IAAA6f,EAAAC,EAAArP,EAAA8Q,cACAyK,YAAA,EACAhsB,EAAAmS,mBAAAriB,KAAAoiB,kBACApiB,KAAAogB,UAAAlQ,EAAAlQ,MAIA,cAFA2gB,EAAA8Q,mBACA9Q,EAAAgW,UACAzmB,GAEA+rB,WAAA,SAAAtb,GACA,IAAA1hB,EACAf,EACA6vB,EAAApN,EAAAgW,UAAA3mB,QAAAhQ,OAEA,IAAAf,EAAA,EAAuBA,EAAA8uB,EAAA7uB,OAAiBD,IACxCf,EAAA6vB,EAAA9uB,GAAA88B,oBAAA3Q,EACA2C,EAAA9uB,GAAA88B,SAAA79B,MAAA6vB,EAAA9uB,GAAA88B,SACAhO,EAAA9uB,GAAAmD,MAAAC,QAAAnE,SAkBA,OATA8B,KAAA+7B,SAAA,IAAA3Q,EAAAprB,KAAAm8B,QAAApO,GAAApsB,IAAA,SAAAosB,GAEA,IADAA,IAAApsB,IAAA,SAAAy6B,GAAqD,OAAAA,EAAA1b,MAAA0b,EAAA,IAAA5Q,EAAA4Q,KACrDn9B,EAAA8uB,EAAA7uB,OAAA,EAAyCD,EAAA,EAAOA,IAChD8uB,EAAA/Z,OAAA/U,EAAA,MAAAusB,EAAA,QAEA,WAAA2N,GAAApL,MAEA/tB,KAAAogB,UAAApgB,KAAA+7B,SAAA/7B,MAEA,IAAA+vB,UAEAoM,QAAA,SAAA5U,GACA,OAAAA,EAAAroB,OACA,SAEA,OAAAqoB,EAAAroB,OACA,OAAAqoB,EAAA,GAKA,IAFA,IAAArX,KACAtP,EAAAZ,KAAAm8B,QAAA5U,EAAAlD,MAAA,IACAplB,EAAA,EAA+BA,EAAA2B,EAAA1B,OAAiBD,IAChD,QAAA0R,EAAA,EAAmCA,EAAA4W,EAAA,GAAAroB,OAAmByR,IACtDT,EAAAnP,MAAAwmB,EAAA,GAAA5W,IAAAX,OAAApP,EAAA3B,KAGA,OAAAiR,GAGA2hB,gBAAA,SAAA7B,GACAA,IAGAhwB,KAAAiwB,OAAA,IAAAF,EAAAzI,EAAA0I,IAAAhwB,KAAAiwB,MAAA,MACAjwB,KAAAogB,UAAApgB,KAAAiwB,MAAAjwB,UAgBA,IAAAq8B,GAAA,SAAAtO,EAAAgO,EAAAzzB,EAAA3I,EAAAulB,EAAA9C,GAOA,GANApiB,KAAAsI,UACAtI,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAA+tB,OACA/tB,KAAA+7B,WACA/7B,KAAA2rB,WAAA,OACAlpB,IAAAzC,KAAAsI,QAAAlD,MAAApF,KAAAsI,QAAA7J,OACAuB,KAAAs8B,KAAAt8B,KAAAsI,QAAAlD,MAAApF,KAAAsI,QAAA7J,WAEA,CACA,IAAA89B,EAAAv8B,KAAAw8B,UACAD,GAAA,0BAA+CvwB,KAAAuwB,KAC/Cv8B,KAAAs8B,KAAA,GAGAt8B,KAAAqiB,mBAAAD,GACApiB,KAAAogB,UAAApgB,KAAA+7B,SAAA/7B,MACAA,KAAAogB,UAAApgB,KAAA+tB,KAAA/tB,OAEAq8B,GAAA3yB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,SACA6a,OAAA,SAAAC,GACAlhB,KAAA+7B,WACA/7B,KAAA+7B,SAAA7a,EAAAC,MAAAnhB,KAAA+7B,WAEA/7B,KAAA+tB,KAAA7M,EAAAC,MAAAnhB,KAAA+tB,MACA/tB,KAAAsI,QAAAm0B,UAAAz8B,KAAAsI,QAAA7J,SAAAuB,KAAAgxB,OACAhxB,KAAAgxB,KAAA9P,EAAAC,MAAAnhB,KAAAgxB,QAGAnQ,OAAA,SAAAF,EAAAK,GACAhhB,KAAAs8B,UAAA75B,IAAAzC,KAAA+tB,KAAAvN,UAAAkc,YACA1b,EAAAF,IAAA,WAAA9gB,KAAAwgB,UAAAxgB,KAAAugB,QACAvgB,KAAA+tB,KAAAlN,OAAAF,EAAAK,GACAhhB,KAAA+7B,WACA/a,EAAAF,IAAA,KACA9gB,KAAA+7B,SAAAlb,OAAAF,EAAAK,IAEAA,EAAAF,IAAA,OAGA0b,QAAA,WACA,OAAAx8B,KAAA+tB,gBAAA2N,GACA17B,KAAA+tB,KAAA7vB,YAAA8B,KAAA+tB,KAAA7vB,OAEAy+B,iBAAA,WACA,IAAA5O,EAAA/tB,KAAA+tB,KAIA,OAHAA,aAAA2N,KACA3N,IAAA7vB,SAEA6vB,aAAAgN,KACAhN,EAAAqN,qBAIAwB,cAAA,SAAAjc,GACA,IAAAoN,EAAA/tB,KAAA+tB,KAIA,OAHAA,aAAA2N,KACA3N,IAAA7vB,OAEA,IAAAm+B,GAAAtO,EAAA3M,KAAAT,GAAA3gB,KAAA+7B,SAAA/7B,KAAAsI,QAAAtI,KAAAugB,OAAAvgB,KAAAwgB,UAAAxgB,KAAAoiB,mBAEAya,SAAA,SAAAlc,GACA,IAAAoN,EAAA/tB,KAAA+tB,KAAA3M,KAAAT,GACAT,EAAAlgB,KAAAwgB,UACA,KAAAuN,aAAA2N,IAAA,CAEA,IAAAa,EAAAxO,EAAA7vB,MACAgiB,GACAqc,GACA5b,EAAAiO,oBAAA2N,GACAxO,EAAA7vB,MAAAyiB,EAAAkO,YAAA0N,EAAArc,EAAA4O,UAGAf,EAAA7vB,MAAAyiB,EAAAqO,cAAAjB,EAAA7vB,OAGA,OAAA6vB,GAEA3M,KAAA,SAAAT,GACA,IAAAzQ,EAAAlQ,KAAA88B,OAAAnc,GAWA,OAVA3gB,KAAAsI,QAAAo0B,WAAA18B,KAAA8hB,sBACA5R,EAAAhR,QAAA,IAAAgR,EAAAhR,OACAgR,EAAA9L,QAAA,SAAA5E,GACAA,EAAAuiB,uBAIA7R,EAAA6R,sBAGA7R,GAEA4sB,OAAA,SAAAnc,GACA,IAAAmQ,EACAiM,EACAhB,EAAA/7B,KAAA+7B,UAAA/7B,KAAA+7B,SAAA3a,KAAAT,GACA,GAAA3gB,KAAAsI,QAAAm0B,SAAA,CACA,GAAAz8B,KAAAgxB,MAAAhxB,KAAAgxB,KAAA5P,KACA,IACAphB,KAAAgxB,KAAA5P,KAAAT,GAEA,MAAAxN,GAEA,MADAA,EAAA6V,QAAA,iCACA,IAAAH,EAAA1V,EAAAnT,KAAAgxB,KAAArG,QAAA3qB,KAAAgxB,KAAArc,UAOA,OAJAooB,EAAApc,EAAAuN,OAAA,IAAAvN,EAAAuN,OAAA,GAAAkB,mBACApvB,KAAAgxB,MAAAhxB,KAAAgxB,KAAA1c,WACAyoB,EAAAxN,YAAAvvB,KAAAgxB,KAAA1c,cAIA,GAAAtU,KAAAg9B,OACA,mBAAAh9B,KAAAg9B,OACAh9B,KAAAg9B,KAAAh9B,KAAAg9B,QAEAh9B,KAAAg9B,MACA,SAGA,GAAAh9B,KAAAsI,QAAA7J,OAAA,CACA,IAAAwqB,EAAA,IAAAuC,EAAAxrB,KAAAgxB,KAAA,GACArc,SAAA3U,KAAAi9B,iBACAP,UAAA18B,KAAA+tB,KAAAvN,WAAAxgB,KAAA+tB,KAAAvN,UAAAkc,YACiB,MACjB,OAAA18B,KAAA+7B,SAAA,IAAAD,IAAA7S,GAAAjpB,KAAA+7B,SAAA79B,QAAA+qB,GAEA,GAAAjpB,KAAAs8B,IAAA,CACA,IAAAY,EAAA,IAAAb,GAAAr8B,KAAA68B,SAAAlc,GAAAob,EAAA/7B,KAAAsI,QAAAtI,KAAAugB,QACA,IAAA2c,EAAAZ,KAAAt8B,KAAA6C,MACA,MAAA7C,KAAA6C,MAEA,OAAAq6B,EAEA,OAAAl9B,KAAAgxB,OACAF,EAAA,IAAAf,EAAA,KAAAzI,EAAAtnB,KAAAgxB,KAAAf,SACAoB,YAAA1Q,GACA3gB,KAAA+7B,SAAA,IAAAD,GAAAhL,EAAAb,MAAAjwB,KAAA+7B,SAAA79B,OAAA4yB,EAAAb,aAQA,IAAAkN,GAAA,aACAA,GAAAzzB,UAAA3L,OAAAglB,OAAA,IAAApD,GACAyd,mBAAA,SAAA52B,EAAAma,GACA,IAAAzQ,EACAmrB,EAAAr7B,KACAq9B,KACA,IAAA1c,EAAA2c,kBACA,MAAuBtU,QAAA,+DACvBrU,SAAA3U,KAAAkgB,WAAAvL,SACAhV,MAAAK,KAAAmgB,YAEA3Z,IAAAvG,QAAA,iBAA0D,SAAAyR,EAAAxQ,GAC1D,OAAAm6B,EAAAkC,MAAA,IAAAlD,GAAA,IAAAn5B,EAAAm6B,EAAAlb,WAAAkb,EAAAnb,YAAAkB,KAAAT,MAEA,IACAna,EAAA,IAAA8iB,SAAA,WAAA9iB,EAAA,KAEA,MAAA2M,GACA,MAAuB6V,QAAA,gCAAA7V,EAAA6V,QAAA,UAAAxiB,EAAA,IAAAmO,SAAA3U,KAAAkgB,WAAAvL,SACvBhV,MAAAK,KAAAmgB,YAEA,IAAAgS,EAAAxR,EAAAuN,OAAA,GAAAiE,YACA,QAAAhM,KAAAgM,EACAA,EAAA3gB,eAAA2U,KAEAkX,EAAAlX,EAAA9B,MAAA,KACAnmB,MAAAi0B,EAAAhM,GAAAjoB,MACAs/B,KAAA,WACA,OAAAx9B,KAAA9B,MAAAkjB,KAAAT,GAAAD,WAKA,IACAxQ,EAAA1J,EAAAsC,KAAAu0B,GAEA,MAAAlqB,GACA,MAAuB6V,QAAA,iCAAA7V,EAAAjS,KAAA,KAAAiS,EAAA6V,QAAA/oB,QAAA,gBAAA0U,SAAA3U,KAAAkgB,WAAAvL,SACvBhV,MAAAK,KAAAmgB,YAEA,OAAAjQ,GAEAqtB,MAAA,SAAAz+B,GACA,OAAAsD,MAAAC,QAAAvD,EAAAZ,QAAAY,EAAAZ,MAAAgB,OAAA,EACA,IAAAJ,EAAAZ,MAAAyD,IAAA,SAAAC,GAAyD,OAAAA,EAAA8e,UAAoBve,KAAA,UAG7ErD,EAAA4hB,WAKA,IAAA+c,GAAA,SAAAC,EAAAt8B,EAAAzB,EAAAulB,GACAllB,KAAAoB,UACApB,KAAAwG,WAAAk3B,EACA19B,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,GAEAuY,GAAA/zB,UAAA3L,OAAAglB,OAAA,IAAAoa,IACA/2B,KAAA,aACAgb,KAAA,SAAAT,GACA,IAAAzQ,EAAAlQ,KAAAo9B,mBAAAp9B,KAAAwG,WAAAma,GACAva,SAAA8J,EACA,iBAAA9J,GAAAlE,MAAAgO,GAGA,WAAA9J,EACA,IAAA20B,GAAA,IAAA7qB,EAAA,IAAAA,EAAAlQ,KAAAoB,QAAApB,KAAAugB,QAEAne,MAAAC,QAAA6N,GACA,IAAAsb,EAAAtb,EAAA/N,KAAA,OAGA,IAAAqpB,EAAAtb,GATA,IAAAioB,EAAAjoB,MAcA,IAAAytB,GAAA,SAAA97B,EAAA85B,GACA37B,KAAA6B,MACA7B,KAAA9B,MAAAy9B,GAEAgC,GAAAj0B,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,aACA6a,OAAA,SAAAC,GACAlhB,KAAA9B,MAAAgjB,EAAAC,MAAAnhB,KAAA9B,QAEAkjB,KAAA,SAAAT,GACA,OAAA3gB,KAAA9B,MAAAkjB,KACA,IAAAuc,GAAA39B,KAAA6B,IAAA7B,KAAA9B,MAAAkjB,KAAAT,IAEA3gB,MAEA6gB,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA9gB,KAAA6B,IAAA,KACA7B,KAAA9B,MAAA2iB,OACA7gB,KAAA9B,MAAA2iB,OAAAF,EAAAK,GAGAA,EAAAF,IAAA9gB,KAAA9B,UAKA,IAAA0/B,GAAA,SAAAtc,EAAA3U,EAAAsW,EAAAhkB,EAAA4+B,GACA79B,KAAAshB,KAAAuD,OACA7kB,KAAA89B,OAAAnxB,EACA3M,KAAA+9B,OAAA9a,EACAjjB,KAAAugB,OAAAthB,EACAe,KAAA69B,UAEAD,GAAAl0B,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,YACA6a,OAAA,SAAAC,GACAlhB,KAAA89B,OAAA5c,EAAAC,MAAAnhB,KAAA89B,QACA99B,KAAA+9B,OAAA7c,EAAAC,MAAAnhB,KAAA+9B,SAEA3c,KAAA,SAAAT,GACA,IAAAzQ,EAAA,SAAAoR,EAAAxc,EAAAyc,GACA,OAAAD,GACA,iBAAAxc,GAAAyc,EACA,gBAAAzc,GAAAyc,EACA,QACA,OAAA5B,EAAAiC,QAAA9c,EAAAyc,IACA,OACA,YAAAD,GAAA,OAAAA,GAAA,OAAAA,EACA,OACA,YAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,EACA,OACA,YAAAA,GAAA,OAAAA,EACA,QACA,WAbA,CAgBathB,KAAAshB,GAAAthB,KAAA89B,OAAA1c,KAAAT,GAAA3gB,KAAA+9B,OAAA3c,KAAAT,IACb,OAAA3gB,KAAA69B,QAAA3tB,OAIA,IAAA8tB,GAAA,SAAA9/B,GACA8B,KAAA9B,SAEA8/B,GAAAt0B,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,sBAGA,IAAA63B,GAAA,SAAAz+B,GACAQ,KAAA9B,MAAAsB,GAEAy+B,GAAAv0B,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,WACAya,OAAA,SAAAF,EAAAK,GACAA,EAAAF,IAAA,KACA9gB,KAAA9B,MAAA2iB,OAAAF,EAAAK,IAEAI,KAAA,SAAAT,GACA,OAAAA,EAAAgO,WACA,IAAAqK,EAAA,SAAAb,GAAA,GAAAn4B,KAAA9B,QAAAkjB,KAAAT,GAEA,IAAAsd,GAAAj+B,KAAA9B,MAAAkjB,KAAAT,OAIA,IAAAud,GAAA,SAAA1N,EAAA2N,EAAAx+B,EAAAulB,EAAA9C,GASA,OARApiB,KAAAwwB,WACAxwB,KAAAm+B,SACAn+B,KAAAo+B,UAAAF,GAAAG,UACAr+B,KAAAs+B,YAAAt+B,KAAAo+B,WACAp+B,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAAqiB,mBAAAD,GACApiB,KAAA2rB,WAAA,EACAwS,GACA,UACAn+B,KAAAu+B,aAAA,EACAv+B,KAAAw+B,YAAA,EACA,MACA,QACAx+B,KAAAu+B,aAAA,EACAv+B,KAAAw+B,YAAA,EAGAx+B,KAAAogB,UAAApgB,KAAAwwB,SAAAxwB,OAEAk+B,GAAAx0B,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,SACA6a,OAAA,SAAAC,GACAlhB,KAAAwwB,SAAAtP,EAAAC,MAAAnhB,KAAAwwB,WAEApP,KAAA,SAAAT,GACA,WAAAud,GAAAl+B,KAAAwwB,SAAApP,KAAAT,GAAA3gB,KAAAm+B,OAAAn+B,KAAAmgB,WAAAngB,KAAAkgB,WAAAlgB,KAAAoiB,mBAEA+C,MAAA,SAAAxE,GACA,WAAAud,GAAAl+B,KAAAwwB,SAAAxwB,KAAAm+B,OAAAn+B,KAAAmgB,WAAAngB,KAAAkgB,WAAAlgB,KAAAoiB,mBAGAqc,kBAAA,SAAAzO,GACA,IAAA/wB,EAAAy/B,EAAAC,KACA,IAAA1/B,EAAA,EAAuBA,EAAA+wB,EAAA9wB,OAAsBD,IAC7Cy/B,EAAA1O,EAAA/wB,GAAAqM,SAGArM,EAAA,GAAAy/B,EAAAx/B,QAAA,KAAAw/B,EAAA,GAAA1Z,WAAA9mB,QACAwgC,EAAA,GAAA1Z,WAAA9mB,MAAA,KAEAygC,IAAA3uB,OAAAggB,EAAA/wB,GAAAqM,UAEAtL,KAAA4+B,eAAA,IAAA7U,EAAA4U,IACA3+B,KAAA4+B,cAAA,GAAAvc,mBAAAriB,KAAAoiB,qBAGA8b,GAAAG,QAAA,EAEA,IAAAQ,GAAA,SAAA7S,EAAArsB,EAAAulB,GACAllB,KAAAgsB,WACAhsB,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAA2rB,WAAA,GAEAkT,GAAAn1B,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,eACAgb,KAAA,SAAAT,GACA,IAAAsP,EACA6O,EAAA,IAAAzE,GAAAr6B,KAAAgsB,SAAAhsB,KAAAmgB,WAAAngB,KAAAkgB,YAAAkB,KAAAT,GACA9d,EAAA,IAAAgmB,GAAuCG,QAAA,oCAAAhpB,KAAAgsB,WACvC,IAAA8S,EAAAhO,QAAA,CACA,GAAAgO,EAAA7O,MACAA,EAAA6O,OAEA,GAAA18B,MAAAC,QAAAy8B,GACA7O,EAAA,IAAAF,EAAA,GAAA+O,OAEA,KAAA18B,MAAAC,QAAAy8B,EAAA5gC,OAIA,MAAA2E,EAHAotB,EAAA,IAAAF,EAAA,GAAA+O,EAAA5gC,OAKA4gC,EAAA,IAAAjI,EAAA5G,GAEA,GAAA6O,EAAAhO,QACA,OAAAgO,EAAAhI,SAAAnW,GAEA,MAAA9d,KAIA,IAAAk8B,GAAA,SAAAC,EAAAC,EAAAt/B,EAAAugB,GACAlgB,KAAA9B,MAAA8gC,EACAh/B,KAAAi/B,UACAj/B,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAAN,GAEA6e,GAAAr1B,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,iBACAgb,KAAA,SAAAT,GACA,IAAA1hB,EAAAiC,EAAA+uB,EAAAjwB,KAAA9B,MAAAkjB,KAAAT,GACA,IAAA1hB,EAAA,EAAuBA,EAAAe,KAAAi/B,QAAA//B,OAAyBD,IAAA,CAUhD,GATAiC,EAAAlB,KAAAi/B,QAAAhgC,GAMAmD,MAAAC,QAAA4tB,KACAA,EAAA,IAAAF,GAAA,IAAAhG,GAAAkG,IAEA,KAAA/uB,EACA+uB,IAAA2C,uBAEA,SAAA1xB,EAAAgL,OAAA,IAOA,GANA,MAAAhL,EAAAgL,OAAA,KACAhL,EAAA,QAAAm5B,GAAAn5B,EAAA4oB,OAAA,IAAA1I,KAAAT,GAAAziB,OAEA+xB,EAAAkC,YACAlC,IAAAjE,SAAA9qB,KAEA+uB,EACA,MAA+B7pB,KAAA,OAAA4iB,QAAA,YAAA9nB,EAAA,aAAAyT,SAAA3U,KAAAkgB,WAAAvL,SAC/BhV,MAAAK,KAAAmgB,gBAGA,CAUA,GARAjf,EADA,OAAAA,EAAAV,UAAA,KACA,QAAA65B,GAAAn5B,EAAA4oB,OAAA,IAAA1I,KAAAT,GAAAziB,MAGA,MAAAgD,EAAAgL,OAAA,GAAAhL,EAAA,IAAAA,EAEA+uB,EAAAsC,aACAtC,IAAA0C,SAAAzxB,KAEA+uB,EACA,MAA+B7pB,KAAA,OAAA4iB,QAAA,aAAA9nB,EAAA4oB,OAAA,iBAAAnV,SAAA3U,KAAAkgB,WAAAvL,SAC/BhV,MAAAK,KAAAmgB,YAIA8P,MAAA/wB,OAAA,GAEA+wB,EAAA/xB,QACA+xB,IAAA7O,KAAAT,GAAAziB,OAEA+xB,EAAAa,UACAb,IAAAa,QAAA1P,KAAAT,IAGA,OAAAsP,KAIA,IAAAiP,GAAA,SAAAh+B,EAAAi+B,EAAAlP,EAAAhG,EAAAmV,EAAAlR,EAAA9L,GACApiB,KAAAkB,QAAA,kBACAlB,KAAAgwB,WAAA,IAAAjG,GAAA,IAAAhF,EAAA,KAAA7jB,GAAA,EAAAlB,KAAAugB,OAAAvgB,KAAAwgB,cACAxgB,KAAAm/B,SACAn/B,KAAAiqB,YACAjqB,KAAAo/B,WACAp/B,KAAAq/B,MAAAF,EAAAjgC,OACAc,KAAAiwB,QACAjwB,KAAAmwB,YACA,IAAAmP,KACAt/B,KAAAu/B,SAAAJ,EAAA19B,OAAA,SAAAy2B,EAAAsH,GACA,OAAAA,EAAAt+B,MAAAs+B,EAAAt+B,OAAAs+B,EAAAthC,MACAg6B,EAAA,GAGAoH,EAAAv+B,KAAAy+B,EAAAt+B,MACAg3B,IAES,GACTl4B,KAAAs/B,qBACAt/B,KAAAkuB,SACAluB,KAAAqiB,mBAAAD,GACApiB,KAAA2rB,WAAA,GAEAuT,GAAAx1B,UAAA3L,OAAAglB,OAAA,IAAAgN,GACA3pB,KAAA,kBACAmrB,WAAA,EACAtQ,OAAA,SAAAC,GACAlhB,KAAAm/B,QAAAn/B,KAAAm/B,OAAAjgC,SACAc,KAAAm/B,OAAAje,EAAAkJ,WAAApqB,KAAAm/B,SAEAn/B,KAAAiwB,MAAA/O,EAAAkJ,WAAApqB,KAAAiwB,OACAjwB,KAAAiqB,YACAjqB,KAAAiqB,UAAA/I,EAAAC,MAAAnhB,KAAAiqB,aAGAwV,WAAA,SAAA9e,EAAA+e,EAAAlc,EAAAmc,GAEA,IACAC,EACAC,EAEA5gC,EACA0R,EACAgrB,EACAz6B,EACA4+B,EACAC,EATAnxB,EAAA,IAAAmhB,EAAA,WAGAoP,EAAA7X,EAAAtnB,KAAAm/B,QAOAa,EAAA,EAKA,GAJAN,EAAAxR,QAAAwR,EAAAxR,OAAA,IAAAwR,EAAAxR,OAAA,GAAAkB,mBACAxgB,EAAAwgB,iBAAAsQ,EAAAxR,OAAA,GAAAkB,iBAAAO,WAEA+P,EAAA,IAAArS,EAAAY,KAAAyR,GAAA9wB,GAAAoB,OAAA0vB,EAAAxR,SACA1K,EAGA,IADAwc,GADAxc,EAAA8D,EAAA9D,IACAtkB,OACAD,EAAA,EAA2BA,EAAA+gC,EAAgB/gC,IAE3C,GAAAiC,GADA2+B,EAAArc,EAAAvkB,KACA4gC,EAAA3+B,KAAA,CAEA,IADA4+B,GAAA,EACAnvB,EAAA,EAAmCA,EAAAwuB,EAAAjgC,OAAmByR,IACtD,IAAAgvB,EAAAhvB,IAAAzP,IAAAi+B,EAAAxuB,GAAAzP,KAAA,CACAy+B,EAAAhvB,GAAAkvB,EAAA3hC,MAAAkjB,KAAAT,GACA/R,EAAAskB,YAAA,IAAApH,EAAA5qB,EAAA2+B,EAAA3hC,MAAAkjB,KAAAT,KACAmf,GAAA,EACA,MAGA,GAAAA,EAAA,CACAtc,EAAAxP,OAAA/U,EAAA,GACAA,IACA,SAGA,MAAmCmH,KAAA,UAAA4iB,QAAA,sBAAAhpB,KAAAkB,KAAA,IAAAsiB,EAAAvkB,GAAAiC,KAAA,cAMnC,IADA6+B,EAAA,EACA9gC,EAAA,EAAuBA,EAAAkgC,EAAAjgC,OAAmBD,IAC1C,IAAA0gC,EAAA1gC,GAAA,CAIA,GADA4gC,EAAArc,KAAAuc,GACA7+B,EAAAi+B,EAAAlgC,GAAAiC,KACA,GAAAi+B,EAAAlgC,GAAAmgC,SAAA,CAEA,IADAQ,KACAjvB,EAAAovB,EAA0CpvB,EAAAqvB,EAAgBrvB,IAC1DivB,EAAA7+B,KAAAyiB,EAAA7S,GAAAzS,MAAAkjB,KAAAT,IAEA/R,EAAAskB,YAAA,IAAApH,EAAA5qB,EAAA,IAAAi4B,GAAAyG,GAAAxe,KAAAT,SAEA,CAEA,GADAgb,EAAAkE,KAAA3hC,MAIAy9B,EADAv5B,MAAAC,QAAAs5B,GACA,IAAA9E,EAAA,IAAA9G,EAAA,GAAA4L,IAGAA,EAAAva,KAAAT,OAGA,KAAAwe,EAAAlgC,GAAAf,MAKA,MAAmCkI,KAAA,UAAA4iB,QAAA,iCAAAhpB,KAAAkB,KAAA,KAAA8+B,EAAA,QAAAhgC,KAAAq/B,MAAA,KAJnC1D,EAAAwD,EAAAlgC,GAAAf,MAAAkjB,KAAAse,GACA9wB,EAAAgjB,aAKAhjB,EAAAskB,YAAA,IAAApH,EAAA5qB,EAAAy6B,IACAgE,EAAA1gC,GAAA08B,EAGA,GAAAwD,EAAAlgC,GAAAmgC,UAAA5b,EACA,IAAA7S,EAAAovB,EAAsCpvB,EAAAqvB,EAAgBrvB,IACtDgvB,EAAAhvB,GAAA6S,EAAA7S,GAAAzS,MAAAkjB,KAAAT,GAGAof,IAEA,OAAAnxB,GAEA4d,cAAA,WACA,IAAAyD,EAAAjwB,KAAAiwB,MAAAjwB,KAAAiwB,MAAAtuB,IAAA,SAAAshB,GACA,OAAAA,EAAAuJ,cACAvJ,EAAAuJ,eAAA,GAGAvJ,IALAjjB,KAAAiwB,MASA,OADA,IAAAiP,GAAAl/B,KAAAkB,KAAAlB,KAAAm/B,OAAAlP,EAAAjwB,KAAAiqB,UAAAjqB,KAAAo/B,SAAAp/B,KAAAkuB,SAGA9M,KAAA,SAAAT,GACA,WAAAue,GAAAl/B,KAAAkB,KAAAlB,KAAAm/B,OAAAn/B,KAAAiwB,MAAAjwB,KAAAiqB,UAAAjqB,KAAAo/B,SAAAp/B,KAAAkuB,QAAA5G,EAAA3G,EAAAuN,UAEA+R,SAAA,SAAAtf,EAAA6C,EAAAuI,GACA,IAGAkE,EACAa,EAJAoP,KACAC,EAAAngC,KAAAkuB,OAAAluB,KAAAkuB,OAAAle,OAAA2Q,EAAAuN,QAAAvN,EAAAuN,OACAtf,EAAA5O,KAAAy/B,WAAA9e,EAAA,IAAA0M,EAAAY,KAAAtN,EAAAwf,GAAA3c,EAAA0c,GAWA,OARAtxB,EAAAskB,YAAA,IAAApH,EAAA,iBAAAqN,GAAA+G,GAAA9e,KAAAT,KACAsP,EAAA3I,EAAAtnB,KAAAiwB,QACAa,EAAA,IAAAf,EAAA,KAAAE,IACAc,gBAAA/wB,KACA8wB,IAAA1P,KAAA,IAAAiM,EAAAY,KAAAtN,GAAA3gB,KAAA4O,GAAAoB,OAAAmwB,KACApU,IACA+E,IAAAtE,iBAEAsE,GAEAkB,eAAA,SAAAxO,EAAA7C,GACA,QAAA3gB,KAAAiqB,YAAAjqB,KAAAiqB,UAAA7I,KAAA,IAAAiM,EAAAY,KAAAtN,GAAA3gB,KAAAy/B,WAAA9e,EAAA,IAAA0M,EAAAY,KAAAtN,EAAA3gB,KAAAkuB,OAAAluB,KAAAkuB,OAAAle,OAAA2Q,EAAAuN,QAAAvN,EAAAuN,QAAA1K,OACAxT,OAAAhQ,KAAAkuB,YACAle,OAAA2Q,EAAAuN,YAKA6D,UAAA,SAAAvO,EAAA7C,GACA,IACAvd,EADAg9B,EAAA5c,KAAAtkB,QAAA,EAEAogC,EAAAt/B,KAAAs/B,mBACAe,EAAA7c,IAAA/hB,OAAA,SAAAy2B,EAAAsH,GACA,OAAAF,EAAAh/B,QAAAk/B,EAAAt+B,MAAA,EACAg3B,EAAA,EAGAA,GAEa,GAPb,EAQA,GAAAl4B,KAAAo/B,UASA,GAAAiB,EAAArgC,KAAAu/B,SAAA,EACA,aAVA,CACA,GAAAc,EAAArgC,KAAAu/B,SACA,SAEA,GAAAa,EAAApgC,KAAAm/B,OAAAjgC,OACA,SASAkE,EAAAkc,KAAAsD,IAAAyd,EAAArgC,KAAAq/B,OACA,QAAApgC,EAAA,EAA2BA,EAAAmE,EAASnE,IACpC,IAAAe,KAAAm/B,OAAAlgC,GAAAiC,OAAAlB,KAAAm/B,OAAAlgC,GAAAmgC,UACA5b,EAAAvkB,GAAAf,MAAAkjB,KAAAT,GAAAD,SAAA1gB,KAAAm/B,OAAAlgC,GAAAf,MAAAkjB,KAAAT,GAAAD,QACA,SAIA,YAIA,IAAA4f,GAAA,SAAAh1B,EAAAkY,EAAA7jB,EAAAulB,EAAA6G,GACA/rB,KAAAwwB,SAAA,IAAAzG,EAAAze,GACAtL,KAAAmB,UAAAqiB,MACAxjB,KAAAugB,OAAA5gB,EACAK,KAAAwgB,UAAA0E,EACAllB,KAAA+rB,YACA/rB,KAAA2rB,WAAA,EACA3rB,KAAAogB,UAAApgB,KAAAwwB,SAAAxwB,OAEAsgC,GAAA52B,UAAA3L,OAAAglB,OAAA,IAAApD,GACAvZ,KAAA,YACA6a,OAAA,SAAAC,GACAlhB,KAAAwwB,WACAxwB,KAAAwwB,SAAAtP,EAAAC,MAAAnhB,KAAAwwB,WAEAxwB,KAAAmB,UAAAjC,SACAc,KAAAmB,UAAA+f,EAAAkJ,WAAApqB,KAAAmB,aAGAigB,KAAA,SAAAT,GACA,IAAA4f,EACAC,EACAC,EAEAZ,EACAa,EAGAzhC,EACAyf,EACAiiB,EACAC,EACAC,EAEAC,EAEAC,EAKA7I,EACAnH,EACAiQ,EApBAxd,KAGAyM,KACApwB,GAAA,EAMAohC,KAEAC,KAEAC,GAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAKA,SAAAC,EAAAf,EAAAC,GACA,IAAAE,EAAAnB,EAAAgC,EACA,IAAAb,EAAA,EAA2BA,EAAA,EAAOA,IAAA,CAGlC,IAFAO,EAAAP,IAAA,EACA/Q,EAAA1xB,MAAAyiC,GACAnB,EAAA,EAA+BA,EAAAiB,EAAAvhC,QAAAgiC,EAAAP,GAA4CnB,KAC3EgC,EAAAf,EAAAjB,IACAxN,iBACAkP,EAAAP,GAAAO,EAAAP,IAAAa,EAAAxP,eAAA,KAAArR,IAGA6f,EAAAxO,iBACAkP,EAAAP,GAAAO,EAAAP,IAAAH,EAAAxO,eAAAxO,EAAA7C,IAGA,OAAAugB,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GACAG,EAAAC,EAEAF,EAEAD,EAEA,IAzBAnhC,KAAAwwB,SAAAxwB,KAAAwwB,SAAApP,KAAAT,GAyBA1hB,EAAA,EAAuBA,EAAAe,KAAAmB,UAAAjC,OAA2BD,IAGlD,GADAyhC,GADAb,EAAA7/B,KAAAmB,UAAAlC,IACAf,MAAAkjB,KAAAT,GACAkf,EAAA4B,QAAAr/B,MAAAC,QAAAq+B,EAAAxiC,OAEA,IADAwiC,IAAAxiC,MACAwgB,EAAA,EAA+BA,EAAAgiB,EAAAxhC,OAAqBwf,IACpD8E,EAAAziB,MAAmC7C,MAAAwiC,EAAAhiB,UAInC8E,EAAAziB,MAA+BG,KAAA2+B,EAAA3+B,KAAAhD,MAAAwiC,IAI/B,IADAM,EAAA,SAAApQ,GAAiD,OAAAA,EAAAmB,UAAA,KAAApR,IACjD1hB,EAAA,EAAuBA,EAAA0hB,EAAAuN,OAAAhvB,OAA2BD,IAClD,IAAAshC,EAAA5f,EAAAuN,OAAAjvB,GAAAk0B,KAAAnzB,KAAAwwB,SAAA,KAAAwQ,IAAA9hC,OAAA,GAMA,IALA2hC,GAAA,EAKAniB,EAAA,EAA+BA,EAAA6hB,EAAArhC,OAAmBwf,IAAA,CAIlD,IAHA8hB,EAAAD,EAAA7hB,GAAAkS,KACA6P,EAAAF,EAAA7hB,GAAAqP,KACA6S,GAAA,EACAD,EAAA,EAAmCA,EAAAhgB,EAAAuN,OAAAhvB,OAA2ByhC,IAC9D,KAAAH,aAAAtB,KAAAsB,KAAA7f,EAAAuN,OAAAyS,GAAA5P,iBAAApQ,EAAAuN,OAAAyS,IAAA,CACAC,GAAA,EACA,MAGAA,GAGAJ,EAAAzO,UAAAvO,EAAA7C,MACAmgB,GAAyCN,QAAA5I,MAAA2J,EAAAf,EAAAC,KACzC7I,QAAAuJ,GACAF,EAAAlgC,KAAA+/B,GAEAjhC,GAAA,GAKA,IAFA+vB,EAAAjnB,QACAuvB,GAAA,OACAxZ,EAAA,EAA+BA,EAAAuiB,EAAA/hC,OAAuBwf,IACtDwZ,EAAA+I,EAAAviB,GAAAkZ,SAEA,GAAAM,EAAAkJ,GAAA,EACAL,EAAAO,OAIA,GADAP,EAAAM,EACAnJ,EAAAmJ,GAAAnJ,EAAAoJ,GAAA,EACA,MAAmCl7B,KAAA,UAAA4iB,QAAA,yDAAAhpB,KAAA0hC,OAAAle,GAAA,IAAA7jB,MAAAK,KAAAmgB,WAAAxL,SAAA3U,KAAAkgB,WAAAvL,UAGnC,IAAA+J,EAAA,EAA+BA,EAAAuiB,EAAA/hC,OAAuBwf,IAEtD,IADAoiB,EAAAG,EAAAviB,GAAAkZ,SACAwJ,GAAAN,IAAAC,EACA,KACAP,EAAAS,EAAAviB,GAAA8hB,iBACAtB,KACAnO,EAAAyP,EAAAzP,iBAAAyP,GACAA,EAAA,IAAAtB,GAAA,MAAAsB,EAAAvQ,MAAA,aAAAc,EAAA3O,mBACA2O,mBAEA,IAAA4Q,EAAAnB,EAAAP,SAAAtf,EAAA6C,EAAAxjB,KAAA+rB,WAAAkE,MACAjwB,KAAA4hC,4BAAAD,GACAv/B,MAAAsH,UAAA3I,KAAA4wB,MAAA1B,EAAA0R,GAEA,MAAAxuB,GACA,MAAuC6V,QAAA7V,EAAA6V,QAAArpB,MAAAK,KAAAmgB,WAAAxL,SAAA3U,KAAAkgB,WAAAvL,SAAA7U,MAAAqT,EAAArT,OAIvC,GAAAD,EACA,OAAAowB,EAIA,MAAA4Q,GACuBz6B,KAAA,UAAA4iB,QAAA,yCAAAhpB,KAAA0hC,OAAAle,GAAA,IAAA7jB,MAAAK,KAAAmgB,WAAAxL,SAAA3U,KAAAkgB,WAAAvL,WAGAvO,KAAA,OAAA4iB,QAAAhpB,KAAAwwB,SAAA9P,QAAAmE,OAAA,gBAAAllB,MAAAK,KAAAmgB,WAAAxL,SAAA3U,KAAAkgB,WAAAvL,WAGvBitB,4BAAA,SAAAC,GACA,IAAA5iC,EACA,GAAAe,KAAA8hB,mBACA,IAAA7iB,EAAA,EAA2BA,EAAA4iC,EAAA3iC,OAAwBD,IACnD4iC,EAAA5iC,GACA8iB,sBAIA2f,OAAA,SAAAle,GACA,OAAAxjB,KAAAwwB,SAAA9P,QAAAmE,OAAA,KAAArB,IAAA7hB,IAAA,SAAAmD,GACA,IAAA47B,EAAA,GAUA,OATA57B,EAAA5D,OACAw/B,GAAA57B,EAAA5D,KAAA,KAEA4D,EAAA5G,MAAAwiB,MACAggB,GAAA57B,EAAA5G,MAAAwiB,QAGAggB,GAAA,MAEAA,IACav+B,KAAA,iBAIb,IAAA2/B,IACAniB,OAAA2C,QAAAgU,SAAAO,kBAAAmC,YACAb,YAAApB,OAAA1L,UAAAgP,YAAAG,YACAzK,UAAAhL,UAAA+V,aAAAnW,aAAAoF,WACAgR,UAAA5B,cAAArN,cAAAkO,QAAA0B,OAAAW,UACAp0B,UAAAujB,YAAAJ,QAAAqS,cAAAE,cACAC,aAAAtZ,QAAAwX,SAAAkC,qBAAAC,YACAC,UAAAW,gBAAAE,kBACAyB,OACAxG,KAAAsG,GACApB,gBAIA6C,GAAA,WACA,SAAAA,KAmHA,OAjHAA,EAAAr4B,UAAA8yB,QAAA,SAAA7nB,GACA,IAAAhE,EAAAgE,EAAAqtB,YAAA,KAQA,OAPArxB,EAAA,IACAgE,IAAA0P,MAAA,EAAA1T,KAEAA,EAAAgE,EAAAqtB,YAAA,MACA,IACArxB,EAAAgE,EAAAqtB,YAAA,OAEArxB,EAAA,EACA,GAEAgE,EAAA0P,MAAA,EAAA1T,EAAA,IAEAoxB,EAAAr4B,UAAAu4B,mBAAA,SAAAlU,EAAAmU,GACA,+BAAqCl2B,KAAA+hB,OAAAmU,GAErCH,EAAAr4B,UAAAy4B,uBAAA,SAAApU,GACA,OAAA/tB,KAAAiiC,mBAAAlU,EAAA,UAEAgU,EAAAr4B,UAAA04B,aAAA,WACA,UAEAL,EAAAr4B,UAAA24B,wBAAA,WACA,UAEAN,EAAAr4B,UAAA44B,eAAA,SAAA3tB,GACA,+BAAA3I,KAAA2I,IAGAotB,EAAAr4B,UAAAvH,KAAA,SAAAogC,EAAAC,GACA,OAAAD,EAGAA,EAAAC,EAFAA,GAIAT,EAAAr4B,UAAA+4B,SAAA,SAAAC,EAAAC,GAEA,IAEA1jC,EACA0jB,EACAigB,EACAC,EALAC,EAAA9iC,KAAA+iC,gBAAAL,GACAM,EAAAhjC,KAAA+iC,gBAAAJ,GAKAM,EAAA,GACA,GAAAH,EAAAI,WAAAF,EAAAE,SACA,SAGA,IADAvgB,EAAArD,KAAAqD,IAAAqgB,EAAAG,YAAAjkC,OAAA4jC,EAAAK,YAAAjkC,QACAD,EAAA,EAAuBA,EAAA0jB,GACvBqgB,EAAAG,YAAAlkC,KAAA6jC,EAAAK,YAAAlkC,GADgCA,KAOhC,IAFA4jC,EAAAG,EAAAG,YAAA9e,MAAAplB,GACA2jC,EAAAE,EAAAK,YAAA9e,MAAAplB,GACAA,EAAA,EAAuBA,EAAA4jC,EAAA3jC,OAAA,EAAmCD,IAC1DgkC,GAAA,MAEA,IAAAhkC,EAAA,EAAuBA,EAAA2jC,EAAA1jC,OAAA,EAA+BD,IACtDgkC,GAAAL,EAAA3jC,GAAA,IAEA,OAAAgkC,GAGAlB,EAAAr4B,UAAAq5B,gBAAA,SAAAL,EAAAC,GAMA,IAKA1jC,EACA+jC,EANAI,EAAA,kGACAN,EAAAJ,EAAA7iC,MAAAujC,GACAC,KACAC,KACAH,KAGA,IAAAL,EACA,UAAA94B,MAAA,iCAAA04B,EAAA,KAGA,GAAAC,KAAAG,EAAA,IAAAA,EAAA,KAEA,KADAE,EAAAL,EAAA9iC,MAAAujC,IAEA,UAAAp5B,MAAA,+BAAA24B,EAAA,KAEAG,EAAA,GAAAA,EAAA,IAAAE,EAAA,OACAF,EAAA,KACAA,EAAA,GAAAE,EAAA,GAAAF,EAAA,IAGA,GAAAA,EAAA,GAGA,IAFAQ,EAAAR,EAAA,GAAA7iC,QAAA,WAAAjB,MAAA,KAEAC,EAAA,EAA2BA,EAAAqkC,EAAApkC,OAA2BD,IACtD,OAAAqkC,EAAArkC,GACAkkC,EAAA/2B,MAEA,MAAAk3B,EAAArkC,IACAkkC,EAAApiC,KAAAuiC,EAAArkC,IAWA,OAPAokC,EAAAH,SAAAJ,EAAA,GACAO,EAAAF,cACAE,EAAAE,SAAAT,EAAA,QAAAQ,EAAAnhC,KAAA,KACAkhC,EAAAtV,MAAA+U,EAAA,QAAAK,EAAAhhC,KAAA,KACAkhC,EAAA1uB,SAAAmuB,EAAA,GACAO,EAAAG,QAAAH,EAAAtV,MAAA+U,EAAA,QACAO,EAAAX,IAAAW,EAAAG,SAAAV,EAAA,QACAO,GAEAtB,EApHA,GAuHA0B,GAAA,WACA,SAAAA,IAEAzjC,KAAA0jC,QAAA,WACA,aAqJA,OAlJAD,EAAA/5B,UAAAi6B,WAAA,SAAA1a,EAAAtI,EAAAgK,EAAAiZ,EAAA1jB,GACA,IAAA6c,EAAA8G,EAAAC,EAAA/uB,EAAAJ,EAAAzE,EACA6E,EAAA4L,EAAA5L,cACAmL,IAEAvL,EADA,iBAAAuL,EACAA,EAGAA,EAAAvL,UAGA,IAAAovB,GAAA,IAAA/jC,KAAAoF,KAAA4+B,aAAAjB,gBAAApuB,YACA,GAAAA,IACAkvB,EAAA9uB,EAAAkL,IAAAtL,IACA,CAEA,GADAzE,EAAAlQ,KAAAikC,cAAAJ,EAAAlvB,EAAAovB,EAAAH,GAEA,OAAA1zB,EAEA,IACA2zB,EAAAK,KACAL,EAAAK,IAAAp7B,KAAA9I,KAAA2gB,QAAAkjB,GAGA,MAAA1wB,GAEA,OADAA,EAAA6V,QAAA7V,EAAA6V,SAAA,4BACA,IAAAH,EAAA1V,EAAAwX,EAAAhW,GAEA,OAAAkvB,EAGAC,GACA7lC,WACA8W,gBACAmL,YAEA6c,EAAA3N,EAAA1F,SAIA,IACA,IAAAJ,SAAA,yEAAAL,EACAkb,CAAAL,EAAA9jC,KAAA0jC,QAAA/uB,GALA,SAAA7V,GACA+kC,EAAA/kC,GAIAi+B,EAAA/8B,KAAAoF,KAAA08B,KAAA9hC,KAAAoF,KAAA8a,GAEA,MAAA/M,GACA,WAAA0V,EAAA1V,EAAAwX,EAAAhW,GAMA,GAJAkvB,IACAA,EAAAC,EAAA7lC,UAEA4lC,EAAA7jC,KAAAokC,eAAAP,EAAAlvB,EAAAovB,cACAlb,EACA,OAAAgb,EAEA,IAAAA,EA8BA,WAAAhb,GAAsCG,QAAA,sBAAgC2B,EAAAhW,GA1BtE,GAHAkvB,EAAAlZ,UACAkZ,EAAAlvB,aAEAkvB,EAAAQ,YAAArkC,KAAAskC,eAAA,QAAAT,EAAAQ,YAAA,KACAn0B,EAAAlQ,KAAAikC,cAAAJ,EAAAlvB,EAAAovB,EAAAH,IAEA,OAAA1zB,EAQA,GAJA6E,EAAAwvB,UAAAV,EAAA3jB,EAAAvL,SAAAooB,GACA8G,EAAAvvB,UAAAyoB,EAAArN,oBAEAxf,EAAAlQ,KAAAikC,cAAAJ,EAAAlvB,EAAAovB,EAAAH,GAEA,OAAA1zB,EAGA,IACA2zB,EAAAK,KACAL,EAAAK,IAAAp7B,KAAA9I,KAAA2gB,QAAAkjB,GAGA,MAAA1wB,GAEA,OADAA,EAAA6V,QAAA7V,EAAA6V,SAAA,4BACA,IAAAH,EAAA1V,EAAAwX,EAAAhW,GAMA,OAAAkvB,GAEAJ,EAAA/5B,UAAAu6B,cAAA,SAAAO,EAAA7vB,EAAAzT,EAAAoH,GACA,GAAAA,IAAAk8B,EAAAC,WACA,WAAA5b,GACAG,QAAA,6CAAA9nB,EAAA,mCAGA,IACAsjC,EAAAC,YAAAD,EAAAC,WAAAn8B,GAEA,MAAA6K,GACA,WAAA0V,EAAA1V,KAGAswB,EAAA/5B,UAAA06B,eAAA,SAAAI,EAAA7vB,EAAAzT,GACA,OAAAsjC,GAGA,mBAAAA,IACAA,EAAA,IAAAA,GAEAA,EAAAH,YACArkC,KAAAskC,eAAAE,EAAAH,WAAArkC,KAAAoF,KAAAs/B,SAAA,EACA,IAAA7b,GACAG,QAAA,UAAA9nB,EAAA,qBAAAlB,KAAA2kC,gBAAAH,EAAAH,cAIAG,GAEA,MAEAf,EAAA/5B,UAAA46B,eAAA,SAAAM,EAAAC,GACA,iBAAAD,IACAA,IAAA/kC,MAAA,6BACA8C,QAEA,QAAA1D,EAAA,EAA2BA,EAAA2lC,EAAA1lC,OAAqBD,IAChD,GAAA2lC,EAAA3lC,KAAA4lC,EAAA5lC,GACA,OAAAgD,SAAA2iC,EAAA3lC,IAAAgD,SAAA4iC,EAAA5lC,KAAA,IAGA,UAEAwkC,EAAA/5B,UAAAi7B,gBAAA,SAAAD,GAEA,IADA,IAAAI,EAAA,GACA7lC,EAAA,EAA2BA,EAAAylC,EAAAxlC,OAAoBD,IAC/C6lC,MAAA,QAAAJ,EAAAzlC,GAEA,OAAA6lC,GAEArB,EAAA/5B,UAAAq7B,WAAA,SAAAC,GACA,QAAA/lC,EAAA,EAA2BA,EAAA+lC,EAAA9lC,OAAoBD,IAAA,CAC/C,IAAAulC,EAAAQ,EAAA/lC,GACAulC,EAAAO,YACAP,EAAAO,eAIAtB,EAzJA,GA4JAwB,IAAsBC,aAAA,GACtBC,IAAA,EACA,SAAAC,GAAA5lC,GACA,OAAAA,EAuBA,IAAA6lC,GAAA,WACA,SAAAA,EAAAC,GACAtlC,KAAAulC,gBAAAD,EACAtlC,KAAAwlC,iBACAxlC,KAAAylC,kBACAN,MA1BA,SAAAO,EAAAljC,EAAAmjC,GAEA,IAAA9jC,EAAApC,EACA,IAAAoC,KAAAW,EAGA,cADA/C,EAAA+C,EAAAX,KAEA,eAGApC,EAAAiK,WAAAjK,EAAAiK,UAAAtD,OACA3G,EAAAiK,UAAAk8B,UAAAD,KAEA,MACA,aACAA,EAAAD,EAAAjmC,EAAAkmC,GAIA,OAAAA,EAQAD,CAAA5D,GAAA,GACAqD,IAAA,GA6GA,OA1GAE,EAAA37B,UAAAyX,MAAA,SAAA3hB,GACA,IAAAA,EACA,OAAAA,EAEA,IAAAqmC,EAAArmC,EAAAomC,UACA,IAAAC,EAKA,OAHArmC,EAAAtB,OAAAsB,EAAAtB,MAAA0nC,WACA5lC,KAAAmhB,MAAA3hB,EAAAtB,OAEAsB,EAEA,IAIAsmC,EAJAC,EAAA/lC,KAAAulC,gBACAlc,EAAArpB,KAAAwlC,cAAAK,GACAG,EAAAhmC,KAAAylC,eAAAI,GACAI,EAAAhB,GAUA,GARAgB,EAAAf,aAAA,EACA7b,IAEAA,EAAA0c,EADAD,EAAA,QAAAtmC,EAAA4G,OACAg/B,GACAY,EAAAD,EAAAD,EAAA,QAAAV,GACAplC,KAAAwlC,cAAAK,GAAAxc,EACArpB,KAAAylC,eAAAI,GAAAG,GAEA3c,IAAA+b,GAAA,CACA,IAAAc,EAAA7c,EAAAvgB,KAAAi9B,EAAAvmC,EAAAymC,GACAzmC,GAAAumC,EAAAI,cACA3mC,EAAA0mC,GAGA,GAAAD,EAAAf,aAAA1lC,EACA,GAAAA,EAAAN,OACA,QAAAD,EAAA,EAAAmnC,EAAA5mC,EAAAN,OAAsDD,EAAAmnC,EAASnnC,IAC/DO,EAAAP,GAAAgiB,QACAzhB,EAAAP,GAAAgiB,OAAAjhB,WAIAR,EAAAyhB,QACAzhB,EAAAyhB,OAAAjhB,MAMA,OAHAgmC,GAAAZ,IACAY,EAAAl9B,KAAAi9B,EAAAvmC,GAEAA,GAEA6lC,EAAA37B,UAAA0gB,WAAA,SAAA/J,EAAAgmB,GACA,IAAAhmB,EACA,OAAAA,EAEA,IACAphB,EADAmnC,EAAA/lB,EAAAnhB,OAGA,GAAAmnC,IAAArmC,KAAAulC,gBAAAY,YAAA,CACA,IAAAlnC,EAAA,EAA2BA,EAAAmnC,EAASnnC,IACpCe,KAAAmhB,MAAAd,EAAAphB,IAEA,OAAAohB,EAGA,IAAAimB,KACA,IAAArnC,EAAA,EAAuBA,EAAAmnC,EAASnnC,IAAA,CAChC,IAAAsnC,EAAAvmC,KAAAmhB,MAAAd,EAAAphB,SACAwD,IAAA8jC,IAGAA,EAAAvyB,OAGAuyB,EAAArnC,QACAc,KAAAwmC,QAAAD,EAAAD,GAHAA,EAAAvlC,KAAAwlC,IAMA,OAAAD,GAEAjB,EAAA37B,UAAA88B,QAAA,SAAAjf,EAAA+e,GAIA,IAAAF,EAAAnnC,EAAAoF,EAAAoiC,EAAA91B,EAAA+1B,EACA,IAJAJ,IACAA,MAGArnC,EAAA,EAAAmnC,EAAA7e,EAAAroB,OAAyCD,EAAAmnC,EAASnnC,IAElD,QAAAwD,KADA4B,EAAAkjB,EAAAtoB,IAIA,GAAAoF,EAAA2P,OAIA,IAAArD,EAAA,EAAA81B,EAAApiC,EAAAnF,OAAoDyR,EAAA81B,EAAe91B,SAEnElO,KADAikC,EAAAriC,EAAAsM,MAIA+1B,EAAA1yB,OAGA0yB,EAAAxnC,QACAc,KAAAwmC,QAAAE,EAAAJ,GAHAA,EAAAvlC,KAAA2lC,SATAJ,EAAAvlC,KAAAsD,GAgBA,OAAAiiC,GAEAjB,EApHA,GAuHAsB,GAAA,WACA,SAAAA,EAAAC,GACA5mC,KAAA2qB,WACA3qB,KAAA6mC,mBACA7mC,KAAA8mC,kBAAAF,EACA5mC,KAAA+mC,cAAA,EA6CA,OA3CAJ,EAAAj9B,UAAAs9B,UAAA,SAAA1gC,GACA,IAAA2gC,EAAAjnC,KAAAknC,GACA5gC,WACAkd,KAAA,KACA2jB,SAAA,GAGA,OADAnnC,KAAA2qB,QAAA5pB,KAAAmmC,GACA,WACAA,EAAA1jB,KAAAphB,MAAAsH,UAAA2a,MAAAvb,KAAA3H,UAAA,GACA+lC,EAAAC,SAAA,EACAF,EAAAG,WAGAT,EAAAj9B,UAAA29B,kBAAA,SAAA/gC,GACAtG,KAAA6mC,gBAAA9lC,KAAAuF,IAEAqgC,EAAAj9B,UAAA09B,OAAA,WACApnC,KAAA+mC,gBACA,IACA,QACA,KAAA/mC,KAAA2qB,QAAAzrB,OAAA,IACA,IAAAgoC,EAAAlnC,KAAA2qB,QAAA,GACA,IAAAuc,EAAAC,QACA,OAEAnnC,KAAA2qB,QAAA3qB,KAAA2qB,QAAAtG,MAAA,GACA6iB,EAAA5gC,SAAAqrB,MAAA,KAAAuV,EAAA1jB,MAEA,OAAAxjB,KAAA6mC,gBAAA3nC,OACA,MAEA,IAAAooC,EAAAtnC,KAAA6mC,gBAAA,GACA7mC,KAAA6mC,gBAAA7mC,KAAA6mC,gBAAAxiB,MAAA,GACAijB,KAGA,QACAtnC,KAAA+mC,gBAEA,IAAA/mC,KAAA+mC,eAAA/mC,KAAA8mC,mBACA9mC,KAAA8mC,qBAGAH,EAlDA,GAqDAY,GAAA,SAAAC,EAAAC,GACAznC,KAAA0nC,SAAA,IAAArC,GAAArlC,MACAA,KAAA2nC,UAAAH,EACAxnC,KAAA4nC,QAAAH,EACAznC,KAAA2gB,QAAA,IAAA0M,EAAAY,KACAjuB,KAAA6nC,YAAA,EACA7nC,KAAA8nC,wBACA9nC,KAAA+nC,qBACA/nC,KAAAgoC,WAAA,IAAArB,GAAA3mC,KAAA8mC,kBAAAryB,KAAAzU,QAEAunC,GAAA79B,WACAy8B,aAAA,EACA8B,IAAA,SAAAjX,GACA,IAEAhxB,KAAA0nC,SAAAvmB,MAAA6P,GAEA,MAAA7d,GACAnT,KAAA6C,MAAAsQ,EAEAnT,KAAAkoC,YAAA,EACAloC,KAAAgoC,WAAAZ,UAEAN,kBAAA,WACA9mC,KAAAkoC,YAGAloC,KAAA4nC,QAAA5nC,KAAA6C,QAEAslC,YAAA,SAAAC,EAAAnC,GACA,IAAAoC,EAAAD,EAAA9/B,QAAA7J,OACA,IAAA2pC,EAAA9L,KAAA+L,EAAA,CACA,IAAA1nB,EAAA,IAAA0M,EAAAY,KAAAjuB,KAAA2gB,QAAA2G,EAAAtnB,KAAA2gB,QAAAuN,SACAoa,EAAA3nB,EAAAuN,OAAA,GACAluB,KAAA6nC,cACAO,EAAAzL,mBACA38B,KAAAgoC,WAAAX,kBAAArnC,KAAAuoC,kBAAA9zB,KAAAzU,KAAAooC,EAAAznB,EAAA2nB,IAGAtoC,KAAAuoC,kBAAAH,EAAAznB,EAAA2nB,GAGArC,EAAAf,aAAA,GAEAqD,kBAAA,SAAAH,EAAAznB,EAAA2nB,GACA,IAAAE,EACAH,EAAAD,EAAA9/B,QAAA7J,OACA,IACA+pC,EAAAJ,EAAAxL,cAAAjc,GAEA,MAAAxN,GACAA,EAAAwB,WACAxB,EAAAxT,MAAAyoC,EAAAjoB,WACAhN,EAAAwB,SAAAyzB,EAAAloB,WAAAvL,UAGAyzB,EAAA9L,KAAA,EAEA8L,EAAAvlC,MAAAsQ,EAEA,IAAAq1B,KAAAlM,MAAA+L,EAgBAroC,KAAA6nC,cACA7nC,KAAAkoC,YACAloC,KAAAgoC,WAAAZ,aAlBA,CACAoB,EAAAlgC,QAAAmgC,WACA9nB,EAAA+nB,gBAAA,GAIA,IADA,IAAAvG,OAAA1/B,IAAA+lC,EAAAlM,IACAr9B,EAAA,EAA+BA,EAAAqpC,EAAArY,MAAA/wB,OAA+BD,IAC9D,GAAAqpC,EAAArY,MAAAhxB,KAAAmpC,EAAA,CACAE,EAAArY,MAAAhxB,GAAAupC,EACA,MAGA,IAAAG,EAAA3oC,KAAA2oC,WAAAl0B,KAAAzU,KAAAwoC,EAAA7nB,GAAAioB,EAAA5oC,KAAAgoC,WAAAhB,UAAA2B,GACA3oC,KAAA2nC,UAAA5mC,KAAAynC,EAAAhM,UAAA2F,EAAAqG,EAAAtoB,WAAAsoB,EAAAlgC,QAAAsgC,KASAD,WAAA,SAAAP,EAAAznB,EAAAxN,EAAA6d,EAAA6X,EAAAC,GACA31B,IACAA,EAAAwB,WACAxB,EAAAxT,MAAAyoC,EAAAjoB,WACAhN,EAAAwB,SAAAyzB,EAAAloB,WAAAvL,UAEA3U,KAAA6C,MAAAsQ,GAEA,IAAA41B,EAAA/oC,KAAAqoC,EAAAD,EAAA9/B,QAAA7J,OAAAg+B,EAAA2L,EAAA9/B,QAAAm0B,SAAAuM,EAAAZ,EAAA9/B,QAAA2gC,SAAAC,EAAAL,GAAAC,KAAAC,EAAAhB,kBAkBA,GAjBApnB,EAAA+nB,iBAEAN,EAAApL,OADAkM,GAIA,WACA,OAAAJ,KAAAC,EAAAjB,uBAGAiB,EAAAjB,qBAAAgB,IAAA,GACA,MAIAA,GAAAE,IACAZ,EAAApL,MAAA,GAEAhM,IACAoX,EAAApX,OACAoX,EAAAnL,iBAAA6L,GACAT,IAAA5L,IAAA9b,EAAA+nB,iBAAAQ,IAAA,CACAH,EAAAhB,kBAAAe,IAAA,EACA,IAAAK,EAAAnpC,KAAA2gB,QACA3gB,KAAA2gB,UACA,IACA3gB,KAAA0nC,SAAAvmB,MAAA6P,GAEA,MAAA7d,GACAnT,KAAA6C,MAAAsQ,EAEAnT,KAAA2gB,QAAAwoB,EAGAJ,EAAAlB,cACAkB,EAAAb,YACAa,EAAAf,WAAAZ,UAGAgC,iBAAA,SAAAC,EAAApD,GACA,oBAAAoD,EAAAnrC,MAAAkI,KACApG,KAAA2gB,QAAAuN,OAAAxrB,QAAA2mC,GAGApD,EAAAf,aAAA,GAGAoE,oBAAA,SAAAD,GACA,oBAAAA,EAAAnrC,MAAAkI,MACApG,KAAA2gB,QAAAuN,OAAAvrB,SAGA4mC,YAAA,SAAAC,EAAAvD,GACAjmC,KAAA2gB,QAAAuN,OAAAxrB,QAAA8mC,IAEAC,eAAA,SAAAD,GACAxpC,KAAA2gB,QAAAuN,OAAAvrB,SAEA+mC,qBAAA,SAAAC,EAAA1D,GACAjmC,KAAA2gB,QAAAuN,OAAAxrB,QAAAinC,IAEAC,wBAAA,SAAAD,GACA3pC,KAAA2gB,QAAAuN,OAAAvrB,SAEAknC,aAAA,SAAAC,EAAA7D,GACAjmC,KAAA2gB,QAAAuN,OAAAxrB,QAAAonC,IAEAC,gBAAA,SAAAD,GACA9pC,KAAA2gB,QAAAuN,OAAAvrB,SAEAqnC,WAAA,SAAAC,EAAAhE,GACAjmC,KAAA2gB,QAAAuN,OAAAxrB,QAAAunC,EAAAha,MAAA,KAEAia,cAAA,SAAAD,GACAjqC,KAAA2gB,QAAAuN,OAAAvrB,UAIA,IAAAwnC,GAAA,WACA,SAAAA,EAAAC,GACApqC,KAAAoqC,UAmCA,OAjCAD,EAAAzgC,UAAAu+B,IAAA,SAAAjX,GACAhxB,KAAAmhB,MAAA6P,IAEAmZ,EAAAzgC,UAAA0gB,WAAA,SAAA/J,GACA,IAAAA,EACA,OAAAA,EAEA,IACAphB,EADAmnC,EAAA/lB,EAAAnhB,OAEA,IAAAD,EAAA,EAAuBA,EAAAmnC,EAASnnC,IAChCe,KAAAmhB,MAAAd,EAAAphB,IAEA,OAAAohB,GAEA8pB,EAAAzgC,UAAAyX,MAAA,SAAA3hB,GACA,OAAAA,EAGAA,EAAA2N,cAAA/K,MACApC,KAAAoqB,WAAA5qB,IAEAA,EAAAsiB,kBAAAtiB,EAAAsiB,mBACAtiB,GAEAQ,KAAAoqC,QACA5qC,EAAAyiB,mBAGAziB,EAAA0iB,qBAEA1iB,EAAAyhB,OAAAjhB,MACAR,GAfAA,GAiBA2qC,EArCA,GAyCAE,GAAA,WACA,SAAAA,IACArqC,KAAA0nC,SAAA,IAAArC,GAAArlC,MACAA,KAAAqtB,YACArtB,KAAAsqC,qBA0EA,OAxEAD,EAAA3gC,UAAAu+B,IAAA,SAAAjX,GAGA,OAFAA,EAAAhxB,KAAA0nC,SAAAvmB,MAAA6P,IACAuZ,WAAAvqC,KAAAsqC,gBAAA,GACAtZ,GAEAqZ,EAAA3gC,UAAA0/B,iBAAA,SAAAC,EAAApD,GACAA,EAAAf,aAAA,GAEAmF,EAAA3gC,UAAAggC,qBAAA,SAAAC,EAAA1D,GACAA,EAAAf,aAAA,GAEAmF,EAAA3gC,UAAAmgC,aAAA,SAAAC,EAAA7D,GACA,IAAA6D,EAAA9Y,KAAA,CAGA,IAAA/xB,EACA0R,EACAua,EAEAlB,EADAwgB,KAGAva,EAAA6Z,EAAA7Z,MAAA2G,EAAA3G,IAAA/wB,OAAA,EACA,IAAAD,EAAA,EAAuBA,EAAA23B,EAAa33B,IACpC6qC,EAAA7Z,MAAAhxB,aAAA6iC,GAAA5D,SACAsM,EAAAzpC,KAAAkvB,EAAAhxB,IACA6qC,EAAAW,mBAAA,GAKA,IAAA7c,EAAAkc,EAAAlc,MACA,IAAA3uB,EAAA,EAAuBA,EAAA2uB,EAAA1uB,OAAkBD,IAAA,CACzC,IAAAyrC,EAAA9c,EAAA3uB,GAAA0rC,EAAAD,IAAAxrC,OAAA,GAAA8qB,WAQA,KAPAA,EAAA2gB,EAAArjB,EAAAqjB,GAAA36B,OAAAw6B,GACAA,KAEAxgB,IAAAroB,IAAA,SAAAipC,GACA,OAAAA,EAAAzlB,WAGAxU,EAAA,EAA2BA,EAAAqZ,EAAA9qB,OAAuByR,IAClD3Q,KAAA6qC,cAAA,GACA3f,EAAAlB,EAAArZ,IACA8tB,kBAAAiM,GACAxf,EAAA4F,QAAAgZ,EACA,IAAAn5B,IACAua,EAAA4f,+BAAA,GAEA9qC,KAAAsqC,gBAAAtqC,KAAAsqC,gBAAAprC,OAAA,GAAA6B,KAAAmqB,GAGAlrB,KAAAqtB,SAAAtsB,KAAA+oC,EAAA9Z,aAEAqa,EAAA3gC,UAAAqgC,gBAAA,SAAAD,GACAA,EAAA9Y,OACAhxB,KAAAqtB,SAAAnuB,OAAAc,KAAAqtB,SAAAnuB,OAAA,IAGAmrC,EAAA3gC,UAAAsgC,WAAA,SAAAC,EAAAhE,GACAgE,EAAAM,cACAvqC,KAAAsqC,gBAAAvpC,KAAAkpC,EAAAM,aAEAF,EAAA3gC,UAAAwgC,cAAA,SAAAD,GACAjqC,KAAAsqC,gBAAAprC,OAAAc,KAAAsqC,gBAAAprC,OAAA,GAEAmrC,EAAA3gC,UAAA6/B,YAAA,SAAAC,EAAAvD,GACAuD,EAAAe,cACAvqC,KAAAsqC,gBAAAvpC,KAAAyoC,EAAAe,aAEAF,EAAA3gC,UAAA+/B,eAAA,SAAAD,GACAxpC,KAAAsqC,gBAAAprC,OAAAc,KAAAsqC,gBAAAprC,OAAA,GAEAmrC,EA9EA,GAgFAU,GAAA,WACA,SAAAA,IACA/qC,KAAA0nC,SAAA,IAAArC,GAAArlC,MAqVA,OAnVA+qC,EAAArhC,UAAAu+B,IAAA,SAAAjX,GACA,IAAAga,EAAA,IAAAX,GAGA,GAFArqC,KAAAirC,iBACAD,EAAA/C,IAAAjX,IACAga,EAAAH,aACA,OAAA7Z,EAEAA,EAAAuZ,WAAAvZ,EAAAuZ,WAAAv6B,OAAAhQ,KAAAkrC,iBAAAla,EAAAuZ,WAAAvZ,EAAAuZ,aACAvqC,KAAAsqC,iBAAAtZ,EAAAuZ,YACA,IAAAY,EAAAnrC,KAAA0nC,SAAAvmB,MAAA6P,GAEA,OADAhxB,KAAAorC,0BAAApa,EAAAuZ,YACAY,GAEAJ,EAAArhC,UAAA0hC,0BAAA,SAAAphB,GACA,IAAAqhB,EAAArrC,KAAAirC,cACAjhB,EAAA0H,OAAA,SAAAxG,GACA,OAAAA,EAAAogB,iBAAA,GAAApgB,EAAAoT,WAAAp/B,SACakF,QAAA,SAAA8mB,GACb,IAAAsF,EAAA,YACA,IACAA,EAAAtF,EAAAsF,SAAA9P,UAEA,MAAAhP,IACA25B,EAAAngB,EAAAvrB,MAAA,IAAA6wB,KACA6a,EAAAngB,EAAAvrB,MAAA,IAAA6wB,IAAA,EACAjd,EAAAG,KAAA,WAAA8c,EAAA,wBAIAua,EAAArhC,UAAAwhC,iBAAA,SAAAK,EAAAC,EAAAC,GASA,IAAAC,EACAC,EACAC,EAEAthB,EAEAogB,EACAxf,EACA2gB,EACAC,EANAC,KAEAC,EAAAhsC,KAYA,IAPAyrC,KAAA,EAOAC,EAAA,EAAiCA,EAAAH,EAAArsC,OAAkCwsC,IACnE,IAAAC,EAAA,EAA2CA,EAAAH,EAAAtsC,OAA8CysC,IACzFzgB,EAAAqgB,EAAAG,GACAG,EAAAL,EAAAG,GAEAzgB,EAAAoT,WAAAh+B,QAAAurC,EAAAzN,YAAA,IAIAsM,GAAAmB,EAAAjN,cAAA,KACAgN,EAAAI,EAAAC,UAAA/gB,EAAAwf,IACAxrC,SACAgsB,EAAAogB,iBAAA,EAEApgB,EAAA0T,cAAAx6B,QAAA,SAAA8nC,GACA,IAAAv4B,EAAAk4B,EAAAzpB,iBAEAkI,EAAA0hB,EAAAG,eAAAP,EAAAlB,EAAAwB,EAAAhhB,EAAA/I,cAEA2pB,EAAA,IAAAhK,GAAA,OAAA+J,EAAArb,SAAAqb,EAAA1N,OAAA,EAAA0N,EAAA3rB,WAAAvM,IACAirB,cAAAtU,EAEAA,IAAAprB,OAAA,GAAA8qB,YAAA8hB,GAEAC,EAAAhrC,KAAA+qC,GACAA,EAAAhb,QAAA+a,EAAA/a,QAEAgb,EAAAxN,WAAAwN,EAAAxN,WAAAtuB,OAAA67B,EAAAvN,WAAApT,EAAAoT,YAIAuN,EAAAf,gCACAgB,EAAAhB,+BAAA,EACAe,EAAA/a,QAAAlD,MAAA7sB,KAAAupB,QAMA,GAAAyhB,EAAA7sC,OAAA,CAIA,GADAc,KAAAosC,mBACAX,EAAA,KACA,IAAAY,EAAA,wBACAC,EAAA,wBACA,IACAD,EAAAN,EAAA,GAAAnN,cAAA,GAAAle,QACA4rB,EAAAP,EAAA,GAAAvb,SAAA9P,QAEA,MAAAvN,IACA,MAA2B6V,QAAA,gFAAAqjB,EAAA,WAAAC,EAAA,KAI3B,OAAAP,EAAA/7B,OAAAg8B,EAAAd,iBAAAa,EAAAP,EAAAC,EAAA,IAGA,OAAAM,GAGAhB,EAAArhC,UAAA0/B,iBAAA,SAAAmD,EAAAtG,GACAA,EAAAf,aAAA,GAEA6F,EAAArhC,UAAAggC,qBAAA,SAAAC,EAAA1D,GACAA,EAAAf,aAAA,GAEA6F,EAAArhC,UAAA8iC,cAAA,SAAAC,EAAAxG,GACAA,EAAAf,aAAA,GAEA6F,EAAArhC,UAAAmgC,aAAA,SAAAC,EAAA7D,GACA,IAAA6D,EAAA9Y,KAAA,CAGA,IAAA4a,EACAc,EACAhB,EAIAhB,EAHAH,EAAAvqC,KAAAsqC,gBAAAtqC,KAAAsqC,gBAAAprC,OAAA,GACAytC,KACAX,EAAAhsC,KAGA,IAAA0rC,EAAA,EAAiCA,EAAAnB,EAAArrC,OAAiCwsC,IAClE,IAAAgB,EAAA,EAAmCA,EAAA5C,EAAAlc,MAAA1uB,OAAsCwtC,IAGzE,GAFAhC,EAAAZ,EAAAlc,MAAA8e,IAEA5C,EAAAW,kBAAA,CAGA,IAAAzgB,EAAA0gB,IAAAxrC,OAAA,GAAA8qB,WACAA,KAAA9qB,SAGA0sC,EAAA5rC,KAAAisC,UAAA1B,EAAAmB,GAAAhB,IACAxrC,SACAqrC,EAAAmB,GAAAJ,iBAAA,EACAf,EAAAmB,GAAA9M,cAAAx6B,QAAA,SAAA8nC,GACA,IAAAU,EACAA,EAAAZ,EAAAG,eAAAP,EAAAlB,EAAAwB,EAAA3B,EAAAmB,GAAAvpB,aACAwqB,EAAA5rC,KAAA6rC,MAKA9C,EAAAlc,MAAAkc,EAAAlc,MAAA5d,OAAA28B,KAEA5B,EAAArhC,UAAAuiC,UAAA,SAAA/gB,EAAA2hB,GAKA,IAAAC,EACAC,EACAC,EACAC,EACAC,EACAjuC,EAIAkuC,EAFAC,EAAAliB,EAAAsF,SAAAllB,SACA+hC,KAEAzB,KAEA,IAAAkB,EAAA,EAA2CA,EAAAD,EAAA3tC,OAAqD4tC,IAEhG,IADAC,EAAAF,EAAAC,GACAE,EAAA,EAA+CA,EAAAD,EAAAzhC,SAAApM,OAA2D8tC,IAO1G,IANAC,EAAAF,EAAAzhC,SAAA0hC,IAEA9hB,EAAAqT,aAAA,IAAAuO,GAAA,IAAAE,IACAK,EAAAtsC,MAA+C2rC,UAAAI,EAAAntC,MAAAqtC,EAAAM,QAAA,EAC/CC,kBAAAN,EAAAjoB,aAEA/lB,EAAA,EAA+BA,EAAAouC,EAAAnuC,OAA6BD,IAC5DkuC,EAAAE,EAAApuC,GAKA,MADAiuC,EAAAD,EAAAjoB,WAAA9mB,QACA,IAAA8uC,IACAE,EAAA,MAtBAltC,KAyBAwtC,qBAAAJ,EAAAD,EAAAG,SAAApvC,MAAA+uC,EAAA/uC,QACAivC,EAAAG,QAAA,GAAAF,EAAAD,EAAAG,SAAAtoB,WAAA9mB,QAAAgvC,EACAC,EAAA,KAGAA,EAAAG,UAGAH,IACAA,EAAAM,SAAAN,EAAAG,UAAAF,EAAAluC,OACAiuC,EAAAM,WACAviB,EAAAsT,aACAwO,EAAA,EAAAD,EAAAzhC,SAAApM,QAAA4tC,EAAA,EAAAD,EAAA3tC,UACAiuC,EAAA,OAIAA,EACAA,EAAAM,WACAN,EAAAjuC,OAAAkuC,EAAAluC,OACAiuC,EAAAO,aAAAZ,EACAK,EAAAQ,oBAAAX,EAAA,EACAK,EAAAnuC,OAAA,EACA0sC,EAAA7qC,KAAAosC,KAIAE,EAAAr5B,OAAA/U,EAAA,GACAA,KAKA,OAAA2sC,GAEAb,EAAArhC,UAAA8jC,qBAAA,SAAAI,EAAAC,GACA,oBAAAD,GAAA,iBAAAC,EACA,OAAAD,IAAAC,EAEA,GAAAD,aAAA9L,GAAAhH,UACA,OAAA8S,EAAAtsB,KAAAusB,EAAAvsB,IAAAssB,EAAA/rC,MAAAgsC,EAAAhsC,MAGA+rC,EAAA1vC,OAAA2vC,EAAA3vC,OAMA0vC,IAAA1vC,aAAA0vC,EAAA1vC,UACA2vC,IAAA3vC,aAAA2vC,EAAA3vC,QANA0vC,EAAA1vC,QAAA2vC,EAAA3vC,OAWA,GAFA0vC,IAAA1vC,MACA2vC,IAAA3vC,MACA0vC,aAAA9L,GAAA/X,SAAA,CACA,KAAA8jB,aAAA/L,GAAA/X,WAAA6jB,EAAAtiC,SAAApM,SAAA2uC,EAAAviC,SAAApM,OACA,SAEA,QAAAD,EAAA,EAA+BA,EAAA2uC,EAAAtiC,SAAApM,OAAmCD,IAAA,CAClE,GAAA2uC,EAAAtiC,SAAArM,GAAA+lB,WAAA9mB,QAAA2vC,EAAAviC,SAAArM,GAAA+lB,WAAA9mB,QACA,IAAAe,IAAA2uC,EAAAtiC,SAAArM,GAAA+lB,WAAA9mB,OAAA,QAAA2vC,EAAAviC,SAAArM,GAAA+lB,WAAA9mB,OAAA,MACA,SAGA,IAAA8B,KAAAwtC,qBAAAI,EAAAtiC,SAAArM,GAAAf,MAAA2vC,EAAAviC,SAAArM,GAAAf,OACA,SAGA,SAEA,UAEA6sC,EAAArhC,UAAAyiC,eAAA,SAAAP,EAAAlB,EAAAoD,EAAA3rB,GAEA,IAAA4rB,EAAAvd,EAAAwd,EAAAnuC,EAAAouC,EAAAC,EAAA,EAAAC,EAAA,EAAApgB,KACA,IAAAggB,EAAA,EAAgCA,EAAAnC,EAAA1sC,OAA6B6uC,IAE7Dvd,EAAAka,GADA7qC,EAAA+rC,EAAAmC,IACArB,WACAsB,EAAA,IAAAlM,GAAA/c,QAAAllB,EAAA0tC,kBAAAO,EAAAxiC,SAAA,GAAApN,MAAA4vC,EAAAxiC,SAAA,GAAA2Z,WAAA6oB,EAAAxiC,SAAA,GAAA6U,WAAA2tB,EAAAxiC,SAAA,GAAA4U,YACArgB,EAAA6sC,UAAAwB,GAAAC,EAAA,IACApgB,IAAA7uB,OAAA,GAAAoM,SAAAyiB,IAAA7uB,OAAA,GACAoM,SAAA0E,OAAA06B,EAAAwD,GAAA5iC,SAAA+Y,MAAA8pB,IACAA,EAAA,EACAD,KAEAD,EAAAzd,EAAAllB,SACA+Y,MAAA8pB,EAAAtuC,EAAAF,OACAqQ,QAAAg+B,IACAh+B,OAAA89B,EAAAxiC,SAAA+Y,MAAA,IACA6pB,IAAAruC,EAAA6sC,WAAAqB,EAAA,EACAhgB,IAAA7uB,OAAA,GAAAoM,SACAyiB,IAAA7uB,OAAA,GAAAoM,SAAA0E,OAAAi+B,IAGAlgB,IAAA/d,OAAA06B,EAAArmB,MAAA6pB,EAAAruC,EAAA6sC,aACA3rC,KAAA,IAAA+gC,GAAA/X,SAAAkkB,IAEAC,EAAAruC,EAAA6tC,cACAS,EAAAtuC,EAAA8tC,sBACAjD,EAAAwD,GAAA5iC,SAAApM,SACAivC,EAAA,EACAD,KAoBA,OAjBAA,EAAAxD,EAAAxrC,QAAAivC,EAAA,IACApgB,IAAA7uB,OAAA,GAAAoM,SAAAyiB,IAAA7uB,OAAA,GACAoM,SAAA0E,OAAA06B,EAAAwD,GAAA5iC,SAAA+Y,MAAA8pB,IACAD,KAGAngB,GADAA,IAAA/d,OAAA06B,EAAArmB,MAAA6pB,EAAAxD,EAAAxrC,UACAyC,IAAA,SAAAysC,GAEA,IAAAC,EAAAD,EAAA/jB,cAAA+jB,EAAA9iC,UAOA,OANA6W,EACAksB,EAAApsB,mBAGAosB,EAAAnsB,qBAEAmsB,KAIAtD,EAAArhC,UAAAsgC,WAAA,SAAAC,EAAAhE,GACA,IAAAqI,EAAArE,EAAAM,WAAAv6B,OAAAhQ,KAAAsqC,gBAAAtqC,KAAAsqC,gBAAAprC,OAAA,IACAovC,IAAAt+B,OAAAhQ,KAAAkrC,iBAAAoD,EAAArE,EAAAM,aACAvqC,KAAAsqC,gBAAAvpC,KAAAutC,IAEAvD,EAAArhC,UAAAwgC,cAAA,SAAAD,GACA,IAAAt+B,EAAA3L,KAAAsqC,gBAAAprC,OAAA,EACAc,KAAAsqC,gBAAAprC,OAAAyM,GAEAo/B,EAAArhC,UAAA6/B,YAAA,SAAAC,EAAAvD,GACA,IAAAqI,EAAA9E,EAAAe,WAAAv6B,OAAAhQ,KAAAsqC,gBAAAtqC,KAAAsqC,gBAAAprC,OAAA,IACAovC,IAAAt+B,OAAAhQ,KAAAkrC,iBAAAoD,EAAA9E,EAAAe,aACAvqC,KAAAsqC,gBAAAvpC,KAAAutC,IAEAvD,EAAArhC,UAAA+/B,eAAA,SAAAD,GACA,IAAA79B,EAAA3L,KAAAsqC,gBAAAprC,OAAA,EACAc,KAAAsqC,gBAAAprC,OAAAyM,GAEAo/B,EAvVA,GA0VAwD,GAAA,WACA,SAAAA,IACAvuC,KAAAqtB,cACArtB,KAAA0nC,SAAA,IAAArC,GAAArlC,MA4CA,OA1CAuuC,EAAA7kC,UAAAu+B,IAAA,SAAAjX,GACA,OAAAhxB,KAAA0nC,SAAAvmB,MAAA6P,IAEAud,EAAA7kC,UAAA0/B,iBAAA,SAAAC,EAAApD,GACAA,EAAAf,aAAA,GAEAqJ,EAAA7kC,UAAAggC,qBAAA,SAAAC,EAAA1D,GACAA,EAAAf,aAAA,GAEAqJ,EAAA7kC,UAAAmgC,aAAA,SAAAC,EAAA7D,GACA,IAEAjW,EAFArP,EAAA3gB,KAAAqtB,SAAArtB,KAAAqtB,SAAAnuB,OAAA,GACA0uB,KAEA5tB,KAAAqtB,SAAAtsB,KAAA6sB,GACAkc,EAAA9Y,QACAhB,EAAA8Z,EAAA9Z,aAEAA,IAAA0B,OAAA,SAAAlB,GAAsE,OAAAA,EAAArF,gBACtE2e,EAAA9Z,YAAA9wB,OAAA8wB,IAAA,KACAA,GACA8Z,EAAA7V,cAAArG,EAAAjN,EAAAqP,IAGAA,IACA8Z,EAAA7Z,MAAA,MAEA6Z,EAAAlc,UAGA2gB,EAAA7kC,UAAAqgC,gBAAA,SAAAD,GACA9pC,KAAAqtB,SAAAnuB,OAAAc,KAAAqtB,SAAAnuB,OAAA,GAEAqvC,EAAA7kC,UAAAsgC,WAAA,SAAAC,EAAAhE,GACA,IAAAtlB,EAAA3gB,KAAAqtB,SAAArtB,KAAAqtB,SAAAnuB,OAAA,GACA+qC,EAAAha,MAAA,GAAAe,KAAA,IAAArQ,EAAAzhB,QAAAyhB,EAAA,GAAAub,YAEAqS,EAAA7kC,UAAA6/B,YAAA,SAAAC,EAAAvD,GACA,IAAAtlB,EAAA3gB,KAAAqtB,SAAArtB,KAAAqtB,SAAAnuB,OAAA,GACAsqC,EAAAvZ,OAAAuZ,EAAAvZ,MAAA/wB,SACAsqC,EAAAvZ,MAAA,GAAAe,KAAAwY,EAAAjT,UAAA,IAAA5V,EAAAzhB,QAAA,OAGAqvC,EA/CA,GAkDAC,GAAA,WACA,SAAAA,EAAA7tB,GACA3gB,KAAA0nC,SAAA,IAAArC,GAAArlC,MACAA,KAAAyuC,SAAA9tB,EA0DA,OAxDA6tB,EAAA9kC,UAAAglC,8BAAA,SAAAC,GACA,IAAA/d,EACA,IAAA+d,EACA,SAEA,QAAA1rB,EAAA,EAA2BA,EAAA0rB,EAAAzvC,OAAsB+jB,IAEjD,IADA2N,EAAA+d,EAAA1rB,IACAkK,UAAAyD,EAAAzD,SAAAntB,KAAAyuC,YAAA7d,EAAA9O,mBAGA,SAGA,UAEA0sB,EAAA9kC,UAAAklC,sBAAA,SAAAC,GACAA,KAAA5e,QACA4e,EAAA5e,MAAA4e,EAAA5e,MAAAyB,OAAA,SAAAod,GAAmE,OAAAA,EAAA3sB,gBAGnEqsB,EAAA9kC,UAAAqX,QAAA,SAAA8tB,GACA,OAAAA,MAAA5e,OACA,IAAA4e,EAAA5e,MAAA/wB,QAEAsvC,EAAA9kC,UAAAqlC,mBAAA,SAAAjF,GACA,SAAAA,MAAAlc,QACAkc,EAAAlc,MAAA1uB,OAAA,GAEAsvC,EAAA9kC,UAAAslC,kBAAA,SAAAxvC,EAAAyvC,GACA,IAAAzvC,EAAAsiB,mBAAA,CACA,GAAA9hB,KAAA+gB,QAAAvhB,KAAAQ,KAAA0uC,8BAAAO,GACA,OAEA,OAAAzvC,EAEA,IAAA0vC,EAAA1vC,EAAAywB,MAAA,GAEA,GADAjwB,KAAA4uC,sBAAAM,IACAlvC,KAAA+gB,QAAAmuB,GAKA,OAFA1vC,EAAAyiB,mBACAziB,EAAAwiB,wBACAxiB,GAEAgvC,EAAA9kC,UAAAylC,iBAAA,SAAArF,GACA,QAAAA,EAAA7Y,YAGAjxB,KAAA+gB,QAAA+oB,OAGAA,EAAA9Y,OAAAhxB,KAAA+uC,mBAAAjF,KAKA0E,EA7DA,GA+DA7T,GAAA,SAAAha,GACA3gB,KAAA0nC,SAAA,IAAArC,GAAArlC,MACAA,KAAAyuC,SAAA9tB,EACA3gB,KAAAwoB,MAAA,IAAAgmB,GAAA7tB,IAEAga,GAAAjxB,WACAy8B,aAAA,EACA8B,IAAA,SAAAjX,GACA,OAAAhxB,KAAA0nC,SAAAvmB,MAAA6P,IAEAoY,iBAAA,SAAAC,EAAApD,GACA,IAAAoD,EAAAvnB,qBAAAunB,EAAArd,SAGA,OAAAqd,GAEAK,qBAAA,SAAA0F,EAAAnJ,GAGAmJ,EAAAlhB,WAEAmhB,YAAA,SAAAC,EAAArJ,KAEAsJ,aAAA,SAAAC,EAAAvJ,GACA,IAAAuJ,EAAA1tB,qBAAA0tB,EAAAriB,SAAAntB,KAAAyuC,UAGA,OAAAe,GAEAxF,WAAA,SAAAC,EAAAhE,GACA,IAAAgJ,EAAAhF,EAAAha,MAAA,GAAAA,MAGA,OAFAga,EAAAhpB,OAAAjhB,KAAA0nC,UACAzB,EAAAf,aAAA,EACAllC,KAAAwoB,MAAAwmB,kBAAA/E,EAAAgF,IAEA9G,YAAA,SAAAC,EAAAnC,GACA,IAAAmC,EAAAtmB,mBAGA,OAAAsmB,GAEAmB,YAAA,SAAAC,EAAAvD,GACA,OAAAuD,EAAAvZ,OAAAuZ,EAAAvZ,MAAA/wB,OACAc,KAAAyvC,oBAAAjG,EAAAvD,GAGAjmC,KAAA0vC,uBAAAlG,EAAAvD,IAGA0J,eAAA,SAAAC,EAAA3J,GACA,IAAA2J,EAAA9tB,mBAEA,OADA8tB,EAAA3uB,OAAAjhB,KAAA0nC,UACAkI,GAGAH,oBAAA,SAAAjG,EAAAvD,GAiBA,IAAAgJ,EAVA,SAAAzF,GACA,IAAAqG,EAAArG,EAAAvZ,MACA,OANA,SAAAuZ,GACA,IAAAmF,EAAAnF,EAAAvZ,MACA,WAAA0e,EAAAzvC,UAAAyvC,EAAA,GAAA/gB,OAAA,IAAA+gB,EAAA,GAAA/gB,MAAA1uB,QAIA4wC,CAAAtG,GACAqG,EAAA,GAAA5f,MAEA4f,EAKAE,CAAAvG,GAMA,OALAA,EAAAvoB,OAAAjhB,KAAA0nC,UACAzB,EAAAf,aAAA,EACAllC,KAAAwoB,MAAAzH,QAAAyoB,IACAxpC,KAAA46B,YAAA4O,EAAAvZ,MAAA,GAAAA,OAEAjwB,KAAAwoB,MAAAwmB,kBAAAxF,EAAAyF,IAEAS,uBAAA,SAAAlG,EAAAvD,GACA,IAAAuD,EAAA1nB,mBAAA,CAGA,gBAAA0nB,EAAAtoC,KAAA,CAIA,GAAAlB,KAAAgwC,QAAA,CACA,GAAAxG,EAAA/c,UAAA,CACA,IAAAlsB,EAAA,IAAAuhC,GAAA75B,QAAA,MAAAuhC,EAAA9oB,MAAA1gB,KAAAyuC,UAAAxuC,QAAA,mBAEA,OADAM,EAAAksB,UAAA+c,EAAA/c,UACAzsB,KAAA0nC,SAAAvmB,MAAA5gB,GAEA,OAEAP,KAAAgwC,SAAA,EAEA,OAAAxG,IAEAyG,gBAAA,SAAAhgB,EAAAigB,GACA,GAAAjgB,EAGA,QAAAhxB,EAAA,EAA2BA,EAAAgxB,EAAA/wB,OAAkBD,IAAA,CAC7C,IAAAstC,EAAAtc,EAAAhxB,GACA,GAAAixC,GAAA3D,aAAAzK,GAAAhW,cAAAygB,EAAAvgB,SACA,MAA2BhD,QAAA,wEAC3BrpB,MAAA4sC,EAAApsB,WAAAxL,SAAA43B,EAAArsB,YAAAqsB,EAAArsB,WAAAvL,UAEA,GAAA43B,aAAAzK,GAAA9H,KACA,MAA2BhR,QAAA,aAAAujB,EAAArrC,KAAA,+BAAAvB,MAAA4sC,EAAApsB,WAAAxL,SAAA43B,EAAArsB,YAAAqsB,EAAArsB,WAAAvL,UAE3B,GAAA43B,EAAAnmC,OAAAmmC,EAAA5gB,UACA,MAA2B3C,QAAAujB,EAAAnmC,KAAA,iDAAAzG,MAAA4sC,EAAApsB,WAAAxL,SAAA43B,EAAArsB,YAAAqsB,EAAArsB,WAAAvL,YAI3Bk1B,aAAA,SAAAC,EAAA7D,GAEA,IAAArV,EACAoC,KAEA,GADAhzB,KAAAiwC,gBAAAnG,EAAA7Z,MAAA6Z,EAAA7Y,WACA6Y,EAAA9Y,KA6BA8Y,EAAA7oB,OAAAjhB,KAAA0nC,UACAzB,EAAAf,aAAA,MA9BA,CAEAllC,KAAAmwC,qBAAArG,GAIA,IAFA,IAAA+F,EAAA/F,EAAA7Z,MACAmgB,EAAAP,IAAA3wC,OAAA,EACAD,EAAA,EAA+BA,EAAAmxC,IAC/Bxf,EAAAif,EAAA5wC,KACA2xB,EAAAX,OAEA+C,EAAAjyB,KAAAf,KAAA0nC,SAAAvmB,MAAAyP,IACAif,EAAA77B,OAAA/U,EAAA,GACAmxC,KAGAnxC,IAKAmxC,EAAA,EACAtG,EAAA7oB,OAAAjhB,KAAA0nC,UAGAoC,EAAA7Z,MAAA,KAEAgW,EAAAf,aAAA,EAeA,OATA4E,EAAA7Z,QACAjwB,KAAA46B,YAAAkP,EAAA7Z,OACAjwB,KAAAqwC,sBAAAvG,EAAA7Z,QAGAjwB,KAAAwoB,MAAA2mB,iBAAArF,KACAA,EAAA7nB,mBACA+Q,EAAAhf,OAAA,IAAA81B,IAEA,IAAA9W,EAAA9zB,OACA8zB,EAAA,GAEAA,GAEAmd,qBAAA,SAAArG,GACAA,EAAAlc,QACAkc,EAAAlc,MAAAkc,EAAAlc,MACA8D,OAAA,SAAA8N,GACA,IAAAvgC,EAIA,IAHA,MAAAugC,EAAA,GAAAl0B,SAAA,GAAA0Z,WAAA9mB,QACAshC,EAAA,GAAAl0B,SAAA,GAAA0Z,WAAA,IAAA8c,GAAA,gBAEA7iC,EAAA,EAA+BA,EAAAugC,EAAAtgC,OAAcD,IAC7C,GAAAugC,EAAAvgC,GAAAkjB,aAAAqd,EAAAvgC,GAAAksB,cACA,SAGA,aAIAklB,sBAAA,SAAApgB,GACA,GAAAA,EAAA,CAIA,IACAqgB,EACA1f,EACA3xB,EAHAsxC,KAIA,IAAAtxC,EAAAgxB,EAAA/wB,OAAA,EAAsCD,GAAA,EAAQA,IAE9C,IADA2xB,EAAAX,EAAAhxB,cACA6iC,GAAAhW,YACA,GAAAykB,EAAA3f,EAAA1vB,MAGA,EACAovC,EAAAC,EAAA3f,EAAA1vB,iBACA4gC,GAAAhW,cACAwkB,EAAAC,EAAA3f,EAAA1vB,OAAAqvC,EAAA3f,EAAA1vB,MAAAwf,MAAA1gB,KAAAyuC,YAEA,IAAA+B,EAAA5f,EAAAlQ,MAAA1gB,KAAAyuC,WACA,IAAA6B,EAAAhwC,QAAAkwC,GACAvgB,EAAAjc,OAAA/U,EAAA,GAGAqxC,EAAAvvC,KAAAyvC,QAZAD,EAAA3f,EAAA1vB,MAAA0vB,IAkBAgK,YAAA,SAAA3K,GACA,GAAAA,EAAA,CAKA,IAFA,IAAAwgB,KACAC,KACAzxC,EAAA,EAA2BA,EAAAgxB,EAAA/wB,OAAkBD,IAAA,CAC7C,IAAA2xB,EAAAX,EAAAhxB,GACA,GAAA2xB,EAAAjI,MAAA,CACA,IAAA9mB,EAAA+uB,EAAA1vB,KACAuvC,EAAA5uC,GAAAouB,EAAAjc,OAAA/U,IAAA,GACAyxC,EAAA3vC,KAAA0vC,EAAA5uC,OACA4uC,EAAA5uC,GAAAd,KAAA6vB,IAGA8f,EAAAtsC,QAAA,SAAAwzB,GACA,GAAAA,EAAA14B,OAAA,GACA,IAAAyxC,EAAA/Y,EAAA,GACAgZ,KACAC,GAAA,IAAA/O,GAAA3I,WAAAyX,IACAhZ,EAAAxzB,QAAA,SAAAwsB,GACA,MAAAA,EAAAjI,OAAAioB,EAAA1xC,OAAA,GACA2xC,EAAA9vC,KAAA,IAAA+gC,GAAA3I,WAAAyX,OAEAA,EAAA7vC,KAAA6vB,EAAA1yB,OACAyyC,EAAA5kB,UAAA4kB,EAAA5kB,WAAA6E,EAAA7E,YAEA4kB,EAAAzyC,MAAA,IAAA4jC,GAAA1W,MAAAylB,SAMA,IAAAnW,IACA2K,WACAkC,iBACAuJ,4BAAA3G,GACA4G,cAAAhG,GACAwD,uBACA5T,iBAoJA,IAAAqW,GAAA,WACA,IACAjuC,EAEA4N,EAIAsgC,EAEAC,EAEAC,EAEAC,EAEAC,EAVAC,KAWAC,KACAC,EAAA,GACAC,EAAA,EACAC,EAAA,GACAC,EAAA,GAGAC,EAAA,GAEA,SAAAC,EAAA3yC,GAUA,IATA,IAMAwN,EACAolC,EACAvxC,EARAwxC,EAAAR,EAAAtyC,EACA+yC,EAAArhC,EACAshC,EAAAV,EAAAtyC,EAAAoyC,EACAa,EAAAX,EAAAtyC,EAAAmyC,EAAAlyC,OAAA+yC,EACAE,EAAAZ,EAAAtyC,GAAAC,EACAkzC,EAAArvC,EAIkBwuC,EAAAtyC,EAAAizC,EAA0BX,EAAAtyC,IAAA,CAE5C,GADAyN,EAAA0lC,EAAAC,WAAAd,EAAAtyC,GACAsyC,EAAAe,mBAAA5lC,IAAAklC,EAAA,CAEA,UADAE,EAAAM,EAAAlmC,OAAAqlC,EAAAtyC,EAAA,IACA,CACAsB,GAAmCZ,MAAA4xC,EAAAtyC,EAAAiuB,eAAA,GACnC,IAAAqlB,EAAAH,EAAA9xC,QAAA,KAAAixC,EAAAtyC,EAAA,GACAszC,EAAA,IACAA,EAAAL,GAEAX,EAAAtyC,EAAAszC,EACAhyC,EAAAH,KAAAgyC,EAAAtoB,OAAAvpB,EAAAZ,MAAA4xC,EAAAtyC,EAAAsB,EAAAZ,OACA4xC,EAAAiB,aAAAzxC,KAAAR,GACA,SAEA,SAAAuxC,EAAA,CACA,IAAAW,EAAAL,EAAA9xC,QAAA,KAAAixC,EAAAtyC,EAAA,GACA,GAAAwzC,GAAA,GACAlyC,GACAZ,MAAA4xC,EAAAtyC,EACAmB,KAAAgyC,EAAAtoB,OAAAynB,EAAAtyC,EAAAwzC,EAAA,EAAAlB,EAAAtyC,GACAiuB,eAAA,GAEAqkB,EAAAtyC,GAAAsB,EAAAH,KAAAlB,OAAA,EACAqyC,EAAAiB,aAAAzxC,KAAAR,GACA,UAGA,MAEA,GAAAmM,IAAA8kC,GAAA9kC,IAAAglC,GAAAhlC,IAAA+kC,GAAA/kC,IAAAilC,EACA,MAKA,GAFAP,IAAA/sB,MAAAnlB,EAAAqyC,EAAAtyC,EAAAkzC,EAAAF,GACAZ,EAAAE,EAAAtyC,GACAmyC,EAAAlyC,OAAA,CACA,GAAAyR,EAAAwgC,EAAAjyC,OAAA,EAGA,OAFAkyC,EAAAD,IAAAxgC,GACAkhC,EAAA,IACA,EAEAN,EAAA9D,UAAA,EAEA,OAAAsE,IAAAR,EAAAtyC,GAAA+yC,IAAArhC,EAuQA,OArQA4gC,EAAAmB,KAAA,WACArB,EAAAE,EAAAtyC,EACAqyC,EAAAvwC,MAA4BqwC,UAAAnyC,EAAAsyC,EAAAtyC,EAAA0R,OAE5B4gC,EAAAoB,QAAA,SAAAC,IACArB,EAAAtyC,EAAAgyC,GAAAM,EAAAtyC,IAAAgyC,GAAA2B,IAAA1B,KACAD,EAAAM,EAAAtyC,EACAiyC,EAAA0B,GAEA,IAAAC,EAAAvB,EAAAllC,MACAglC,EAAAyB,EAAAzB,QACAC,EAAAE,EAAAtyC,EAAA4zC,EAAA5zC,EACA0R,EAAAkiC,EAAAliC,GAEA4gC,EAAAuB,OAAA,WACAxB,EAAAllC,OAEAmlC,EAAAwB,aAAA,SAAAC,GACA,IAAA3xC,EAAAkwC,EAAAtyC,GAAA+zC,GAAA,GACAC,EAAAlwC,EAAAsvC,WAAAhxC,GACA,OAAA4xC,IAAAzB,GAAAyB,IAAAtB,GAAAsB,IAAAxB,GAAAwB,IAAAvB,GAGAH,EAAA2B,IAAA,SAAAC,GACA5B,EAAAtyC,EAAAoyC,IACAD,IAAA/sB,MAAAktB,EAAAtyC,EAAAoyC,GACAA,EAAAE,EAAAtyC,GAEA,IAAAyf,EAAAy0B,EAAAvnC,KAAAwlC,GACA,OAAA1yB,GAGAmzB,EAAAnzB,EAAA,GAAAxf,QACA,iBAAAwf,EACAA,EAEA,IAAAA,EAAAxf,OAAAwf,EAAA,GAAAA,GANA,MAQA6yB,EAAA6B,MAAA,SAAAD,GACA,OAAApwC,EAAAmJ,OAAAqlC,EAAAtyC,KAAAk0C,EACA,MAEAtB,EAAA,GACAsB,IAEA5B,EAAA8B,KAAA,SAAAF,GAGA,IAFA,IAAAG,EAAAH,EAAAj0C,OAEAD,EAAA,EAA2BA,EAAAq0C,EAAer0C,IAC1C,GAAA8D,EAAAmJ,OAAAqlC,EAAAtyC,OAAAk0C,EAAAjnC,OAAAjN,GACA,YAIA,OADA4yC,EAAAyB,GACAH,GAEA5B,EAAAgC,QAAA,SAAArqB,GACA,IAAA7nB,EAAA6nB,GAAAqoB,EAAAtyC,EACAu0C,EAAAzwC,EAAAmJ,OAAA7K,GACA,SAAAmyC,GAAA,MAAAA,EAAA,CAKA,IAFA,IAAAt0C,EAAA6D,EAAA7D,OACAu0C,EAAApyC,EACApC,EAAA,EAA2BA,EAAAw0C,EAAAv0C,EAA8BD,IAAA,CAEzD,OADA8D,EAAAmJ,OAAAjN,EAAAw0C,IAEA,SACAx0C,IACA,SACA,SACA,SACA,MACA,KAAAu0C,EACA,IAAA30C,EAAAkE,EAAA+mB,OAAA2pB,EAAAx0C,EAAA,GACA,OAAAiqB,GAAA,IAAAA,GAIAsqB,EAAA30C,IAHAgzC,EAAA5yC,EAAA,GACAJ,IAKA,cAMA0yC,EAAAmC,YAAA,SAAAP,GACA,IAWAQ,EAXA1Y,EAAA,GACA2Y,EAAA,KACAC,GAAA,EACAC,EAAA,EACAC,KACAC,KACA90C,EAAA6D,EAAA7D,OACA+0C,EAAA1C,EAAAtyC,EACAi1C,EAAA3C,EAAAtyC,EACAA,EAAAsyC,EAAAtyC,EACAk1C,GAAA,EAGAR,EADA,iBAAAR,EACA,SAAAiB,GAA4C,OAAAA,IAAAjB,GAG5C,SAAAiB,GAA4C,OAAAjB,EAAAnnC,KAAAooC,IAE5C,GACA,IAAAtC,EAAA/uC,EAAAmJ,OAAAjN,GACA,OAAA60C,GAAAH,EAAA7B,IACA8B,EAAA7wC,EAAA+mB,OAAAoqB,EAAAj1C,EAAAi1C,IAEAF,EAAAjzC,KAAA6yC,GAGAI,EAAAjzC,KAAA,KAEA6yC,EAAAI,EACAnC,EAAA5yC,EAAAg1C,GACAE,GAAA,MAEA,CACA,GAAAN,EAAA,CACA,MAAA/B,GACA,MAAA/uC,EAAAmJ,OAAAjN,EAAA,KACAA,IACA60C,IACAD,GAAA,GAEA50C,IACA,SAEA,OAAA6yC,GACA,SACA7yC,IACA6yC,EAAA/uC,EAAAmJ,OAAAjN,GACA+0C,EAAAjzC,KAAAgC,EAAA+mB,OAAAoqB,EAAAj1C,EAAAi1C,EAAA,IACAA,EAAAj1C,EAAA,EACA,MACA,QACA,MAAA8D,EAAAmJ,OAAAjN,EAAA,KACAA,IACA40C,GAAA,EACAC,KAEA,MACA,QACA,SACA7Y,EAAAsW,EAAAgC,QAAAt0C,KAEA+0C,EAAAjzC,KAAAgC,EAAA+mB,OAAAoqB,EAAAj1C,EAAAi1C,GAAAjZ,GAEAiZ,GADAj1C,GAAAg8B,EAAA,GAAA/7B,OAAA,GACA,IAGA2yC,EAAA5yC,EAAAg1C,GACAL,EAAA9B,EACAqC,GAAA,GAEA,MACA,QACAJ,EAAAhzC,KAAA,KACA+yC,IACA,MACA,QACAC,EAAAhzC,KAAA,KACA+yC,IACA,MACA,QACAC,EAAAhzC,KAAA,KACA+yC,IACA,MACA,QACA,QACA,QACA,IAAAO,EAAAN,EAAA3nC,MACA0lC,IAAAuC,EACAP,KAIAjC,EAAA5yC,EAAAg1C,GACAL,EAAAS,EACAF,GAAA,KAGAl1C,EACAC,IACAi1C,GAAA,UAGaA,GACb,OAAAP,GAAA,MAEArC,EAAAe,mBAAA,EACAf,EAAAiB,gBACAjB,EAAA9D,UAAA,EAGA8D,EAAA+C,KAAA,SAAAnB,GACA,oBAAAA,EAAA,CAEA,QAAAl0C,EAAA,EAA+BA,EAAAk0C,EAAAj0C,OAAgBD,IAC/C,GAAA8D,EAAAmJ,OAAAqlC,EAAAtyC,OAAAk0C,EAAAjnC,OAAAjN,GACA,SAGA,SAGA,OAAAk0C,EAAAnnC,KAAAolC,IAKAG,EAAAgD,SAAA,SAAApB,GAA+C,OAAApwC,EAAAmJ,OAAAqlC,EAAAtyC,KAAAk0C,GAC/C5B,EAAAiD,YAAA,WAA+C,OAAAzxC,EAAAmJ,OAAAqlC,EAAAtyC,IAC/CsyC,EAAAkD,SAAA,WAA4C,OAAA1xC,EAAAmJ,OAAAqlC,EAAAtyC,EAAA,IAC5CsyC,EAAAmD,SAAA,WAA4C,OAAA3xC,GAC5CwuC,EAAAoD,eAAA,WACA,IAAAjoC,EAAA3J,EAAAsvC,WAAAd,EAAAtyC,GAEA,OAAAyN,EAvRA,IAuRAA,EA1RA,IA0RAA,IAAAklC,GAzRA,KAyRAllC,GAEA6kC,EAAAvwC,MAAA,SAAAnC,EAAA+1C,EAAAC,GACA9xC,EAAAlE,EACA0yC,EAAAtyC,EAAA0R,EAAA0gC,EAAAJ,EAAA,EAYAE,EADAyD,EA/cA,SAAA7xC,EAAA+xC,GACA,IAGAC,EACAC,EACAC,EACAC,EAGAC,EACAC,EACAC,EACAC,EACAhI,EAbAlqC,EAAAL,EAAA7D,OACAq2C,EAAA,EACAC,EAAA,EAKArE,KACAsE,EAAA,EAMA,SAAAC,EAAAC,GACA,IAAAvyC,EAAA+xC,EAAAM,EACAryC,EAAA,MAAAuyC,IAAAvyC,IAGA+tC,EAAApwC,KAAAgC,EAAAshB,MAAAoxB,EAAAN,EAAA,IACAM,EAAAN,EAAA,GAEA,IAAAA,EAAA,EAAqCA,EAAA/xC,EAA2B+xC,IAEhE,MADAE,EAAAtyC,EAAAsvC,WAAA8C,KACA,IAAAE,GAAA,KAAAA,EAAA,IAIA,OAAAA,GACA,QACAG,IACAR,EAAAG,EACA,SACA,QACA,KAAAK,EAAA,EACA,OAAAV,EAAA,sBAAAK,GAEA,SACA,QACAK,GACAE,IAEA,SACA,SACAH,IACAR,EAAAI,EACA,SACA,SACA,KAAAI,EAAA,EACA,OAAAT,EAAA,sBAAuDK,GAEvDI,GAAAC,GACAE,IAEA,SACA,QACA,GAAAP,EAAA/xC,EAAA,GACA+xC,IACA,SAEA,OAAAL,EAAA,iBAAAK,GACA,QACA,QACA,QAGA,IAFA7H,EAAA,EACA8H,EAAAD,EACAA,GAAA,EAAuEA,EAAA/xC,EAA2B+xC,IAElG,MADAG,EAAAvyC,EAAAsvC,WAAA8C,IACA,KAGA,GAAAG,GAAAD,EAAA,CACA/H,EAAA,EACA,MAEA,OAAAgI,EAAA,CACA,GAAAH,GAAA/xC,EAAA,EACA,OAAA0xC,EAAA,iBAAAK,GAEAA,KAGA,GAAA7H,EACA,SAEA,OAAAwH,EAAA,cAAAtc,OAAAod,aAAAP,GAAA,IAAAD,GACA,QACA,GAAAI,GAAAL,GAAA/xC,EAAA,EACA,SAGA,QADAkyC,EAAAvyC,EAAAsvC,WAAA8C,EAAA,IAGA,IAAAA,GAAA,EAA2EA,EAAA/xC,OAC3EkyC,EAAAvyC,EAAAsvC,WAAA8C,KACA,SAAAG,GAAA,IAAAA,GAFsGH,UAOtG,OAAAG,EAAA,CAGA,IADAL,EAAAG,EAAAD,EACAA,GAAA,EAA2EA,EAAA/xC,EAAA,IAE3E,MADAkyC,EAAAvyC,EAAAsvC,WAAA8C,MAEAD,EAAAC,GAEA,IAAAG,GAGA,IAAAvyC,EAAAsvC,WAAA8C,EAAA,IAR0GA,KAY1G,GAAAA,GAAA/xC,EAAA,EACA,OAAA0xC,EAAA,uBAAAM,GAEAD,IAEA,SACA,QACA,GAAAA,EAAA/xC,EAAA,OAAAL,EAAAsvC,WAAA8C,EAAA,GACA,OAAAL,EAAA,iBAAAK,GAEA,SAGA,WAAAI,EAEAT,EADAG,EAAAF,GAAAG,EAAAD,EACA,8BAGA,sBAH+CF,GAM/C,IAAAS,EACAV,EAAA,sBAAAE,IAEAU,GAAA,GACAvE,GAmUA0E,CAAAh3C,EAAAg2C,IAGAh2C,GAEAuyC,EAAAD,EAAA,GACAU,EAAA,IAEAN,EAAAjwC,IAAA,WACA,IAAA0nB,EACAkf,EAAAqJ,EAAAtyC,GAAA8D,EAAA7D,OAKA,OAJAqyC,EAAAtyC,EAAAgyC,IACAjoB,EAAAkoB,EACAK,EAAAtyC,EAAAgyC,IAGA/I,aACA+I,SAAAM,EAAAtyC,EACAiyC,6BAAAloB,EACA8sB,mBAAAvE,EAAAtyC,GAAA8D,EAAA7D,OAAA,EACA62C,aAAAhzC,EAAAwuC,EAAAtyC,KAGAsyC,GAmCAlpC,GAAA,SAAAA,EAAAsY,EAAAgK,EAAAzK,GACA,IAAA81B,EACAzE,EAAAP,KACA,SAAAnuC,EAAA2Q,EAAApN,GACA,UAAAyiB,GACAlpB,MAAA4xC,EAAAtyC,EACA0V,SAAAuL,EAAAvL,SACAvO,QAAA,SACA4iB,QAAAxV,GACamX,GAEb,SAAAsrB,EAAApW,EAAArsB,GAEA,IAAAtD,EAAA2vB,aAAAvW,SAAAuW,EAAA/2B,KAAAktC,GAAAzE,EAAA2B,IAAArT,GACA,GAAA3vB,EACA,OAAAA,EAEArN,EAAA2Q,IAAA,iBAAAqsB,EACA,aAAAA,EAAA,UAAA0R,EAAAiD,cAAA,IACA,qBAGA,SAAA0B,EAAArW,EAAArsB,GACA,GAAA+9B,EAAA6B,MAAAvT,GACA,OAAAA,EAEAh9B,EAAA2Q,GAAA,aAAAqsB,EAAA,UAAA0R,EAAAiD,cAAA,KAEA,SAAA2B,EAAAx2C,GACA,IAAAgV,EAAAuL,EAAAvL,SACA,OACAoY,WAAAtgB,EAAA9M,EAAA4xC,EAAAmD,YAAA7nC,KAAA,EACAmgB,SAAArY,GAuDA,OACA48B,cACA5mB,UACAzK,WACAuK,UAhDA,SAAA5rB,EAAAu3C,EAAAC,EAAAn2B,EAAA5Z,GACA,IAAA4J,EACAomC,KACAC,EAAAhF,EACA,IACAgF,EAAAv1C,MAAAnC,GAAA,WAAA2U,EAAA7T,GACA2G,GACA0iB,QAAAxV,EACA7T,QAAA02C,MAGA,QAAAnyB,EAAA,EAAAsb,OAAA,EAAAvgC,OAAA,EAAuDugC,EAAA4W,EAAAlyB,GAAoBA,IAG3E,GAFAjlB,EAAAs3C,EAAAt3C,EACAiR,EAAA8lC,EAAAxW,KACA,CACA,IACAtvB,EAAAqQ,OAAAthB,EAAAo3C,EACAnmC,EAAAsQ,UAAAN,EAEA,MAAA/M,IACAmjC,EAAAv1C,KAAAmP,QAGAomC,EAAAv1C,KAAA,MAGAw1C,EAAAj1C,MACA4mC,WACA5hC,EAAA,KAAAgwC,GAGAhwC,GAAA,QAGA,MAAA6M,GACA,UAAA0V,GACAlpB,MAAAwT,EAAAxT,MAAA02C,EACArtB,QAAA7V,EAAA6V,SACiB2B,EAAAzK,EAAAvL,YAiBjB3R,MAAA,SAAAnE,EAAAyH,EAAAkwC,GACA,IAAAxlB,EAEAylB,EACAC,EACAC,EAHA9zC,EAAA,KAIA+zC,EAAA,GAGA,GAFAH,EAAAD,KAAAC,WAAApuC,EAAAwuC,cAAAL,EAAAC,YAAA,QACAC,EAAAF,KAAAE,WAAA,KAAAruC,EAAAwuC,cAAAL,EAAAE,YAAA,GACA/1B,EAAA5L,cAEA,IADA,IAAA+hC,EAAAn2B,EAAA5L,cAAAgiC,mBACA93C,EAAA,EAAmCA,EAAA63C,EAAA53C,OAA0BD,IAC7DJ,EAAAi4C,EAAA73C,GAAA+3C,QAAAn4C,GAA6D8hB,UAAAgK,UAAAzK,cAG7Du2B,GAAAD,KAAAS,UACAL,GAAAJ,KAAAS,OAAAT,EAAAS,OAAA,IAAAR,GACAE,EAAAhsB,EAAAusB,sBACAh3B,EAAAvL,UAAAgiC,EAAAz2B,EAAAvL,WAAA,EACAgiC,EAAAz2B,EAAAvL,WAAAiiC,EAAA13C,QAIAL,EAAA+3C,GAFA/3C,IAAAoB,QAAA,gBAEAA,QAAA,cAAAy2C,EACA/rB,EAAA1B,SAAA/I,EAAAvL,UAAA9V,EAKA,IACA0yC,EAAAvwC,MAAAnC,EAAA8hB,EAAAi0B,WAAA,SAAAphC,EAAA7T,GACA,UAAAkpB,GACAlpB,QACAyG,KAAA,QACA4iB,QAAAxV,EACAmB,SAAAuL,EAAAvL,UACyBgW,KAEzBmX,GAAAniB,KAAAjW,UAAA1G,MAAAhD,KACAgxB,EAAA,IAAA8Q,GAAA/R,QAAA,KAAA/vB,KAAAg2C,QAAAmB,WACArV,GAAAniB,KAAAjW,UAAAoW,SAAAkR,EACAA,QAAA,EACAA,EAAAC,WAAA,EACAD,EAAA5B,mBAAAO,UAEA,MAAAxc,GACA,OAAA7M,EAAA,IAAAuiB,EAAA1V,EAAAwX,EAAAzK,EAAAvL,WAUA,IAAAyiC,EAAA7F,EAAAjwC,MACA,IAAA81C,EAAAlP,WAAA,CACA,IAAAlf,EAAAouB,EAAAlG,6BACAloB,IACAA,EAAA,qBACA,MAAAouB,EAAArB,aACA/sB,GAAA,iCAEA,MAAAouB,EAAArB,aACA/sB,GAAA,iCAEAouB,EAAAtB,qBACA9sB,GAAA,iCAGAnmB,EAAA,IAAAgmB,GACAziB,KAAA,QACA4iB,UACArpB,MAAAy3C,EAAAnG,SACAt8B,SAAAuL,EAAAvL,UACqBgW,GAErB,IAAA8c,EAAA,SAAAt0B,GAEA,OADAA,EAAAtQ,GAAAsQ,GAAAwX,EAAA9nB,QAEAsQ,aAAA0V,IACA1V,EAAA,IAAA0V,EAAA1V,EAAAwX,EAAAzK,EAAAvL,WAEArO,EAAA6M,IAGA7M,EAAA,KAAA0qB,IAGA,QAAArQ,EAAA02B,eAKA,OAAA5P,IAJA,IAAA/M,GAAA6M,cAAA5c,EAAA8c,GACAQ,IAAAjX,IAmCAglB,WAgBAmB,QAAA,WAIA,IAHA,IAEA33C,EAFAghC,EAAAxgC,KAAAwgC,MACAxP,OAEA,CACA,KACAxxB,EAAAQ,KAAAO,WAIAywB,EAAAjwB,KAAAvB,GAGA,GAAA+xC,EAAA9D,SACA,MAEA,GAAA8D,EAAA+C,KAAA,KACA,MAGA,GADA90C,EAAAQ,KAAAs3C,aAEAtmB,IAAAhhB,OAAAxQ,QAKA,GAFAA,EAAAghC,EAAA+W,cAAAv3C,KAAAw3C,eAAAhX,EAAA13B,MAAA,OACA9I,KAAA8wB,WAAA9wB,KAAAy3C,gBAAAz3C,KAAA03C,SAAA5uC,QAAA9I,KAAA23C,SAEA3mB,EAAAjwB,KAAAvB,OAEA,CAEA,IADA,IAAAo4C,GAAA,EACArG,EAAA6B,MAAA,MACAwE,GAAA,EAEA,IAAAA,EACA,OAIA,OAAA5mB,GAIAzwB,QAAA,WACA,GAAAgxC,EAAAiB,aAAAtzC,OAAA,CACA,IAAAqB,EAAAgxC,EAAAiB,aAAA7vC,QACA,WAAAm/B,GAAA,QAAAvhC,EAAAH,KAAAG,EAAA2sB,cAAA3sB,EAAAZ,MAAAugB,KAMAw3B,UACAG,YAAA,WACA,OAAA7B,EAAAxV,MAAA13B,MAAA,OAOAgvC,OAAA,SAAAC,GACA,IAAAl5C,EACAc,EAAA4xC,EAAAtyC,EACA+4C,GAAA,EAEA,GADAzG,EAAAmB,OACAnB,EAAA6B,MAAA,KACA4E,GAAA,OAEA,GAAAD,EAEA,YADAxG,EAAAoB,UAIA,GADA9zC,EAAA0yC,EAAAgC,UAMA,OADAhC,EAAAuB,SACA,IAAAhR,GAAA,OAAAjjC,EAAAqN,OAAA,GAAArN,EAAAirB,OAAA,EAAAjrB,EAAAK,OAAA,GAAA84C,EAAAr4C,EAAAugB,GAJAqxB,EAAAoB,WAWAvuB,QAAA,WACA,IAAA+B,EAAAorB,EAAA6B,MAAA,MAAA7B,EAAA2B,IAAA,2DACA,GAAA/sB,EACA,OAAA2b,GAAAxf,MAAA6B,YAAAgC,IAAA,IAAA2b,GAAA,QAAA3b,IAUArd,KAAA,WACA,IAAA5H,EACAsiB,EACA6F,EACA1pB,EAAA4xC,EAAAtyC,EAEA,IAAAsyC,EAAA+C,KAAA,WAKA,GAFA/C,EAAAmB,OACAxxC,EAAAqwC,EAAA2B,IAAA,kCACA,CAMA,GAFAhyC,IAAA,IACAmoB,EAAArpB,KAAAi4C,eAAA/2C,MAEAsiB,EAAA6F,EAAArmB,UACAqmB,EAAA6uB,KAEA,OADA3G,EAAAuB,SACAtvB,EAIA,GADAA,EAAAxjB,KAAAmB,UAAAqiB,GACA+tB,EAAA6B,MAAA,KAKA,OADA7B,EAAAuB,SACA,IAAAhR,GAAA,KAAA5gC,EAAAsiB,EAAA7jB,EAAAugB,GAJAqxB,EAAAoB,QAAA,sDAdApB,EAAAuB,UA4BAmF,eAAA,SAAA/2C,GAIA,OACAuhB,MAAAke,EAAAqV,EAAAmC,SAAA,GACAC,QAAAzX,EAAA1W,GACAouB,GAAA1X,EAAA1W,IACyB/oB,EAAAJ,eACzB,SAAA6/B,EAAA39B,EAAAk1C,GACA,OACAl1C,QACAk1C,QAIA,SAAAjuB,IACA,OAAAgsB,EAAAD,EAAA/rB,UAAA,yBAGA9oB,UAAA,SAAAm3C,GACA,IAEAC,EACAr6C,EAHAs6C,EAAAF,MACAG,KAIA,IADAlH,EAAAmB,SACA,CACA,GAAA4F,EACAA,GAAA,MAEA,CAEA,KADAp6C,EAAA83C,EAAAlX,mBAAA9+B,KAAA04C,cAAA1C,EAAAxvC,cAEA,MAEAtI,SAAA,GAAAA,QAAAgB,SACAhB,UAAA,IAEAs6C,EAAAz3C,KAAA7C,GAEAqzC,EAAA6B,MAAA,OAGA7B,EAAA6B,MAAA,MAAoDmF,KACpDA,GAAA,EACAr6C,EAAAs6C,EAAAt5C,OAAA,EAAAs5C,EAAA,GACA,IAAA1W,GAAA1W,MAAAotB,GACAC,EAAA13C,KAAA7C,GACAs6C,MAIA,OADAjH,EAAAuB,SACAyF,EAAAE,EAAAD,GAEAG,QAAA,WACA,OAAA34C,KAAA44C,aACA54C,KAAAqjB,SACArjB,KAAA83C,UACA93C,KAAA64C,qBAOAH,WAAA,WACA,IAAA72C,EACA3D,EAGA,GAFAqzC,EAAAmB,OACA7wC,EAAA0vC,EAAA2B,IAAA,iBAKA,GAAA3B,EAAA6B,MAAA,MAKA,GADAl1C,EAAA83C,EAAA8C,SAGA,OADAvH,EAAAuB,SACA,IAAAhR,GAAA,WAAAjgC,EAAA3D,GAGAqzC,EAAAoB,eATApB,EAAAoB,eAJApB,EAAAoB,WAuBAjQ,IAAA,WACA,IAAAxkC,EACAyB,EAAA4xC,EAAAtyC,EAEA,GADAsyC,EAAAe,mBAAA,EACAf,EAAA8B,KAAA,QAQA,OAJAn1C,EAAA8B,KAAA83C,UAAA93C,KAAAgsB,YAAAhsB,KAAA2yB,YACA4e,EAAA2B,IAAA,sCACA3B,EAAAe,mBAAA,EACA4D,EAAA,KACA,IAAApU,GAAA,UAAA5jC,SACAA,aAAA4jC,GAAAzH,UACAn8B,aAAA4jC,GAAAtH,SACAt8B,EAAA,IAAA4jC,GAAA,UAAA5jC,EAAAyB,KAAAugB,GAVAqxB,EAAAe,mBAAA,GAoBAtmB,SAAA,WACA,IAAA+sB,EACA73C,EACAvB,EAAA4xC,EAAAtyC,EAEA,GADAsyC,EAAAmB,OACA,MAAAnB,EAAAiD,gBAAAtzC,EAAAqwC,EAAA2B,IAAA,gBAEA,UADA6F,EAAAxH,EAAAiD,gBACA,MAAAuE,IAAAxH,EAAAkD,WAAA50C,MAAA,QAEA,IAAAqQ,EAAA8lC,EAAAyB,aAAAv2C,GACA,GAAAgP,EAEA,OADAqhC,EAAAuB,SACA5iC,EAIA,OADAqhC,EAAAuB,SACA,IAAAhR,GAAA,SAAA5gC,EAAAvB,EAAAugB,GAEAqxB,EAAAoB,WAGAqG,cAAA,WACA,IAAAC,EACAt5C,EAAA4xC,EAAAtyC,EACA,SAAAsyC,EAAAiD,gBAAAyE,EAAA1H,EAAA2B,IAAA,mBACA,WAAApR,GAAA,aAAAmX,EAAA,GAAAt5C,EAAAugB,IAQAyS,SAAA,WACA,IAAAzxB,EACAvB,EAAA4xC,EAAAtyC,EACA,SAAAsyC,EAAAiD,gBAAAtzC,EAAAqwC,EAAA2B,IAAA,cACA,WAAApR,GAAA,SAAA5gC,EAAAvB,EAAAugB,IAIAg5B,cAAA,WACA,IAAAD,EACAt5C,EAAA4xC,EAAAtyC,EACA,SAAAsyC,EAAAiD,gBAAAyE,EAAA1H,EAAA2B,IAAA,oBACA,WAAApR,GAAA,aAAAmX,EAAA,GAAAt5C,EAAAugB,IAUAmD,MAAA,WACA,IAAAd,EAEA,GADAgvB,EAAAmB,OACA,MAAAnB,EAAAiD,gBAAAjyB,EAAAgvB,EAAA2B,IAAA,oEACA3wB,EAAA,GAEA,OADAgvB,EAAAuB,SACA,IAAAhR,GAAA,MAAAvf,EAAA,QAAA9f,EAAA8f,EAAA,IAGAgvB,EAAAoB,WAEAwG,aAAA,WACA5H,EAAAmB,OACA,IAAAJ,EAAAf,EAAAe,kBACAf,EAAAe,mBAAA,EACA,IAAAnsB,EAAAorB,EAAA2B,IAAA,6BAEA,GADA3B,EAAAe,oBACAnsB,EAAA,CAIAorB,EAAAoB,UACA,IAAAtvB,EAAAye,GAAAxf,MAAA6B,YAAAgC,GACA,OAAA9C,GACAkuB,EAAA8B,KAAAltB,GACA9C,QAFA,EALAkuB,EAAAuB,UAeA8F,UAAA,WACA,IAAArH,EAAAoD,iBAAA,CAGA,IAAAz2C,EAAAqzC,EAAA2B,IAAA,kCACA,OAAAh1C,EACA,IAAA4jC,GAAA,UAAA5jC,EAAA,GAAAA,EAAA,SADA,IASA26C,kBAAA,WACA,IAAAO,EAEA,GADAA,EAAA7H,EAAA2B,IAAA,uCAEA,WAAApR,GAAA,kBAAAsX,EAAA,KAQAC,WAAA,WACA,IAAAC,EACA35C,EAAA4xC,EAAAtyC,EACAsyC,EAAAmB,OACA,IAAA6G,EAAAhI,EAAA6B,MAAA,KAEA,GADA7B,EAAA6B,MAAA,KACA,CAKA,GADAkG,EAAA/H,EAAA2B,IAAA,WAGA,OADA3B,EAAAuB,SACA,IAAAhR,GAAA,WAAAwX,EAAAxvB,OAAA,EAAAwvB,EAAAp6C,OAAA,GAAA0sB,QAAA2tB,GAAA55C,EAAAugB,GAEAqxB,EAAAoB,QAAA,sCARApB,EAAAoB,YAgBA3mB,SAAA,WACA,IAAA9qB,EACA,SAAAqwC,EAAAiD,gBAAAtzC,EAAAqwC,EAAA2B,IAAA,mBACA,OAAAhyC,EAAA,IAWAu2C,aAAA,SAAA+B,GACA,IAAAva,EACAhgC,EAAAsyC,EAAAtyC,EACAw6C,IAAAD,EACAt4C,EAAAs4C,EAEA,GADAjI,EAAAmB,OACAxxC,GAAA,MAAAqwC,EAAAiD,gBACAtzC,EAAAqwC,EAAA2B,IAAA,0BAEA,KADAjU,EAAAj/B,KAAAwgC,MAAAkZ,iBACAD,GAAA,OAAAlI,EAAA8B,KAAA,cAAAnyC,EAAA,IAEA,YADAqwC,EAAAoB,QAAA,2CAGA8G,IACAv4C,IAAA,IAEA,IAAA4H,EAAA,IAAAg5B,GAAAjD,aAAA39B,EAAAjC,EAAAihB,GACA,OAAAu5B,GAAAzD,EAAA10C,OACAiwC,EAAAuB,SACAhqC,IAGAyoC,EAAAuB,SACA,IAAAhR,GAAA/C,eAAAj2B,EAAAm2B,EAAAhgC,EAAAihB,IAGAqxB,EAAAoB,WAKAznB,OAAA,SAAAyuB,GACA,IAAAruC,EACA6H,EAEAgrB,EACAnU,EACAkB,EAHAvrB,EAAA4xC,EAAAtyC,EAIA,GAAAsyC,EAAA8B,KAAAsG,EAAA,yBAGA,GAGA,IAFAxb,EAAA,KACA7yB,EAAA,OACA6yB,EAAAoT,EAAA2B,IAAA,0BACA//B,EAAAnT,KAAAoK,YAIAkB,EACAA,EAAAvK,KAAAoS,GAGA7H,GAAA6H,GAGAgrB,OAAA,GACA7yB,GACAzI,EAAA,0CAEAqoB,EAAA,IAAA4W,GAAA,WAAAA,GAAA,SAAAx2B,GAAA6yB,EAAAx+B,EAAAugB,GACA8J,EACAA,EAAAjpB,KAAAmqB,GAGAlB,GAAAkB,SAEqBqmB,EAAA6B,MAAA,MAKrB,OAJA6C,EAAA,OACA0D,GACA1D,EAAA,MAEAjsB,IAKAstB,WAAA,WACA,OAAAt3C,KAAAkrB,QAAA,IAKAsV,OAiBA13B,KAAA,SAAA2wC,EAAAG,GACA,IAEA3a,EAEA3zB,EACAkY,EACAq2B,EANA36B,EAAAqyB,EAAAiD,cACAzoB,GAAA,EAEApsB,EAAA4xC,EAAAtyC,EAIA,SAAAigB,GAAA,MAAAA,EAAA,CAKA,GAFAqyB,EAAAmB,OACApnC,EAAAtL,KAAAsL,WACA,CASA,GARAimC,EAAA6B,MAAA,OACA5vB,EAAAxjB,KAAAwjB,MAAA,GAAAA,KACA0yB,EAAA,KACA2D,GAAA,IAEA,IAAAD,IACA3a,EAAAj/B,KAAA05C,gBAEA,IAAAE,IAAA3a,EAEA,YADAsS,EAAAoB,UAGA,GAAA8G,IAAAxa,IAAA4a,EAGA,YADAtI,EAAAoB,UAMA,IAHA8G,GAAAzD,EAAAjqB,cACAA,GAAA,GAEA0tB,GAAAzD,EAAA10C,MAAA,CACAiwC,EAAAuB,SACA,IAAAtS,EAAA,IAAAsB,GAAAtB,MAAA,KAAAl1B,EAAAkY,EAAA7jB,EAAAugB,GAAA+e,GAAAlT,GACA,OAAAkT,EACA,IAAA6C,GAAA/C,eAAAyB,EAAAvB,GAGAuB,GAIA+Q,EAAAoB,YAMArnC,SAAA,WAOA,IANA,IAAAA,EACA6H,EACAzG,EACAotC,EACAC,EACAC,EAAA,wDAEAD,EAAAxI,EAAAtyC,EACAkU,EAAAo+B,EAAA2B,IAAA8G,IAIAF,EAAA,IAAAhY,GAAA,QAAAp1B,EAAAyG,GAAA,EAAA4mC,EAAA75B,GACA5U,EACAA,EAAAvK,KAAA+4C,GAGAxuC,GAAAwuC,GAEAptC,EAAA6kC,EAAA6B,MAAA,KAEA,OAAA9nC,GAEAkY,KAAA,SAAAy2B,GACA,IAKA1B,EACA2B,EACAh5C,EACAi5C,EACAj8C,EACA2hC,EACA4B,EAXAiW,EAAA1B,EAAA0B,SACArU,GAAwC7f,KAAA,KAAA4b,UAAA,GACxCgb,KACA3B,KACAD,KAQA6B,GAAA,EAEA,IADA9I,EAAAmB,SACA,CACA,GAAAuH,EACApa,EAAAmW,EAAAlX,mBAAAkX,EAAAxvC,iBAEA,CAEA,GADA+qC,EAAAiB,aAAAtzC,OAAA,EACAqyC,EAAA8B,KAAA,QACAhQ,EAAAjE,UAAA,EACAmS,EAAA6B,MAAA,OAA4DmF,IAC5DA,GAAA,IAEAA,EAAAE,EAAAD,GACAz3C,MAA+Cq+B,UAAA,IAC/C,MAEAS,EAAA6X,EAAA1rB,YAAA0rB,EAAA/kB,YAAA+kB,EAAAiB,WAAAjB,EAAAtzB,WAAApkB,KAAA8I,MAAA,GAEA,IAAA+2B,IAAAwa,EACA,MAEAF,EAAA,KACAta,EAAApG,mBACAoG,EAAApG,oBAEAv7B,EAAA2hC,EACA,IAAAlE,EAAA,KAUA,GATAse,EAEApa,EAAA3hC,OAAA,GAAA2hC,EAAA3hC,MAAAgB,SACAy8B,EAAAkE,EAAA3hC,MAAA,IAIAy9B,EAAAkE,EAEAlE,iBAAAmG,GAAAzH,UAAAsB,aAAAmG,GAAAtH,UACA,GAAA+W,EAAA6B,MAAA,MAQA,GAPAgH,EAAAl7C,OAAA,IACAq5C,GACA11C,EAAA,yCAEAq3C,GAAA,KAEAh8C,EAAA83C,EAAAlX,mBAAAkX,EAAAxvC,cACA,CACA,IAAAyzC,EAMA,OAFA1I,EAAAoB,UACAtP,EAAA7f,QACA6f,EALAxgC,EAAA,iDAQAs3C,EAAAj5C,EAAAy6B,EAAAz6B,UAEA,GAAAqwC,EAAA8B,KAAA,QACA,IAAA4G,EAAA,CACA5W,EAAAjE,UAAA,EACAmS,EAAA6B,MAAA,OAAgEmF,IAChEA,GAAA,IAEAA,EAAAE,EAAAD,GACAz3C,MAAmDG,KAAA2+B,EAAA3+B,KAAAk+B,UAAA,IACnD,MAGAqC,GAAA,OAGAwY,IACA/4C,EAAAi5C,EAAAxe,EAAAz6B,KACAhD,EAAA,MAGAA,GACAk8C,EAAAr5C,KAAA7C,GAEAs6C,EAAAz3C,MAA4CG,KAAAi5C,EAAAj8C,QAAAujC,WAC5C8P,EAAA6B,MAAA,KACAiH,GAAA,IAGAA,EAAyD,MAAzD9I,EAAA6B,MAAA,OACAmF,KACA2B,GACAr3C,EAAA,yCAEA01C,GAAA,EACA6B,EAAAl7C,OAAA,IACAhB,EAAA,IAAA4jC,GAAA,MAAAsY,IAEA3B,EAAA13C,MAAoDG,OAAAhD,QAAAujC,WACpDvgC,EAAA,KACAk5C,KACAF,GAAA,GAKA,OAFA3I,EAAAuB,SACAzP,EAAA7f,KAAA+0B,EAAAE,EAAAD,EACAnV,GAqBAkU,WAAA,WACA,IAAAr2C,EAEArB,EACAixB,EACAwpB,EAHAnb,KAIAC,GAAA,EACA,WAAAmS,EAAAiD,eAAA,MAAAjD,EAAAiD,eACAjD,EAAA+C,KAAA,aAKA,GAFA/C,EAAAmB,OACA7yC,EAAA0xC,EAAA2B,IAAA,gEACA,CACAhyC,EAAArB,EAAA,GACA,IAAA06C,EAAAv6C,KAAAwjB,MAAA,GAQA,GAPA2b,EAAAob,EAAA/2B,KACA4b,EAAAmb,EAAAnb,UAMAmS,EAAA6B,MAAA,KAEA,YADA7B,EAAAoB,QAAA,uBAQA,GALApB,EAAAiB,aAAAtzC,OAAA,EACAqyC,EAAA8B,KAAA,UACAiH,EAAArE,EAAAD,EAAAwE,WAAA,uBAEA1pB,EAAAklB,EAAAx3C,QAGA,OADA+yC,EAAAuB,SACA,IAAAhR,GAAAtB,MAAA,WAAAt/B,EAAAi+B,EAAArO,EAAAwpB,EAAAlb,GAGAmS,EAAAoB,eAIApB,EAAAoB,WAGA+G,YAAA,WACA,IAAA9oB,EACAqO,KACA,SAAAsS,EAAAiD,cAAA,CAGA,QAGA,GAFAjD,EAAAmB,SACA9hB,EAAA5wB,KAAAy6C,gBACA,KAAA7pB,EAAA,CACA2gB,EAAAoB,UACA,MAEA1T,EAAAl+B,KAAA6vB,GACA2gB,EAAAuB,SAEA,OAAA7T,EAAA//B,OAAA,EACA+/B,OADA,IAIAwb,YAAA,WAEA,GADAlJ,EAAAmB,OACAnB,EAAA6B,MAAA,MAIA,IAAAlyC,EAAAqwC,EAAA2B,IAAA,gCACA,GAAA3B,EAAA6B,MAAA,KAIA,OAAAlyC,GAAA,KAAAA,GACAqwC,EAAAuB,SACA5xC,QAEAqwC,EAAAoB,UAPApB,EAAAoB,eALApB,EAAAoB,YAmBAmG,OAAA,WACA,IAAApB,EAAA13C,KAAA03C,SACA,OAAA13C,KAAAO,WAAAm3C,EAAAiB,WAAAjB,EAAA1rB,YAAA0rB,EAAAhV,OACAgV,EAAA/kB,YAAA+kB,EAAA5uC,QAAA4uC,EAAAtzB,WAAApkB,KAAAwgC,MAAA13B,MAAA,IACA4uC,EAAA2B,cAOA/3C,IAAA,WACA,OAAAiwC,EAAA6B,MAAA,MAA+C7B,EAAA+C,KAAA,MAO/C6D,QAAA,WACA,IAAAj6C,EAEA,GAAAqzC,EAAA2B,IAAA,cASA,OANAh1C,EAAAqzC,EAAA2B,IAAA,WAGAh1C,EAAA,MADAA,EAAA+3C,EAAAD,EAAA0B,SAAA1rB,SAAA,0BACmC9qB,KAAAmjB,MAAA,QAEnC6xB,EAAA,KACA,IAAApU,GAAA/G,OAAA,oBAAA78B,EAAA,MAcAkM,QAAA,WACA,IAAA+I,EACAzG,EACA9K,EACAjC,EAAA4xC,EAAAtyC,EAsBA,GArBAyN,EAAA1M,KAAAglB,cACA7R,EAAAo+B,EAAA2B,IAAA,uBACA3B,EAAA2B,IAAA,+EACA3B,EAAA6B,MAAA,MAAA7B,EAAA6B,MAAA,MAAApzC,KAAA06C,aACAnJ,EAAA2B,IAAA,kBAAA3B,EAAA2B,IAAA,iBACAlzC,KAAA03C,SAAAsB,mBAEAzH,EAAAmB,OACAnB,EAAA6B,MAAA,MACAxxC,EAAA5B,KAAAwwB,UAAA,KAAA+gB,EAAA6B,MAAA,MACAjgC,EAAA,IAAA2uB,GAAA,MAAAlgC,GACA2vC,EAAAuB,UAGAvB,EAAAoB,QAAA,uBAIApB,EAAAuB,UAGA3/B,EACA,WAAA2uB,GAAA,QAAAp1B,EAAAyG,eAAA2uB,GAAAzH,SAAA16B,EAAAugB,IAYA8E,WAAA,WACA,IAAAtY,EAAA6kC,EAAAiD,cACA,SAAA9nC,EAAA,CACA6kC,EAAAmB,OACA,IAAAiI,EAAApJ,EAAA2B,IAAA,gBACA,GAAAyH,EAEA,OADApJ,EAAAuB,SACA,IAAAhR,GAAA,WAAA6Y,GAEApJ,EAAAoB,UAEA,SAAAjmC,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,EAAA,CAMA,IALA6kC,EAAAtyC,IACA,MAAAyN,GAAA,MAAA6kC,EAAAiD,gBACA9nC,EAAA,KACA6kC,EAAAtyC,KAEAsyC,EAAAwB,gBACAxB,EAAAtyC,IAEA,WAAA6iC,GAAA,WAAAp1B,GAEA,OAAA6kC,EAAAwB,cAAA,GACA,IAAAjR,GAAA,gBAGA,IAAAA,GAAA,kBAYAtR,SAAA,SAAAoqB,GACA,IACAtvC,EACA0e,EACAtd,EACAyG,EACAo3B,EACAsQ,EACA5wB,EAPAtqB,EAAA4xC,EAAAtyC,EASA,IADA27C,GAAA,IAAAA,GACAA,IAAA5wB,EAAAhqB,KAAAkrB,WAAA0vB,IAAAC,EAAAtJ,EAAA8B,KAAA,WAAAlgC,EAAAnT,KAAAoK,cACAywC,EACA5wB,EAAAgsB,EAAAj2C,KAAAw6C,WAAA,sBAEAvwB,EACApnB,EAAA,qDAEAmnB,EAEAugB,EADAA,EACAA,EAAAv6B,OAAAga,GAGAA,GAIAugB,GACA1nC,EAAA,kDAEA6J,EAAA6kC,EAAAiD,cACAlpC,EACAA,EAAAvK,KAAAoS,GAGA7H,GAAA6H,GAEAA,EAAA,MAEA,MAAAzG,GAAoC,MAAAA,GAAa,MAAAA,GAAa,MAAAA,GAAA,MAAAA,KAI9D,GAAApB,EACA,WAAAw2B,GAAA,SAAAx2B,EAAAi/B,EAAAtgB,EAAAtqB,EAAAugB,GAEAqqB,GACA1nC,EAAA,2EAGAmtB,UAAA,WAGA,IAFA,IAAA9Q,EACA8Q,GAEA9Q,EAAAlf,KAAAwwB,cAIAR,EACAA,EAAAjvB,KAAAme,GAGA8Q,GAAA9Q,GAEAqyB,EAAAiB,aAAAtzC,OAAA,EACAggB,EAAA+K,WAAA+F,EAAA9wB,OAAA,GACA2D,EAAA,2DAEA0uC,EAAA6B,MAAA,OAGAl0B,EAAA+K,WACApnB,EAAA,2DAEA0uC,EAAAiB,aAAAtzC,OAAA,EAEA,OAAA8wB,GAEA0qB,UAAA,WACA,GAAAnJ,EAAA6B,MAAA,MAGA,IACAvxC,EACA85B,EACAra,EAHAo2B,EAAA13C,KAAA03C,SAYA,OARA71C,EAAA61C,EAAAsB,mBACAn3C,EAAAo0C,EAAA,oDAEA30B,EAAAiwB,EAAA2B,IAAA,iBAEAvX,EAAA+b,EAAAI,UAAAvG,EAAA2B,IAAA,aAAA3B,EAAA2B,IAAA,YAAAwE,EAAAsB,iBAEA9C,EAAA,KACA,IAAApU,GAAA,UAAAjgC,EAAAyf,EAAAqa,KAMAn9B,MAAA,WACA,IAAAw8B,EACA,GAAAuW,EAAA6B,MAAA,OAA4CpY,EAAAh7B,KAAAm3C,YAAA5F,EAAA6B,MAAA,KAC5C,OAAApY,GAGA8f,aAAA,WACA,IAAAt8C,EAAAwB,KAAAxB,QAIA,OAHAA,IACAA,EAAA,IAAAsjC,GAAA/R,QAAA,KAAAvxB,IAEAA,GAEAsgC,gBAAA,WACA,IAAAyb,EACApb,EACAC,EAEA,GADAmS,EAAAmB,QACAnB,EAAA2B,IAAA,aAQA/T,GADAob,EAAAv6C,KAAAwgC,MAAAhd,MAAA,IACAA,KACA4b,EAAAmb,EAAAnb,SACAmS,EAAA6B,MAAA,MAVA,CAeA,IAAA0H,EAAA96C,KAAA86C,eACA,GAAAA,EAEA,OADAvJ,EAAAuB,SACA3T,EACA,IAAA2C,GAAAtB,MAAAtB,WAAA,KAAAC,EAAA2b,EAAA,KAAA1b,GAEA,IAAA0C,GAAAjL,gBAAAikB,GAEAvJ,EAAAoB,eAZApB,EAAAoB,WAiBA7hB,QAAA,WACA,IAAAd,EACAC,EACAxD,EAMA,GALA8kB,EAAAmB,OACA/xB,EAAAiM,kBACAH,EAAA0pB,EAAA5E,EAAAtyC,KAEA+wB,EAAAhwB,KAAAgwB,eACAC,EAAAjwB,KAAAxB,SAAA,CACA+yC,EAAAuB,SACA,IAAAhiB,EAAA,IAAAgR,GAAA,QAAA9R,EAAAC,EAAAtP,EAAAuP,eAIA,OAHAvP,EAAAiM,kBACAkE,EAAArE,aAEAqE,EAGAygB,EAAAoB,WAGA6E,YAAA,WACA,IAAAt2C,EACAhD,EAEA68C,EAEAhvB,EACApD,EACA1D,EALAtlB,EAAA4xC,EAAAtyC,EAEAyN,EAAA6kC,EAAAiD,cAIA,SAAA9nC,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,EAKA,GAFA6kC,EAAAmB,OACAxxC,EAAAlB,KAAAgsB,YAAAhsB,KAAAg7C,eACA,CASA,IARA/1B,EAAA,iBAAA/jB,KAEAhD,EAAA8B,KAAA8+B,qBAEAic,GAAA,GAGAxJ,EAAAiB,aAAAtzC,OAAA,GACAhB,EAAA,CAcA,GAVAyqB,GAAA1D,GAAA/jB,EAAAhC,OAAA,GAAAgC,EAAAkL,MAAAlO,MAGAA,EADAgD,EAAA,GAAAhD,OAAA,OAAAgD,EAAA,GAAAhD,MAAAmmB,MAAA,KACArkB,KAAAi7C,kBAKAj7C,KAAAk7C,iBAKA,OAFA3J,EAAAuB,SAEA,IAAAhR,GAAA,YAAA5gC,EAAAhD,GAAA,EAAAyqB,EAAAhpB,EAAAugB,GAEAhiB,IACAA,EAAA8B,KAAA9B,SAEAA,EACA6tB,EAAA/rB,KAAA+rB,YAEA9G,IAEA/mB,EAAA8B,KAAAi7C,mBAGA,GAAA/8C,IAAA8B,KAAAsB,OAAAy5C,GAEA,OADAxJ,EAAAuB,SACA,IAAAhR,GAAA,YAAA5gC,EAAAhD,EAAA6tB,EAAApD,EAAAhpB,EAAAugB,GAGAqxB,EAAAoB,eAIApB,EAAAoB,WAGAuI,eAAA,WACA,IAAAv7C,EAAA4xC,EAAAtyC,EACAY,EAAA0xC,EAAA2B,IAAA,6BACA,GAAArzC,EACA,WAAAiiC,GAAA,UAAAjiC,EAAA,GAAAF,IAYAs7C,gBAAA,SAAAE,GACA,IAAAl8C,EACAkU,EACAtJ,EACA3L,EACAi1C,EAAAgI,GAAA,IACAx7C,EAAA4xC,EAAAtyC,EACAiR,KACA,SAAAkrC,IACA,IAAAhH,EAAA7C,EAAAiD,cACA,uBAAArB,EACAiB,IAAAjB,EAGAA,EAAAnnC,KAAAooC,GAGA,IAAAgH,IAAA,CAGAl9C,KACA,IACAiV,EAAAnT,KAAAO,WAEArC,EAAA6C,KAAAoS,IAGAA,EAAAnT,KAAA84C,WAEA56C,EAAA6C,KAAAoS,SAEqBA,GAErB,GADAtJ,EAAAuxC,IACAl9C,EAAAgB,OAAA,GAEA,GADAhB,EAAA,IAAA4jC,GAAA,WAAA5jC,GACA2L,EACA,OAAA3L,EAGAgS,EAAAnP,KAAA7C,GAGA,MAAAqzC,EAAAkD,YACAvkC,EAAAnP,KAAA,IAAA+gC,GAAAtW,UAAA,IAAA7rB,IAKA,GAFA4xC,EAAAmB,OACAx0C,EAAAqzC,EAAAmC,YAAAP,GACA,CAIA,GAHA,iBAAAj1C,GACA2E,EAAA,aAAA3E,EAAA,aAEA,IAAAA,EAAAgB,QAAA,MAAAhB,EAAA,GAEA,OADAqzC,EAAAuB,SACA,IAAAhR,GAAAtW,UAAA,GAAA7rB,GAEA,IAAA0E,OAAA,EACA,IAAApF,EAAA,EAAmCA,EAAAf,EAAAgB,OAAkBD,IAErD,GADAoF,EAAAnG,EAAAe,GACAmD,MAAAC,QAAAgC,GAEA6L,EAAAnP,KAAA,IAAA+gC,GAAA/G,OAAA12B,EAAA,GAAAA,EAAA,MAAA1E,EAAAugB,QAEA,CACAjhB,IAAAf,EAAAgB,OAAA,IACAmF,IAAAwgB,QAGA,IAAAoW,EAAA,IAAA6G,GAAA/G,OAAA,IAAA12B,GAAA,EAAA1E,EAAAugB,GACA+a,EAAAC,cAAA,aACAD,EAAAE,UAAA,cACAjrB,EAAAnP,KAAAk6B,GAIA,OADAsW,EAAAuB,SACA,IAAAhR,GAAA3I,WAAAjpB,GAAA,GAEAqhC,EAAAoB,YAYA0I,OAAA,WACA,IAAAttB,EACAgO,EACAp8B,EAAA4xC,EAAAtyC,EACAq8C,EAAA/J,EAAA2B,IAAA,gBACA,GAAAoI,EAAA,CACA,IAAAhzC,GAAAgzC,EAAAt7C,KAAAu7C,gBAAA,UACA,GAAAxtB,EAAA/tB,KAAA03C,SAAAI,UAAA93C,KAAA03C,SAAAhV,MAOA,OANA3G,EAAA/7B,KAAAw7C,gBACAjK,EAAA6B,MAAA,OACA7B,EAAAtyC,EAAAU,EACAkD,EAAA,gEAEAk5B,KAAA,IAAA+F,GAAA,MAAA/F,GACA,IAAA+F,GAAA,OAAA/T,EAAAgO,EAAAzzB,EAAA3I,EAAAugB,GAGAqxB,EAAAtyC,EAAAU,EACAkD,EAAA,gCAIA04C,cAAA,WACA,IAAAE,EAEAC,EACAx9C,EAFAoK,KAIA,IAAAipC,EAAA6B,MAAA,KACA,YAEA,GAEA,GADAqI,EAAAz7C,KAAA27C,eACA,CAGA,OADAz9C,GAAA,EADAw9C,EAAAD,GAGA,UACAC,EAAA,OACAx9C,GAAA,EACA,MACA,WACAw9C,EAAA,WACAx9C,GAAA,EAIA,GADAoK,EAAAozC,GAAAx9C,GACAqzC,EAAA6B,MAAA,KACA,aAGqBqI,GAErB,OADAvF,EAAA,KACA5tC,GAEAqzC,aAAA,WACA,IAAArqC,EAAAigC,EAAA2B,IAAA,uDACA,GAAA5hC,EACA,OAAAA,EAAA,IAGAsqC,aAAA,WACA,IAEAzoC,EACAqsB,EAHAkY,EAAA13C,KAAA03C,SACAr3B,KAGAkxB,EAAAmB,OACA,IACAv/B,EAAAukC,EAAAtzB,WAAAszB,EAAA1rB,YAAA0rB,EAAAG,eAEAx3B,EAAAtf,KAAAoS,GAEAo+B,EAAA6B,MAAA,OACA5T,EAAAx/B,KAAA2yB,WACAxf,EAAAnT,KAAA9B,QACAqzC,EAAA6B,MAAA,KACA5T,GAAArsB,EACAkN,EAAAtf,KAAA,IAAA+gC,GAAA,UAAAA,GAAA,YAAAtC,EAAArsB,EAAA,UAAAo+B,EAAAtyC,EAAAihB,GAAA,KAEA/M,EACAkN,EAAAtf,KAAA,IAAA+gC,GAAA,MAAA3uB,IAGAtQ,EAAA,yCAIAA,EAAA,sCAGqBsQ,GAErB,GADAo+B,EAAAuB,SACAzyB,EAAAnhB,OAAA,EACA,WAAA4iC,GAAA,WAAAzhB,IAGAm7B,cAAA,WACA,IAEAroC,EAFAukC,EAAA13C,KAAA03C,SACA3b,KAEA,GAEA,GADA5oB,EAAAnT,KAAA47C,gBAGA,GADA7f,EAAAh7B,KAAAoS,IACAo+B,EAAA6B,MAAA,KACA,WAKA,IADAjgC,EAAAukC,EAAA1rB,YAAA0rB,EAAAG,iBAEA9b,EAAAh7B,KAAAoS,IACAo+B,EAAA6B,MAAA,MACA,YAIqBjgC,GACrB,OAAA4oB,EAAA78B,OAAA,EAAA68B,EAAA,MAEA1pB,MAAA,WACA,IAAA0pB,EACA9L,EACA5d,EACAoa,EACA9sB,EAAA4xC,EAAAtyC,EAKA,GAJA0hB,EAAAiM,kBACAH,EAAA0pB,EAAAx2C,IAEA4xC,EAAAmB,OACAnB,EAAA8B,KAAA,UAWA,OAVAtX,EAAA/7B,KAAAw7C,iBACAvrB,EAAAjwB,KAAAxB,UAEAqE,EAAA,iEAEA0uC,EAAAuB,SACAzgC,EAAA,IAAAyvB,GAAA,MAAA7R,EAAA8L,EAAAp8B,EAAAugB,GACAS,EAAAiM,kBACAva,EAAAoa,aAEApa,EAEAk/B,EAAAoB,WAOAnO,OAAA,WACA,IAAAzW,EACAvK,EACAlb,EACA3I,EAAA4xC,EAAAtyC,EAEA,GADAsyC,EAAA2B,IAAA,gBACA,CAWA,GARA5qC,GAFAkb,EAAAxjB,KAAA67C,eAGAA,WAAAr4B,EACAiZ,UAAA,IAIuCA,UAAA,GAEvC1O,EAAA/tB,KAAA03C,SAAAI,UAAA93C,KAAA03C,SAAAhV,MAKA,OAJA6O,EAAA6B,MAAA,OACA7B,EAAAtyC,EAAAU,EACAkD,EAAA,kCAEA,IAAAi/B,GAAA,OAAA/T,EAAA,KAAAzlB,EAAA3I,EAAAugB,GAGAqxB,EAAAtyC,EAAAU,EACAkD,EAAA,iCAIAg5C,WAAA,WAGA,GADAtK,EAAAmB,QACAnB,EAAA6B,MAAA,KAEA,OADA7B,EAAAoB,UACA,KAEA,IAAAnvB,EAAA+tB,EAAA2B,IAAA,sBACA,OAAA1vB,EAAA,IACA+tB,EAAAuB,SACAtvB,EAAA,GAAAqB,SAGA0sB,EAAAoB,UACA,OAQAgF,OAAA,WACA,IACAz2C,EACAhD,EACA+xB,EACA6rB,EACAC,EACAC,EACAC,EAPAt8C,EAAA4xC,EAAAtyC,EAQAi9C,GAAA,EACA3lB,GAAA,EACA,SAAAgb,EAAAiD,cAAA,CAIA,GADAt2C,EAAA8B,KAAA,UAAAA,KAAAwkC,UAAAxkC,KAAAqS,QAEA,OAAAnU,EAIA,GAFAqzC,EAAAmB,OACAxxC,EAAAqwC,EAAA2B,IAAA,aACA,CAOA,OAJA4I,EAAA56C,EACA,KAAAA,EAAAgL,OAAA,IAAAhL,EAAAZ,QAAA,WACAw7C,EAAA,IAAA56C,EAAAmjB,MAAAnjB,EAAAZ,QAAA,WAEAw7C,GACA,eACAC,GAAA,EACAG,GAAA,EACA,MACA,iBACAF,GAAA,EACAE,GAAA,EACA,MACA,iBACA,qBACAH,GAAA,EACA,MACA,gBACA,gBACAE,GAAA,EACA1lB,GAAA,EACA,MACA,QACA0lB,GAAA,EA+BA,GA5BA1K,EAAAiB,aAAAtzC,OAAA,EACA68C,GACA79C,EAAA8B,KAAA84C,WAEAj2C,EAAA,YAAA3B,EAAA,eAGA86C,GACA99C,EAAA8B,KAAAwG,eAEA3D,EAAA,YAAA3B,EAAA,eAGA+6C,IACA/9C,EAAA8B,KAAAi7C,gBAAA,SACAiB,EAAA,MAAA3K,EAAAiD,cACAt2C,EAKAA,UACAA,EAAA,MALAg+C,GAAA,MAAA3K,EAAAiD,eACA3xC,EAAA3B,EAAA,gDAOAg7C,IACAjsB,EAAAjwB,KAAA86C,gBAEA7qB,IAAAisB,GAAAh+C,GAAAqzC,EAAA6B,MAAA,KAEA,OADA7B,EAAAuB,SACA,IAAAhR,GAAA,OAAA5gC,EAAAhD,EAAA+xB,EAAAtwB,EAAAugB,EAAAS,EAAAiM,gBAAAupB,EAAAx2C,GAAA,KAAA42B,GAEAgb,EAAAoB,QAAA,qCAUAz0C,MAAA,WACA,IAAAiV,EACAinC,KACAz6C,EAAA4xC,EAAAtyC,EACA,GAEA,IADAkU,EAAAnT,KAAAwG,gBAEA4zC,EAAAr5C,KAAAoS,IACAo+B,EAAA6B,MAAA,MACA,YAGqBjgC,GACrB,GAAAinC,EAAAl7C,OAAA,EACA,WAAA4iC,GAAA,MAAAsY,EAAAz6C,IAGAosB,UAAA,WACA,SAAAwlB,EAAAiD,cACA,OAAAjD,EAAA2B,IAAA,kBAGAiJ,IAAA,WACA,IAAAr3C,EACAqO,EAEA,GADAo+B,EAAAmB,OACAnB,EAAA6B,MAAA,KAEA,OADAtuC,EAAA9E,KAAAo8C,aACA7K,EAAA6B,MAAA,MACA7B,EAAAuB,UACA3/B,EAAA,IAAA2uB,GAAA,YAAAh9B,KACAw0B,QAAA,EACAnmB,QAEAo+B,EAAAoB,QAAA,gBAGApB,EAAAoB,WAEA0J,eAAA,WACA,IAAA39B,EACA5Z,EACAwc,EACAg7B,EACApjB,EAEA,GADAxa,EAAA1e,KAAAu8C,UACA,CAEA,IADArjB,EAAAqY,EAAAwB,cAAA,IAEAxB,EAAA+C,KAAA,aADA,CAMA,GAFA/C,EAAAmB,SACApxB,EAAAiwB,EAAA6B,MAAA,MAAA7B,EAAA6B,MAAA,MAAA7B,EAAA8B,KAAA,OACA,CACA9B,EAAAuB,SACA,MAGA,KADAhuC,EAAA9E,KAAAu8C,WACA,CACAhL,EAAAoB,UACA,MAEApB,EAAAuB,SACAp0B,EAAA8a,YAAA,EACA10B,EAAA00B,YAAA,EACA8iB,EAAA,IAAAxa,GAAA,UAAAxgB,GAAAg7B,GAAA59B,EAAA5Z,GAAAo0B,GACAA,EAAAqY,EAAAwB,cAAA,GAEA,OAAAuJ,GAAA59B,IAGA09B,SAAA,WACA,IAAA19B,EACA5Z,EACAwc,EACAg7B,EACApjB,EAEA,GADAxa,EAAA1e,KAAAq8C,iBACA,CAEA,IADAnjB,EAAAqY,EAAAwB,cAAA,IAEAzxB,EAAAiwB,EAAA2B,IAAA,cAAAha,IAAAqY,EAAA6B,MAAA,MAAA7B,EAAA6B,MAAA,SAIAtuC,EAAA9E,KAAAq8C,mBAIA39B,EAAA8a,YAAA,EACA10B,EAAA00B,YAAA,EACA8iB,EAAA,IAAAxa,GAAA,UAAAxgB,GAAAg7B,GAAA59B,EAAA5Z,GAAAo0B,GACAA,EAAAqY,EAAAwB,cAAA,GAEA,OAAAuJ,GAAA59B,IAGA87B,WAAA,WACA,IAAA11C,EACAyc,EAEA0I,EADAtqB,EAAA4xC,EAAAtyC,EAGA,GADA6F,EAAA9E,KAAAiqB,WAAA,GACA,CACA,KACAsnB,EAAA+C,KAAA,qBAAA/C,EAAA6B,MAAA,OAGA7xB,EAAAvhB,KAAAiqB,WAAA,KAIAA,EAAA,IAAA6X,GAAA,eAAA7X,GAAAnlB,EAAAyc,EAAA5hB,GAEA,OAAAsqB,GAAAnlB,IAGAmlB,UAAA,SAAAuyB,GACA,IAAAtsC,EACAusC,EACAC,EAKA,GADAxsC,EAAAlQ,KAAA28C,aAAAH,GACA,CAIA,GADAC,EANAlL,EAAA8B,KAAA,MAOA,CAEA,KADAqJ,EAAA18C,KAAAiqB,UAAAuyB,IAKA,OAHAtsC,EAAA,IAAA4xB,GAAA,UAAA2a,EAAAvsC,EAAAwsC,GAMA,OAAAxsC,IAEAysC,aAAA,SAAAH,GACA,IAAAtsC,EACAusC,EACAC,EAGApC,EAFAt6B,EAAAhgB,KAYA,GADAkQ,GATAoqC,EAAAt6B,EAAA48B,iBAAAJ,IAAAx8B,EAAA68B,qBAAAL,KACAA,EAGAlC,EAFAt6B,EAAA88B,gBAAAN,GAQA,CAIA,GADAC,EANAlL,EAAA8B,KAAA,OAOA,CAEA,KADAqJ,EAAA18C,KAAA28C,aAAAH,IAKA,OAHAtsC,EAAA,IAAA4xB,GAAA,UAAA2a,EAAAvsC,EAAAwsC,GAMA,OAAAxsC,IAEA0sC,iBAAA,SAAAJ,GACA,GAAAjL,EAAA8B,KAAA,QACA,IAAAnjC,EAAAlQ,KAAA68C,qBAAAL,GAIA,OAHAtsC,IACAA,EAAA2tB,QAAA3tB,EAAA2tB,QAEA3tB,IAGA2sC,qBAAA,SAAAL,GAgBA,IAAAO,EAEA,GADAxL,EAAAmB,OACAnB,EAAA8B,KAAA,MAKA,GADA0J,EArBA,SAAAC,GACA,IAAAD,EAGA,GAFAxL,EAAAmB,OACAqK,EAAAC,EAAA/yB,UAAAuyB,GACA,CAIA,GAAAjL,EAAA6B,MAAA,KAKA,OADA7B,EAAAuB,SACAiK,EAJAxL,EAAAoB,eAJApB,EAAAoB,UAgBAsK,CAAAj9C,MAGA,OADAuxC,EAAAuB,SACAiK,EAGA,GADAA,EAAA/8C,KAAA88C,gBAAAN,GACA,CAIA,GAAAjL,EAAA6B,MAAA,KAKA,OADA7B,EAAAuB,SACAiK,EAJAxL,EAAAoB,QAAA,qBAAApB,EAAAiD,cAAA,UAJAjD,EAAAoB,eAVApB,EAAAoB,WAoBAmK,gBAAA,SAAAN,GACA,IAEA13C,EACAyc,EACA7U,EACA4U,EALAo2B,EAAA13C,KAAA03C,SACA/3C,EAAA4xC,EAAAtyC,EAKA,SAAAq7C,IACA,OAAAt6C,KAAAo8C,YAAA1E,EAAAtzB,WAAAszB,EAAAI,UAAAJ,EAAAG,cAIA,GADA/yC,GADAw1C,IAAA7lC,KAAAzU,SA0CA,OAvCAuxC,EAAA6B,MAAA,KAEA9xB,EADAiwB,EAAA6B,MAAA,KACA,KAGA,IAGA7B,EAAA6B,MAAA,KAEA9xB,EADAiwB,EAAA6B,MAAA,KACA,KAGA,IAGA7B,EAAA6B,MAAA,OAEA9xB,EADAiwB,EAAA6B,MAAA,KACA,KAEA7B,EAAA6B,MAAA,KACA,KAGA,KAGA9xB,GACAC,EAAA+4B,KAEA5tC,EAAA,IAAAo1B,GAAA,UAAAxgB,EAAAxc,EAAAyc,EAAA5hB,GAAA,GAGAkD,EAAA,uBAIA6J,EAAA,IAAAo1B,GAAA,cAAAh9B,EAAA,IAAAg9B,GAAA,gBAAAniC,GAAA,GAEA+M,GAOA6vC,QAAA,WACA,IACA1e,EADA6Z,EAAA13C,KAAA03C,SAEAnG,EAAA+C,KAAA,eACAzW,EAAA0T,EAAA6B,MAAA,MAEA,IAAAqI,EAAAz7C,KAAAm8C,OAAAzE,EAAAkB,aACAlB,EAAAr0B,SAAAq0B,EAAA1rB,YACA0rB,EAAA/kB,YAAA+kB,EAAA5uC,QACA4uC,EAAAI,QAAA,IAAAJ,EAAAyB,gBACAzB,EAAAG,cAKA,OAJAha,IACA4d,EAAAjiB,YAAA,EACAiiB,EAAA,IAAA3Z,GAAA,SAAA2Z,IAEAA,GASAj1C,WAAA,WACA,IACA2M,EACA+pC,EAFAxF,KAGA/3C,EAAA4xC,EAAAtyC,EACA,IACAkU,EAAAnT,KAAAO,WAEAm3C,EAAA32C,KAAAoS,KAGAA,EAAAnT,KAAAo8C,YAAAp8C,KAAA84C,oBACAhX,GAAA75B,UACAkL,EAAA,MAEAA,IACAukC,EAAA32C,KAAAoS,GAEAo+B,EAAA+C,KAAA,cACA4I,EAAA3L,EAAA6B,MAAA,OAEAsE,EAAA32C,KAAA,IAAA+gC,GAAA,UAAAob,EAAAv9C,YAIqBwT,GACrB,GAAAukC,EAAAx4C,OAAA,EACA,WAAA4iC,GAAA,WAAA4V,IAGA/kB,SAAA,WACA,IAAAzxB,EAAAqwC,EAAA2B,IAAA,8BACA,GAAAhyC,EACA,OAAAA,EAAA,IAGA85C,aAAA,WACA,IAEA97B,EACAiH,EAHAjlB,KACAvB,KAGA4xC,EAAAmB,OACA,IAAAyK,EAAA5L,EAAA2B,IAAA,yBACA,GAAAiK,EAGA,OAFAj8C,GAAA,IAAA4gC,GAAA,QAAAqb,EAAA,KACA5L,EAAAuB,SACA5xC,EAEA,SAAArB,EAAAm6C,GACA,IAAA/6C,EAAAsyC,EAAAtyC,EACA2N,EAAA2kC,EAAA2B,IAAA8G,GACA,GAAAptC,EAEA,OADAjN,EAAAoB,KAAA9B,GACAiC,EAAAH,KAAA6L,EAAA,IAIA,IADA/M,EAAA,UAEAA,EAAA,uCAIA,GAAAqB,EAAAhC,OAAA,GAAAW,EAAA,uBAQA,IAPA0xC,EAAAuB,SAGA,KAAA5xC,EAAA,KACAA,EAAAyB,QACAhD,EAAAgD,SAEAwjB,EAAA,EAAmCA,EAAAjlB,EAAAhC,OAAiBinB,IACpDjH,EAAAhe,EAAAilB,GACAjlB,EAAAilB,GAAA,MAAAjH,EAAAhT,OAAA,UAAAgT,EAAAhT,OAAA,GACA,IAAA41B,GAAA,QAAA5iB,GACA,MAAAA,EAAAhT,OAAA,GACA,IAAA41B,GAAA,aAAA5iB,EAAAmF,MAAA,MAAA1kB,EAAAwmB,GAAAjG,GACA,IAAA4hB,GAAA,aAAA5iB,EAAAmF,MAAA,MAAA1kB,EAAAwmB,GAAAjG,GAEA,OAAAhf,EAEAqwC,EAAAoB,cAuBA,SAAAyK,GAAAz8B,EAAAsJ,EAAAozB,EAAAC,GACA,OAAArzB,EAAA7I,KAAAT,GAAA08B,EAAAj8B,KAAAT,GACA28B,IAAAl8B,KAAAT,GAAA,IAAA6K,EAGA,SAAA+xB,GAAA58B,EAAAqL,GACA,IAEA,OADAA,EAAA5K,KAAAT,GACA0K,EAAAC,KAEA,MAAAnY,GACA,OAAAkY,EAAAE,OA7BAljB,GAAAwuC,cAAA,SAAAxkB,GACA,IAAAnT,EAAA,GACA,QAAAoT,KAAAD,EACA,GAAAt0B,OAAAyT,eAAA1I,KAAAupB,EAAAC,GAAA,CACA,IAAAp0B,EAAAm0B,EAAAC,GACApT,IAAA,MAAAoT,EAAA,WAAAA,EAAA,KAAAp0B,GAAA,MAAAs6B,OAAAt6B,GAAAmmB,OAAA,GAAgH,QAGhH,OAAAnF,GAcAk+B,GAAAxjB,UAAA,EAUA2jB,GAAA3jB,UAAA,EACA,IAEA4jB,GAFAC,IAAqBF,aAAAnF,QAtBrB,SAAAnuB,GACA,OAAAA,EAAAoB,EAAAC,KAAAD,EAAAE,OAqBqB8sB,GAAA+E,IAGrB,SAAAM,GAAA/hB,GACA,OAAArc,KAAAsD,IAAA,EAAAtD,KAAAqD,IAAA,EAAAgZ,IAEA,SAAAgiB,GAAAC,EAAAC,GACA,IAAAx6B,EAAAm6B,GAAAG,KAAAE,EAAAn6B,EAAAm6B,EAAA3+B,EAAA2+B,EAAAlxC,EAAAkxC,EAAA/4C,GACA,GAAAue,EAQA,OAPAu6B,EAAA1/C,OACA,aAAA8N,KAAA4xC,EAAA1/C,OACAmlB,EAAAnlB,MAAA0/C,EAAA1/C,MAGAmlB,EAAAnlB,MAAA,MAEAmlB,EAGA,SAAAI,GAAAJ,GACA,GAAAA,EAAAI,MACA,OAAAJ,EAAAI,QAGA,UAAAzZ,MAAA,2CAGA,SAAAga,GAAAX,GACA,GAAAA,EAAAW,MACA,OAAAX,EAAAW,QAGA,UAAAha,MAAA,2CAGA,SAAA8zC,GAAA/sC,GACA,GAAAA,aAAAonB,EACA,OAAAE,WAAAtnB,EAAAqnB,KAAAd,GAAA,KAAAvmB,EAAA7S,MAAA,IAAA6S,EAAA7S,OAEA,oBAAA6S,EACA,OAAAA,EAGA,MACA3K,KAAA,WACA4iB,QAAA,8CA8XA,IAAA3F,GAlXAm6B,IACAj7B,IAAA,SAAAU,EAAAC,EAAA3B,GACA,IAAAzc,EAAA,EAKA,GAAAme,aAAAkW,GAAA,CACA,IAAAwC,EAAA1Y,EAAA/kB,MAQA,GAPA+kB,EAAA0Y,EAAA,GACAzY,EAAAyY,EAAA,IACApa,EAAAoa,EAAA,cAKA3C,EAAA,CACA,IAAA1X,EAAAC,EACAA,EAAAD,EAAA2X,SAAA,GACAn0B,EAAAwc,EAAA2X,SAAA,IAGA,IAAA5V,EAAAm6B,GAAAO,KAAA96B,EAAAC,EAAA3B,EAAAzc,GACA,GAAAue,EAEA,OADAA,EAAAnlB,MAAA,MACAmlB,GAGA06B,KAAA,SAAA96B,EAAAC,EAAA3B,EAAAzc,GACA,IACA,GAAAme,aAAAX,EAOA,OALAxd,EADAoe,EACA46B,GAAA56B,GAGAD,EAAAR,MAEA,IAAAH,EAAAW,EAAAV,IAAAzd,EAAA,QAEA,IAAAyd,GAAAU,EAAAC,EAAA3B,GAAA5f,IAAA,SAAA+K,GAAsD,OA/CtDsxC,EA+CsD,KA/CtDjtC,EA+CsDrE,aA9CtDyrB,GAAApnB,EAAAqnB,KAAAd,GAAA,KACAe,WAAAtnB,EAAA7S,MAAA8/C,EAAA,KAGAF,GAAA/sC,GALA,IAAAA,EAAAitC,IAiDA,OADAl5C,EAAAg5C,GAAAh5C,GACA,IAAAwd,EAAAC,EAAAzd,EAAA,QAEA,MAAAqO,MAEA0qC,IAAA,SAAAn6B,EAAAxE,EAAAvS,GACA,IAAA7H,EAAA,EACA,GAAA4e,aAAAyV,GAAA,CACA,IAAAwC,EAAAjY,EAAAxlB,MAIA,GAHAwlB,EAAAiY,EAAA,GACAzc,EAAAyc,EAAA,IACAhvB,EAAAgvB,EAAA,cACA3C,EAAA,CACA,IAAA1X,EAAA3U,EACAA,EAAA2U,EAAA2X,SAAA,GACAn0B,EAAAwc,EAAA2X,SAAA,IAGA,IAAA5V,EAAAm6B,GAAAG,KAAAj6B,EAAAxE,EAAAvS,EAAA7H,GACA,GAAAue,EAEA,OADAA,EAAAnlB,MAAA,MACAmlB,GAGAs6B,KAAA,SAAAj6B,EAAAxE,EAAAvS,EAAA7H,GACA,IACA,GAAA4e,aAAApB,EAOA,OALAxd,EADAoa,EACA4+B,GAAA5+B,GAGAwE,EAAAjB,MAEA,IAAAH,EAAAoB,EAAAnB,IAAAzd,EAAA,QAEA,IAAAm5C,EACAC,EACA,SAAAC,EAAAz6B,GAEA,UADAA,IAAA,EAAAA,EAAA,EAAAA,EAAA,EAAAA,EAAA,EAAAA,GACA,EACAu6B,GAAAC,EAAAD,GAAAv6B,EAAA,EAEA,EAAAA,EAAA,EACAw6B,EAEA,EAAAx6B,EAAA,EACAu6B,GAAAC,EAAAD,IAAA,IAAAv6B,GAAA,EAGAu6B,EAGAv6B,EAAAo6B,GAAAp6B,GAAA,QACAxE,EAAAw+B,GAAAI,GAAA5+B,IACAvS,EAAA+wC,GAAAI,GAAAnxC,IACA7H,EAAA44C,GAAAI,GAAAh5C,IAEAm5C,EAAA,EAAAtxC,GADAuxC,EAAAvxC,GAAA,GAAAA,GAAAuS,EAAA,GAAAvS,EAAAuS,EAAAvS,EAAAuS,GAEA,IAAAqD,GACA,IAAA47B,EAAAz6B,EAAA,KACA,IAAAy6B,EAAAz6B,GACA,IAAAy6B,EAAAz6B,EAAA,MAGA,OADA5e,EAAAg5C,GAAAh5C,GACA,IAAAwd,EAAAC,EAAAzd,EAAA,QAEA,MAAAqO,MAEAirC,IAAA,SAAA16B,EAAAxE,EAAAtd,GACA,OAAA47C,GAAAa,KAAA36B,EAAAxE,EAAAtd,EAAA,IAEAy8C,KAAA,SAAA36B,EAAAxE,EAAAtd,EAAAkD,GAKA,IAAA7F,EACA0hC,EALAjd,EAAAo6B,GAAAp6B,GAAA,YACAxE,EAAA4+B,GAAA5+B,GACAtd,EAAAk8C,GAAAl8C,GACAkD,EAAAg5C,GAAAh5C,GAKA,IAAAw5C,GAAA18C,EACAA,GAAA,EAAAsd,GACAtd,GAAA,GAHA++B,EAAAjd,EAAA,IADAzkB,EAAAqgB,KAAAi/B,MAAA76B,EAAA,QAIAxE,GACAtd,GAAA,KAAA++B,GAAAzhB,IACAs/B,IAAA,QACA,QACA,QACA,QACA,QACA,QACA,OAAAhB,GAAAO,KAAA,IAAAO,EAAAE,EAAAv/C,GAAA,QAAAq/C,EAAAE,EAAAv/C,GAAA,QAAAq/C,EAAAE,EAAAv/C,GAAA,IAAA6F,IAEAq5C,IAAA,SAAA96B,GACA,WAAA8U,EAAA1U,GAAAJ,GAAAK,IAEA+6B,WAAA,SAAAp7B,GACA,WAAA8U,EAAA,IAAA1U,GAAAJ,GAAAnE,EAAA,MAEAw/B,UAAA,SAAAr7B,GACA,WAAA8U,EAAA,IAAA1U,GAAAJ,GAAA1W,EAAA,MAEAgyC,OAAA,SAAAt7B,GACA,WAAA8U,EAAAnU,GAAAX,GAAAK,IAEAk7B,cAAA,SAAAv7B,GACA,WAAA8U,EAAA,IAAAnU,GAAAX,GAAAnE,EAAA,MAEA2/B,SAAA,SAAAx7B,GACA,WAAA8U,EAAA,IAAAnU,GAAAX,GAAAzhB,EAAA,MAEAib,IAAA,SAAAwG,GACA,WAAA8U,EAAA9U,EAAAd,IAAA,KAEA3J,MAAA,SAAAyK,GACA,WAAA8U,EAAA9U,EAAAd,IAAA,KAEAzM,KAAA,SAAAuN,GACA,WAAA8U,EAAA9U,EAAAd,IAAA,KAEAE,MAAA,SAAAY,GACA,WAAA8U,EAAA1U,GAAAJ,GAAAve,IAEAke,KAAA,SAAAK,GACA,WAAA8U,EAAA9U,EAAAL,OAAAK,EAAAZ,MAAA,UAEAq8B,UAAA,SAAAz7B,GACA,IAAAy7B,EAAA,MAAAz7B,EAAAd,IAAA,OACA,MAAAc,EAAAd,IAAA,OACA,MAAAc,EAAAd,IAAA,OACA,WAAA4V,EAAA2mB,EAAAz7B,EAAAZ,MAAA,UAEAs8B,SAAA,SAAA17B,EAAA27B,EAAAC,GAGA,IAAA57B,EAAAd,IACA,YAEA,IAAAs7B,EAAAp6B,GAAAJ,GAQA,YAPA,IAAA47B,GAAA,aAAAA,EAAA/gD,MACA2/C,EAAA3+B,GAAA2+B,EAAA3+B,EAAA8/B,EAAA9gD,MAAA,IAGA2/C,EAAA3+B,GAAA8/B,EAAA9gD,MAAA,IAEA2/C,EAAA3+B,EAAAw+B,GAAAG,EAAA3+B,GACAy+B,GAAAt6B,EAAAw6B,IAEAqB,WAAA,SAAA77B,EAAA27B,EAAAC,GACA,IAAApB,EAAAp6B,GAAAJ,GAQA,YAPA,IAAA47B,GAAA,aAAAA,EAAA/gD,MACA2/C,EAAA3+B,GAAA2+B,EAAA3+B,EAAA8/B,EAAA9gD,MAAA,IAGA2/C,EAAA3+B,GAAA8/B,EAAA9gD,MAAA,IAEA2/C,EAAA3+B,EAAAw+B,GAAAG,EAAA3+B,GACAy+B,GAAAt6B,EAAAw6B,IAEAsB,QAAA,SAAA97B,EAAA27B,EAAAC,GACA,IAAApB,EAAAp6B,GAAAJ,GAQA,YAPA,IAAA47B,GAAA,aAAAA,EAAA/gD,MACA2/C,EAAAlxC,GAAAkxC,EAAAlxC,EAAAqyC,EAAA9gD,MAAA,IAGA2/C,EAAAlxC,GAAAqyC,EAAA9gD,MAAA,IAEA2/C,EAAAlxC,EAAA+wC,GAAAG,EAAAlxC,GACAgxC,GAAAt6B,EAAAw6B,IAEAuB,OAAA,SAAA/7B,EAAA27B,EAAAC,GACA,IAAApB,EAAAp6B,GAAAJ,GAQA,YAPA,IAAA47B,GAAA,aAAAA,EAAA/gD,MACA2/C,EAAAlxC,GAAAkxC,EAAAlxC,EAAAqyC,EAAA9gD,MAAA,IAGA2/C,EAAAlxC,GAAAqyC,EAAA9gD,MAAA,IAEA2/C,EAAAlxC,EAAA+wC,GAAAG,EAAAlxC,GACAgxC,GAAAt6B,EAAAw6B,IAEAwB,OAAA,SAAAh8B,EAAA27B,EAAAC,GACA,IAAApB,EAAAp6B,GAAAJ,GAQA,YAPA,IAAA47B,GAAA,aAAAA,EAAA/gD,MACA2/C,EAAA/4C,GAAA+4C,EAAA/4C,EAAAk6C,EAAA9gD,MAAA,IAGA2/C,EAAA/4C,GAAAk6C,EAAA9gD,MAAA,IAEA2/C,EAAA/4C,EAAA44C,GAAAG,EAAA/4C,GACA64C,GAAAt6B,EAAAw6B,IAEAyB,QAAA,SAAAj8B,EAAA27B,EAAAC,GACA,IAAApB,EAAAp6B,GAAAJ,GAQA,YAPA,IAAA47B,GAAA,aAAAA,EAAA/gD,MACA2/C,EAAA/4C,GAAA+4C,EAAA/4C,EAAAk6C,EAAA9gD,MAAA,IAGA2/C,EAAA/4C,GAAAk6C,EAAA9gD,MAAA,IAEA2/C,EAAA/4C,EAAA44C,GAAAG,EAAA/4C,GACA64C,GAAAt6B,EAAAw6B,IAEA0B,KAAA,SAAAl8B,EAAA27B,GACA,IAAAnB,EAAAp6B,GAAAJ,GAGA,OAFAw6B,EAAA/4C,EAAAk6C,EAAA9gD,MAAA,IACA2/C,EAAA/4C,EAAA44C,GAAAG,EAAA/4C,GACA64C,GAAAt6B,EAAAw6B,IAEA2B,KAAA,SAAAn8B,EAAA27B,GACA,IAAAnB,EAAAp6B,GAAAJ,GACA86B,GAAAN,EAAAn6B,EAAAs7B,EAAA9gD,OAAA,IAEA,OADA2/C,EAAAn6B,EAAAy6B,EAAA,MAAAA,IACAR,GAAAt6B,EAAAw6B,IAMA4B,IAAA,SAAAC,EAAAC,EAAAC,GACAA,IACAA,EAAA,IAAAznB,EAAA,KAEA,IAAAqH,EAAAogB,EAAA1hD,MAAA,IACA2hD,EAAA,EAAArgB,EAAA,EACA16B,EAAA2e,GAAAi8B,GAAA56C,EAAA2e,GAAAk8B,GAAA76C,EACAg7C,IAAAD,EAAA/6C,IAAA,EAAA+6C,KAAA/6C,IAAA,EAAA+6C,EAAA/6C,IAAA,KACAi7C,EAAA,EAAAD,EACAv9B,GAAAm9B,EAAAn9B,IAAA,GAAAu9B,EAAAH,EAAAp9B,IAAA,GAAAw9B,EACAL,EAAAn9B,IAAA,GAAAu9B,EAAAH,EAAAp9B,IAAA,GAAAw9B,EACAL,EAAAn9B,IAAA,GAAAu9B,EAAAH,EAAAp9B,IAAA,GAAAw9B,GACAt9B,EAAAi9B,EAAAj9B,MAAA+c,EAAAmgB,EAAAl9B,OAAA,EAAA+c,GACA,WAAAld,EAAAC,EAAAE,IAEAu9B,UAAA,SAAA38B,GACA,OAAAm6B,GAAA0B,WAAA77B,EAAA,IAAA8U,EAAA,OAEA8nB,SAAA,SAAA58B,EAAA68B,EAAAC,EAAAC,GAGA,IAAA/8B,EAAAd,IACA,YASA,QAPA,IAAA49B,IACAA,EAAA3C,GAAAO,KAAA,qBAEA,IAAAmC,IACAA,EAAA1C,GAAAO,KAAA,UAGAmC,EAAAl9B,OAAAm9B,EAAAn9B,OAAA,CACA,IAAAq9B,EAAAF,EACAA,EAAAD,EACAA,EAAAG,EAQA,OALAD,OADA,IAAAA,EACA,IAGAtC,GAAAsC,GAEA/8B,EAAAL,OAAAo9B,EACAD,EAGAD,GAyCAI,KAAA,SAAAj9B,GACA,WAAAmI,EAAAnI,EAAAY,WAEAZ,MAAA,SAAA3W,GACA,GAAAA,aAAAquB,IACA,uDAAmE/uB,KAAAU,EAAAxO,OAAA,CACnE,IAAAy9B,EAAAjvB,EAAAxO,MAAAmmB,MAAA,GACA,WAAA/B,EAAAqZ,OAAAl5B,EAAA,IAAAk5B,GAEA,GAAAjvB,aAAA4V,IAAA5V,EAAA4V,EAAA6B,YAAAzX,EAAAxO,QAEA,OADAwO,EAAAxO,WAAAuE,EACAiK,EAEA,MACAtG,KAAA,WACA4iB,QAAA,oEAGAu3B,KAAA,SAAAl9B,EAAA27B,GACA,OAAAxB,GAAAiC,IAAAjC,GAAAj7B,IAAA,aAAAc,EAAA27B,IAEAwB,MAAA,SAAAn9B,EAAA27B,GACA,OAAAxB,GAAAiC,IAAAjC,GAAAj7B,IAAA,OAAAc,EAAA27B,KAOA,SAAAyB,GAAAC,EAAAhB,EAAAC,GACA,IAEAgB,EAGAC,EACAC,EACAC,EAPAC,EAAArB,EAAAj9B,MAGAu+B,EAAArB,EAAAl9B,MAKAQ,KACA49B,EAAAG,EAAAD,GAAA,EAAAC,GACA,QAAA/hD,EAAA,EAAuBA,EAAA,EAAOA,IAG9B6hD,EAAAJ,EAFAC,EAAAjB,EAAAn9B,IAAAtjB,GAAA,IACA2hD,EAAAjB,EAAAp9B,IAAAtjB,GAAA,KAEA4hD,IACAC,GAAAE,EAAAJ,EAAAG,GAAAJ,EACAK,GAAAL,EAAAC,EAAAE,KAAAD,GAEA59B,EAAAhkB,GAAA,IAAA6hD,EAEA,WAAAx+B,EAAAW,EAAA49B,GAEA,IAAAI,IACAC,SAAA,SAAAP,EAAAC,GACA,OAAAD,EAAAC,GAEAO,OAAA,SAAAR,EAAAC,GACA,OAAAD,EAAAC,EAAAD,EAAAC,GAEAQ,QAAA,SAAAT,EAAAC,GAEA,OADAD,GAAA,IACA,EACAM,GAAAC,SAAAP,EAAAC,GACAK,GAAAE,OAAAR,EAAA,EAAAC,IAEAS,UAAA,SAAAV,EAAAC,GACA,IAAA78B,EAAA,EACA5Q,EAAAwtC,EAMA,OALAC,EAAA,KACAztC,EAAA,EACA4Q,EAAA48B,EAAA,IAAArhC,KAAAgiC,KAAAX,KACA,GAAAA,EAAA,IAAAA,EAAA,GAAAA,GAEAA,GAAA,IAAAC,GAAAztC,GAAA4Q,EAAA48B,IAEAY,UAAA,SAAAZ,EAAAC,GACA,OAAAK,GAAAG,QAAAR,EAAAD,IAEAa,WAAA,SAAAb,EAAAC,GACA,OAAAthC,KAAAmiC,IAAAd,EAAAC,IAEAc,UAAA,SAAAf,EAAAC,GACA,OAAAD,EAAAC,EAAA,EAAAD,EAAAC,GAGAe,QAAA,SAAAhB,EAAAC,GACA,OAAAD,EAAAC,GAAA,GAEAgB,SAAA,SAAAjB,EAAAC,GACA,SAAAthC,KAAAmiC,IAAAd,EAAAC,EAAA,KAGA,QAAAjgB,MAAAsgB,GACAA,GAAAzvC,eAAAmvB,MACA8f,GAAA9f,IAAA8f,GAAAhsC,KAAA,KAAAwsC,GAAAtgB,MAIA,IA0DAkhB,GAAA,SAAAriD,GAKA,OAFA4C,MAAAC,QAAA7C,EAAAtB,OACAsB,EAAAtB,MAAAkE,MAAA5C,IAGA2O,IACA2zC,MAAA,SAAA/wC,GACA,OAAAA,GAEAgxC,IAAA,WAEA,IADA,IAAAC,KACAC,EAAA,EAA4BA,EAAA9gD,UAAAjC,OAAuB+iD,IACnDD,EAAAC,GAAA9gD,UAAA8gD,GAEA,WAAAD,EAAA9iD,OACA8iD,EAAA,GAEA,IAAA52B,EAAA42B,IAEAv4B,QAAA,SAAAy4B,EAAAviD,GAGA,OADAA,IAAAzB,MAAA,EACA2jD,GAAAK,GAAAviD,IAEAT,OAAA,SAAAgjD,GACA,WAAA/pB,EAAA0pB,GAAAK,GAAAhjD,SAUAijD,MAAA,SAAAnhD,EAAAM,EAAA8gD,GACA,IAAAC,EACAz+C,EACA0+C,EAAA,EACAn0C,KACA7M,GACAsC,EAAAtC,EACA+gD,EAAArhD,EAAA9C,MACAkkD,IACAE,EAAAF,EAAAlkD,SAIAmkD,EAAA,EACAz+C,EAAA5C,GAEA,QAAA/B,EAAAojD,EAA8BpjD,GAAA2E,EAAA1F,MAAee,GAAAqjD,EAC7Cn0C,EAAApN,KAAA,IAAAo3B,EAAAl5B,EAAA2E,EAAAw0B,OAEA,WAAAe,GAAAhrB,IAEAo0C,KAAA,SAAAp0C,EAAAq0C,GACA,IAEA7gB,EACA8gB,EAHAjzB,EAAAxvB,KACAiwB,KAGAyyB,EAAA,SAAA/mB,GACA,OAAAA,aAAAhc,EACAgc,EAAAva,KAAAoO,EAAA7O,SAEAgb,GAWA8mB,GATAt0C,EAAAjQ,OAAAiQ,aAAA4sB,GAQA5sB,EAAA2iB,QACA4xB,EAAAv0C,EAAA2iB,SAAAb,MAEA9hB,EAAA8hB,MACA9hB,EAAA8hB,MAAAtuB,IAAA+gD,GAEAtgD,MAAAC,QAAA8L,GACAA,EAAAxM,IAAA+gD,IAGAA,EAAAv0C,IAjBA/L,MAAAC,QAAA8L,EAAAjQ,OACAiQ,EAAAjQ,MAAAyD,IAAA+gD,IAGAA,EAAAv0C,EAAAjQ,QAeA,IAAAykD,EAAA,SACAC,EAAA,OACAC,EAAA,SACAL,EAAArjB,QACAwjB,EAAAH,EAAArjB,OAAA,IAAAqjB,EAAArjB,OAAA,GAAAj+B,KACA0hD,EAAAJ,EAAArjB,OAAA,IAAAqjB,EAAArjB,OAAA,GAAAj+B,KACA2hD,EAAAL,EAAArjB,OAAA,IAAAqjB,EAAArjB,OAAA,GAAAj+B,KACAshD,IAAAvyB,OAGAuyB,IAAA1xB,QAEA,QAAA7xB,EAAA,EAA2BA,EAAAwjD,EAAAvjD,OAAqBD,IAAA,CAChD,IAAA4C,OAAA,EACA3D,OAAA,EACAmG,EAAAo+C,EAAAxjD,GACAoF,aAAAynB,GACAjqB,EAAA,iBAAAwC,EAAAnD,KAAAmD,EAAAnD,KAAAmD,EAAAnD,KAAA,GAAAhD,MACAA,EAAAmG,EAAAnG,QAGA2D,EAAA,IAAAs2B,EAAAl5B,EAAA,GACAf,EAAAmG,GAEAA,aAAA4D,IAGA05B,EAAA6gB,EAAAvyB,MAAA5L,MAAA,GACAs+B,GACAhhB,EAAA5gC,KAAA,IAAA+qB,EAAA62B,EAAAzkD,GAAA,KAAA8B,KAAAL,MAAAK,KAAAklB,kBAEA29B,GACAlhB,EAAA5gC,KAAA,IAAA+qB,EAAA+2B,EAAA,IAAA1qB,EAAAl5B,EAAA,SAAAe,KAAAL,MAAAK,KAAAklB,kBAEA09B,GACAjhB,EAAA5gC,KAAA,IAAA+qB,EAAA82B,EAAA/gD,GAAA,KAAA7B,KAAAL,MAAAK,KAAAklB,kBAEA+K,EAAAlvB,KAAA,IAAAgvB,GAAA,WAAAhL,EAAA,WAAA4c,EAAA6gB,EAAAtyB,cAAAsyB,EAAApgC,oBAEA,WAAA2N,GAAA,WAAAhL,EAAA,WAAAkL,EAAAuyB,EAAAtyB,cAAAsyB,EAAApgC,kBAAAhB,KAAAphB,KAAA2gB,WAIAmiC,GAAA,SAAAC,EAAA3qB,EAAArnB,GACA,KAAAA,aAAAonB,GACA,MAAmB/xB,KAAA,WAAA4iB,QAAA,6BAQnB,OANA,MAAAoP,EACAA,EAAArnB,EAAAqnB,KAGArnB,IAAA2nB,QAEA,IAAAP,EAAA4qB,EAAA1qB,WAAAtnB,EAAA7S,QAAAk6B,IAGA4qB,IAEAC,KAAA,KACA1E,MAAA,KACA+C,KAAA,KACAG,IAAA,KACA3jC,IAAA,GACAolC,IAAA,GACAC,IAAA,GACAC,KAAA,MACAC,KAAA,MACAC,KAAA,OAEA,QAAAC,MAAAP,GACAA,GAAAxxC,eAAA+xC,MACAP,GAAAO,IAAAT,GAAAruC,KAAA,KAAA6K,KAAAikC,IAAAP,GAAAO,MAGAP,GAAAlgC,MAAA,SAAA/R,EAAA4vB,GACA,IAAA6iB,OAAA,IAAA7iB,EAAA,EAAAA,EAAAziC,MACA,OAAA4kD,GAAA,SAAAW,GAA0C,OAAAA,EAAA9hC,QAAA6hC,IAAgC,KAAAzyC,IAG1E,IAAA2yC,GAAA,SAAAC,EAAAngC,GAEA,QADAA,EAAAphB,MAAAsH,UAAA2a,MAAAvb,KAAA0a,IACAtkB,QACA,aAA2BkH,KAAA,WAAA4iB,QAAA,kCAE3B,IAAA/pB,EACA0R,EACAygC,EACAwS,EACAC,EACAzrB,EACA0rB,EACAC,EAEAC,KACA9B,KAEA,IAAAjjD,EAAA,EAAmBA,EAAAukB,EAAAtkB,OAAiBD,IAEpC,IADAmyC,EAAA5tB,EAAAvkB,cACAk5B,EAWA,GAHA2rB,EAAA,MADA1rB,EAAA,MADAwrB,EAAA,KAAAxS,EAAAhZ,KAAAtsB,iBAAArJ,IAAAshD,EAAA,IAAA5rB,EAAAiZ,EAAAlzC,MAAA6lD,GAAArrB,QAAA0Y,EAAA1Y,SACAN,KAAAtsB,iBAAArJ,IAAAqhD,IAAAF,EAAAxrB,KAAAtsB,kBACArJ,IAAAqhD,GAAA,KAAA1rB,GAAA,KAAA4rB,EAAA,GAAAtrB,QAAAN,KAAAtsB,WAAAssB,EAAA0rB,EACAC,EAAA,KAAA3rB,QAAA31B,IAAAshD,EAAA3S,EAAAhZ,KAAAtsB,WAAAi4C,OAEAthD,KADAkO,OAAAlO,IAAAy/C,EAAA,UAAA9pB,OAAA0rB,EAAA5B,EAAA,IAAAA,EAAA9pB,IASAyrB,EAAA,KAAAG,EAAArzC,GAAAynB,KAAAtsB,iBAAArJ,IAAAshD,EAAA,IAAA5rB,EAAA6rB,EAAArzC,GAAAzS,MAAA6lD,GAAArrB,QAAAsrB,EAAArzC,GAAA+nB,SACAirB,GAAAC,EAAA1lD,MAAA2lD,EAAA3lD,QACAylD,GAAAC,EAAA1lD,MAAA2lD,EAAA3lD,SACA8lD,EAAArzC,GAAAygC,OAXA,CACA,QAAA3uC,IAAAqhD,GAAA1rB,IAAA0rB,EACA,MAA2B19C,KAAA,WAAA4iB,QAAA,sBAE3Bk5B,EAAA9pB,GAAA4rB,EAAA9kD,OACA8kD,EAAAjjD,KAAAqwC,QAfAhvC,MAAAC,QAAAmhB,EAAAvkB,GAAAf,QACAkE,MAAAsH,UAAA3I,KAAA4wB,MAAAnO,EAAAphB,MAAAsH,UAAA2a,MAAAvb,KAAA0a,EAAAvkB,GAAAf,QAuBA,UAAA8lD,EAAA9kD,OACA8kD,EAAA,IAEAxgC,EAAAwgC,EAAAriD,IAAA,SAAAmD,GAAuC,OAAAA,EAAA4b,MAAA1gB,KAAA2gB,WAAgCxe,KAAAnC,KAAA2gB,QAAA4C,SAAA,UACvE,IAAAiI,GAAAm4B,EAAA,iBAAAngC,EAAA,OAEAygC,IACArhC,IAAA,WAEA,IADA,IAAAY,KACAy+B,EAAA,EAA4BA,EAAA9gD,UAAAjC,OAAuB+iD,IACnDz+B,EAAAy+B,GAAA9gD,UAAA8gD,GAEA,IACA,OAAAyB,IAAA,EAAAlgC,GAEA,MAAArQ,MAEAwP,IAAA,WAEA,IADA,IAAAa,KACAy+B,EAAA,EAA4BA,EAAA9gD,UAAAjC,OAAuB+iD,IACnDz+B,EAAAy+B,GAAA9gD,UAAA8gD,GAEA,IACA,OAAAyB,IAAA,EAAAlgC,GAEA,MAAArQ,MAEAzN,QAAA,SAAAi2B,EAAAvD,GACA,OAAAuD,EAAAlD,UAAAL,EAAAl6B,QAEAgmD,GAAA,WACA,WAAA/rB,EAAA7Y,KAAAC,KAEA4kC,IAAA,SAAAr/C,EAAAyc,GACA,WAAA4W,EAAArzB,EAAA5G,MAAAqjB,EAAArjB,MAAA4G,EAAAszB,OAEAjV,IAAA,SAAAe,EAAAkgC,GACA,oBAAAlgC,GAAA,iBAAAkgC,EACAlgC,EAAA,IAAAiU,EAAAjU,GACAkgC,EAAA,IAAAjsB,EAAAisB,QAEA,KAAAlgC,aAAAiU,GAAAisB,aAAAjsB,GACA,MAAuB/xB,KAAA,WAAA4iB,QAAA,6BAEvB,WAAAmP,EAAA7Y,KAAA6D,IAAAe,EAAAhmB,MAAAkmD,EAAAlmD,OAAAgmB,EAAAkU,OAEAisB,WAAA,SAAAtzC,GAEA,OADA+xC,GAAA,SAAAW,GAAoD,WAAAA,GAAoB,IAAA1yC,KAKxE2sB,IACAvqB,EAAA,SAAAtU,GACA,WAAAk8B,GAAA,IAAAl8B,aAAA4+B,GAAA5+B,EAAAylD,UAAAzlD,EAAAX,OAAA,IAEAq7C,OAAA,SAAA16C,GACA,WAAA2sB,EAAA+4B,UAAA1lD,EAAAX,OAAA+B,QAAA,YAAAA,QAAA,YAAAA,QAAA,YAAAA,QAAA,KAA+H,OAC/HA,QAAA,aAAAA,QAAA,eAEAA,QAAA,SAAAy9B,EAAA8mB,EAAA3iB,EAAA4iB,GACA,IAAAv0C,EAAAwtB,EAAAx/B,MAIA,OAHA2jC,EAAA,WAAAA,EAAAz7B,KACAy7B,EAAA3jC,MAAA2jC,EAAAnhB,QACAxQ,IAAAjQ,QAAA,IAAAC,OAAAskD,EAAAtmD,MAAAumD,IAAAvmD,MAAA,IAAA2jC,GACA,IAAA9G,GAAA2C,EAAAzC,OAAA,GAAA/qB,EAAAwtB,EAAAt8B,UAEAsjD,IAAA,SAAAhnB,GAWA,IAVA,IAAAla,EAAAphB,MAAAsH,UAAA2a,MAAAvb,KAAA3H,UAAA,GACA+O,EAAAwtB,EAAAx/B,MACAymD,EAAA,SAAA1lD,GAEAiR,IAAAjQ,QAAA,mBAAA2kD,GACA,IAAA1mD,EAAA,WAAAslB,EAAAvkB,GAAAmH,MACAw+C,EAAA/kD,MAAA,MAAA2jB,EAAAvkB,GAAAf,MAAAslB,EAAAvkB,GAAAyhB,QACA,OAAAkkC,EAAA/kD,MAAA,UAAAglD,mBAAA3mD,QAGAe,EAAA,EAA2BA,EAAAukB,EAAAtkB,OAAiBD,IAC5C0lD,EAAA1lD,GAGA,OADAiR,IAAAjQ,QAAA,WACA,IAAA86B,GAAA2C,EAAAzC,OAAA,GAAA/qB,EAAAwtB,EAAAt8B,WAkFA0jD,GAAA,SAAA/zC,EAAAg0C,GAAkC,OAAAh0C,aAAAg0C,EAAA15B,EAAAC,KAAAD,EAAAE,OAClCy5B,GAAA,SAAAj0C,EAAAqnB,GACA,QAAA31B,IAAA21B,EACA,MAAmBhyB,KAAA,WAAA4iB,QAAA,mDAGnB,oBADAoP,EAAA,iBAAAA,EAAAl6B,MAAAk6B,EAAAl6B,MAAAk6B,GAEA,MAAmBhyB,KAAA,WAAA4iB,QAAA,2DAEnB,OAAAjY,aAAAonB,GAAApnB,EAAAqnB,KAAAd,GAAAc,GAAA/M,EAAAC,KAAAD,EAAAE,OAEA05B,IACAC,UAAA,SAAAn0C,GACA,OAAA+zC,GAAA/zC,EAAA8lB,IAEAsuB,QAAA,SAAAp0C,GACA,OAAA+zC,GAAA/zC,EAAAuR,IAEA8iC,SAAA,SAAAr0C,GACA,OAAA+zC,GAAA/zC,EAAAonB,IAEAktB,SAAA,SAAAt0C,GACA,OAAA+zC,GAAA/zC,EAAAgqB,KAEAuqB,UAAA,SAAAv0C,GACA,OAAA+zC,GAAA/zC,EAAAsa,IAEAk6B,MAAA,SAAAx0C,GACA,OAAA+zC,GAAA/zC,EAAA2qB,KAEA8pB,QAAA,SAAAz0C,GACA,OAAAi0C,GAAAj0C,EAAA,OAEA00C,aAAA,SAAA10C,GACA,OAAAi0C,GAAAj0C,EAAA,MAEA20C,KAAA,SAAA30C,GACA,OAAAi0C,GAAAj0C,EAAA,OAEAi0C,UACA5sB,KAAA,SAAAuD,EAAAvD,GACA,KAAAuD,aAAAxD,GACA,MAAuB/xB,KAAA,WAAA4iB,QAAA,+CAAA2S,aAAA3C,EAAA,yCAavB,OATAZ,EAFAA,EACAA,aAAA/M,EACA+M,EAAAl6B,MAGAk6B,EAAA1X,QAIA,GAEA,IAAAyX,EAAAwD,EAAAz9B,MAAAk6B,IAEAutB,WAAA,SAAA50C,GACA,WAAAya,EAAAza,EAAAqnB,QAIA9jB,GAAA,SAAAO,GACA,IAAAP,GAAyB8a,mBAAAsK,mBAazB,OAXAtK,EAAAG,YAAAkuB,IACAruB,EAAAtO,IAAA,UAAA8O,EAAAxO,KAAA3M,KAAAmb,IACAR,EAAAG,YAAAlM,IACA+L,EAAAG,YAAAkxB,IACArxB,EAAAG,YAvfA,SAAA1a,GACA,IAAA+wC,EAAA,SAAAC,EAAArmD,GAAsD,WAAAk8B,GAAAl8B,EAAAqmD,EAAAlmD,MAAAkmD,EAAA3gC,iBAAA9D,KAAAykC,EAAAllC,UACtD,OAAgBmlC,WAAA,SAAAC,EAAAC,GAChBA,IACAA,EAAAD,EACAA,EAAA,MAEA,IAAAE,EAAAF,KAAA7nD,MACAgoD,EAAAF,EAAA9nD,MACAgnB,EAAAllB,KAAAklB,gBACAtQ,EAAAsQ,EAAAmD,YACAnD,EAAAtQ,iBAAAsQ,EAAAihC,UACAC,EAAAF,EAAA5lD,QAAA,KACA87B,EAAA,IACA,IAAAgqB,IACAhqB,EAAA8pB,EAAA7hC,MAAA+hC,GACAF,IAAA7hC,MAAA,EAAA+hC,IAEA,IAAAzlC,EAAAwE,EAAAnlB,KAAA2gB,SACAA,EAAA0lC,WAAA,EACA,IAAApxC,EAAAJ,EAAAH,eAAAwxC,EAAAtxC,EAAA+L,EAAA9L,GAAA,GACA,IAAAI,EACA,OAAA2wC,EAAA5lD,KAAAgmD,GAEA,IAAAM,GAAA,EAEA,GAAAP,EAeAO,EAAA,WAAkCt6C,KAAAi6C,OAflC,CAEA,sBADAA,EAAApxC,EAAA0xC,WAAAL,IAEAI,GAAA,MAEA,CAEA,IAAAtW,EAAAn7B,EAAA2xC,cAAAP,GACAK,GAAA,oBAAAhmD,QAAA0vC,GAAA,EAEAsW,IACAL,GAAA,WAMA,IAAAQ,EAAAxxC,EAAAyxC,aAAAR,EAAAtxC,EAAA+L,EAAA9L,GACA,IAAA4xC,EAAAx9B,SAEA,OADA1V,EAAAG,KAAA,iCAAAwyC,EAAA,2BACAN,EAAA5lD,KAAAgmD,GAAAD,GAEA,IAAAY,EAAAF,EAAAx9B,SACA,GAAAq9B,IAAAzxC,EAAA+xC,aACA,OAAAhB,EAAA5lD,KAAAgmD,GAGA,IAAAa,EAAA,QAAAZ,EAAA,KADAU,EAAAL,EAAAzxC,EAAA+xC,aAAAD,GAAA9B,mBAAA8B,IACAvqB,EACA,WAAAV,GAAA,IAAAX,GAAA,IAAA8rB,EAAA,IAAAA,GAAA,EAAA7mD,KAAAL,MAAAK,KAAAklB,iBAAAllB,KAAAL,MAAAK,KAAAklB,mBAicA4hC,CAAAjyC,IACAua,EAAAG,YAAAphB,IACAihB,EAAAG,YAAAyzB,IACA5zB,EAAAG,YAAA00B,IACA70B,EAAAG,YAAAmO,IACAtO,EAAAG,aAvJgBw3B,eAAA,SAAAC,GAChB,IAAAC,EACAC,EAIA7jB,EAEApkC,EACAokB,EACA8jC,EACAC,EACA3kC,EATA4kC,EAAA,SACAC,EAAA,mCACAC,GAAiChkC,UAAA,GAEjCikC,EAAAR,EAAAtmC,MAAA6mC,GAMA,SAAAE,IACA,MAA2BrhD,KAAA,WAC3B4iB,QAAA,yIAeA,OAZA,GAAA7nB,UAAAjC,QACAiC,UAAA,GAAAjD,MAAAgB,OAAA,GACAuoD,IAEAR,EAAA9lD,UAAA,GAAAjD,OAEAiD,UAAAjC,OAAA,EACAuoD,IAGAR,EAAA7kD,MAAAsH,UAAA2a,MAAAvb,KAAA3H,UAAA,GAEAqmD,GACA,gBACAN,EAAA,oCACA,MACA,eACAA,EAAA,oCACA,MACA,sBACAA,EAAA,sCACA,MACA,mBACAA,EAAA,sCACA,MACA,cACA,wBACAG,EAAA,SACAH,EAAA,4BACAI,EAAA,2CACA,MACA,QACA,MAA+BlhD,KAAA,WAAA4iB,QAAA,oHAI/B,IADAqa,EAAA,8DAAAgkB,EAAA,mBAAAH,EAAA,IACAjoD,EAAA,EAA2BA,EAAAgoD,EAAA/nD,OAAkBD,GAAA,EAC7CgoD,EAAAhoD,aAAAk6B,IACA9V,EAAA4jC,EAAAhoD,GAAAf,MAAA,GACAipD,EAAAF,EAAAhoD,GAAAf,MAAA,KAGAmlB,EAAA4jC,EAAAhoD,GACAkoD,OAAA1kD,GAEA4gB,aAAAf,KAAA,IAAArjB,KAAA,IAAAgoD,EAAA/nD,cAAAuD,IAAA0kD,gBAAAhvB,IACAsvB,IAEAL,EAAAD,IAAAzmC,MAAA6mC,GAAA,IAAAtoD,EAAA,YACAwjB,EAAAY,EAAAZ,MACA4gB,GAAA,iBAAA+jB,EAAA,iBAAA/jC,EAAAM,QAAA,KAAAlB,EAAA,oBAAAA,EAAA,aAKA,OAHA4gB,GAAA,KAAAgkB,EAAA,kBAAAC,EAAA,2BACAjkB,EAAAwhB,mBAAAxhB,GAEA,IAAA3H,GAAA,IAAAX,GAAA,KADAsI,EAAA,sBAAAA,GACA,IAAAA,GAAA,EAAArjC,KAAAL,MAAAK,KAAAklB,iBAAAllB,KAAAL,MAAAK,KAAAklB,oBA+EAkK,EAAAG,YAAA01B,IACA3wC,GAGA,SAAAozC,GAAA12B,EAAA1oB,GAEA,IAAAq/C,EACAx1B,GAFA7pB,SAEA6pB,UACAy1B,EAAA,IAAAv6B,EAAAY,KAAA3lB,GAcA,iBAAA6pB,GAAA/vB,MAAAC,QAAA8vB,KACAA,EAAAp0B,OAAA0xB,KAAA0C,GAAAxwB,IAAA,SAAAwkB,GACA,IAAAjoB,EAAAi0B,EAAAhM,GAOA,OANAjoB,aAAA4jC,GAAA1W,QACAltB,aAAA4jC,GAAA3I,aACAj7B,EAAA,IAAA4jC,GAAA3I,YAAAj7B,KAEAA,EAAA,IAAA4jC,GAAA1W,OAAAltB,KAEA,IAAA4jC,GAAAhW,YAAA,IAAA3F,EAAAjoB,GAAA,YAEA0pD,EAAA15B,QAAA,IAAA4T,GAAA/R,QAAA,KAAAoC,KAEA,IAOAvwB,EACAimD,EARAC,GACA,IAAAptB,GAAA6T,oBACA,IAAA7T,GAAAoW,6BAAA,GACA,IAAApW,GAAAqW,cACA,IAAArW,GAAAC,cAAuCpX,SAAAqI,QAAAtjB,EAAAib,aAEvCwkC,KAQA,GAAAz/C,EAAAyM,cAAA,CACA8yC,EAAAv/C,EAAAyM,cAAAmM,UACA,QAAAjiB,EAAA,EAA2BA,EAAA,EAAOA,IAElC,IADA4oD,EAAAG,QACApmD,EAAAimD,EAAA5nC,OACAre,EAAAqmD,iBACA,IAAAhpD,IAAA,IAAA8oD,EAAAznD,QAAAsB,KACAmmD,EAAAhnD,KAAAa,GACAA,EAAAqmC,IAAAjX,IAIA,IAAA/xB,IAAA,IAAA6oD,EAAAxnD,QAAAsB,KACAA,EAAAsmD,aACAJ,EAAAplD,QAAAd,GAGAkmD,EAAA/mD,KAAAa,IAOA+lD,EAAA32B,EAAA5P,KAAAwmC,GACA,IAAA3oD,EAAA,EAAuBA,EAAA6oD,EAAA5oD,OAAuBD,IAC9C6oD,EAAA7oD,GAAAgpC,IAAA0f,GAGA,GAAAr/C,EAAAyM,cAEA,IADA8yC,EAAAG,QACApmD,EAAAimD,EAAA5nC,QACA,IAAA6nC,EAAAxnD,QAAAsB,KAAA,IAAAmmD,EAAAznD,QAAAsB,IACAA,EAAAqmC,IAAA0f,GAIA,OAAAA,EAMA,IA8IAQ,GA9IAC,GAAA,WACA,SAAAA,EAAAhjD,GACApF,KAAAoF,OACApF,KAAA06B,YACA16B,KAAA82C,iBACA92C,KAAAqoD,kBACAroD,KAAAsoD,oBACAtoD,KAAAoU,gBACApU,KAAAyiD,UAAA,EACAziD,KAAAuoD,eACAvoD,KAAAwoD,OAAA,IAAApjD,EAAAqjD,aAAArjD,GAkIA,OA5HAgjD,EAAA1+C,UAAAg/C,WAAA,SAAA1jB,GACA,GAAAA,EACA,QAAA/lC,EAAA,EAA+BA,EAAA+lC,EAAA9lC,OAAoBD,IACnDe,KAAAukC,UAAAS,EAAA/lC,KASAmpD,EAAA1+C,UAAA66B,UAAA,SAAAC,EAAA7vB,EAAAya,GACApvB,KAAAsoD,iBAAAvnD,KAAAyjC,GACA7vB,IACA3U,KAAAuoD,YAAA5zC,GAAA6vB,GAEAA,EAAAmkB,SACAnkB,EAAAmkB,QAAA3oD,KAAAoF,KAAApF,KAAAovB,GAAApvB,KAAAoF,KAAAkP,UAAA8a,mBAOAg5B,EAAA1+C,UAAAuW,IAAA,SAAAtL,GACA,OAAA3U,KAAAuoD,YAAA5zC,IAOAyzC,EAAA1+C,UAAAk/C,WAAA,SAAA1nC,GACAlhB,KAAA06B,SAAA35B,KAAAmgB,IAOAknC,EAAA1+C,UAAAm/C,gBAAA,SAAAC,EAAAC,GACA,IAAAC,EACA,IAAAA,EAAA,EAAqCA,EAAAhpD,KAAA82C,cAAA53C,UACrCc,KAAA82C,cAAAkS,GAAAD,aADkFC,KAKlFhpD,KAAA82C,cAAA9iC,OAAAg1C,EAAA,GAA2DF,eAAAC,cAO3DX,EAAA1+C,UAAAu/C,iBAAA,SAAAC,EAAAH,GACA,IAAAC,EACA,IAAAA,EAAA,EAAqCA,EAAAhpD,KAAAqoD,eAAAnpD,UACrCc,KAAAqoD,eAAAW,GAAAD,aADmFC,KAKnFhpD,KAAAqoD,eAAAr0C,OAAAg1C,EAAA,GAA4DE,gBAAAH,cAM5DX,EAAA1+C,UAAAwL,eAAA,SAAAi0C,GACAnpD,KAAAoU,aAAArT,KAAAooD,IAOAf,EAAA1+C,UAAAqtC,iBAAA,WAEA,IADA,IAAAD,KACA73C,EAAA,EAA2BA,EAAAe,KAAA82C,cAAA53C,OAA+BD,IAC1D63C,EAAA/1C,KAAAf,KAAA82C,cAAA73C,GAAA6pD,cAEA,OAAAhS,GAOAsR,EAAA1+C,UAAA0/C,kBAAA,WAEA,IADA,IAAAf,KACAppD,EAAA,EAA2BA,EAAAe,KAAAqoD,eAAAnpD,OAAgCD,IAC3DopD,EAAAtnD,KAAAf,KAAAqoD,eAAAppD,GAAAiqD,eAEA,OAAAb,GAOAD,EAAA1+C,UAAA2/C,YAAA,WACA,OAAArpD,KAAA06B,UAEA0tB,EAAA1+C,UAAAwX,QAAA,WACA,IAAAlB,EAAAhgB,KACA,OACAgoD,MAAA,WAEA,OADAhoC,EAAAyiC,UAAA,EACAziC,EAAA0a,SAAA1a,EAAAyiC,WAEAxiC,IAAA,WAEA,OADAD,EAAAyiC,UAAA,EACAziC,EAAA0a,SAAA1a,EAAAyiC,aASA2F,EAAA1+C,UAAAsL,gBAAA,WACA,OAAAhV,KAAAoU,cAEAg0C,EA5IA,GA+IAkB,GAAA,SAAAlkD,EAAAmkD,GAIA,OAHAA,GAAApB,KACAA,GAAA,IAAAC,GAAAhjD,IAEA+iD,IAyiBA,IAAAzjB,GAAA,QAmBA,IAwEAp8B,GACAkhD,GAzEAC,GAjBA,SAAA/kB,GACA,IAAA7kC,EAAA6kC,EAAA7kC,MAAA,mFACA,IAAAA,EACA,UAAAmK,MAAA,oBAAA06B,GAWA,OAPAglB,MAAAznD,SAAApC,EAAA,OACA8pD,MAAA1nD,SAAApC,EAAA,OACA+pD,MAAA3nD,SAAApC,EAAA,OACA6B,IAAA7B,EAAA,OACAgqD,MAAAhqD,EAAA,SAQA,SAAAiqD,GAAAj1C,EAAAT,GACA,IAAA21C,EAAAC,EAAAC,EAAAC,EAIAD,EApXA,SAAAE,GA0DA,OAzDA,WACA,SAAAC,EAAAp5B,EAAArG,GACA3qB,KAAAgxB,OACAhxB,KAAA2qB,UAoDA,OAlDAy/B,EAAA1gD,UAAAgX,MAAA,SAAApY,GACA,IAAAq/C,EAEAqC,EADA95C,KAEA,IACAy3C,EAAAD,GAAA1nD,KAAAgxB,KAAA1oB,GAEA,MAAA6K,GACA,UAAA0V,EAAA1V,EAAAnT,KAAA2qB,SAEA,IACA,IAAApH,EAAAqI,QAAAtjB,EAAAib,UACAA,GACAhQ,EAAAG,KAAA,mIAGA,IAAA22C,GACA9mC,WACAqJ,gBAAAtkB,EAAAskB,gBACAwK,YAAAxL,QAAAtjB,EAAA8uB,aACA1V,aAAA,GAEApZ,EAAAgiD,WACAN,EAAA,IAAAG,EAAA7hD,EAAAgiD,WACAp6C,EAAAosB,IAAA0tB,EAAAtpC,MAAAinC,EAAA0C,EAAArqD,KAAA2qB,UAGAza,EAAAosB,IAAAqrB,EAAAjnC,MAAA2pC,GAGA,MAAAl3C,GACA,UAAA0V,EAAA1V,EAAAnT,KAAA2qB,SAEA,GAAAriB,EAAAyM,cAEA,IADA,IAAAszC,EAAA//C,EAAAyM,cAAAq0C,oBACAnqD,EAAA,EAAmCA,EAAAopD,EAAAnpD,OAA2BD,IAC9DiR,EAAAosB,IAAA+rB,EAAAppD,GAAA+3C,QAAA9mC,EAAAosB,KAA4EguB,UAAAN,EAAA1hD,UAAAqiB,QAAA3qB,KAAA2qB,UAO5E,QAAA4/B,KAJAjiD,EAAAgiD,YACAp6C,EAAAvO,IAAAqoD,EAAAQ,wBAEAt6C,EAAAya,WACA3qB,KAAA2qB,QAAA8/B,MACAzqD,KAAA2qB,QAAA8/B,MAAAj5C,eAAA+4C,QAAAvqD,KAAA2qB,QAAA+/B,cACAx6C,EAAAya,QAAA5pB,KAAAwpD,GAGA,OAAAr6C,GAEAk6C,EAvDA,GAmXAA,CADAJ,EAzbA,SAAAW,EAAA91C,GAmEA,OAlEA,WACA,SAAAs1C,EAAA7hD,GACAtI,KAAAsI,UA8DA,OA5DA6hD,EAAAzgD,UAAAgX,MAAA,SAAAZ,EAAAxX,EAAAqiB,GACA,IAAAo/B,EAAA,IAAAY,GACAC,wBAAAjgC,EAAAusB,qBACAp3B,WACA+qC,YAAAlgC,EAAA1B,SACA6hC,kBAAA9qD,KAAAsI,QAAAwiD,kBACAC,aAAA/qD,KAAAsI,QAAAyiD,aACAC,eAAAhrD,KAAAsI,QAAA2iD,wBACAC,kBAAAlrD,KAAAsI,QAAA4iD,kBACAC,kBAAAnrD,KAAAsI,QAAA6iD,kBACAC,kBAAAprD,KAAAsI,QAAA8iD,kBACAC,mBAAArrD,KAAAsI,QAAA+iD,mBACAC,oBAAAtrD,KAAAsI,QAAAgjD,oBACAC,2BAAAvrD,KAAAsI,QAAAijD,6BAEAjvB,EAAAytB,EAAArpC,MAAApY,GASA,OARAtI,KAAAsqD,UAAAP,EAAAO,UACAtqD,KAAA+qD,aAAAhB,EAAAgB,aACA/qD,KAAAsI,QAAAkjD,yBACAxrD,KAAAwrD,uBAAAzB,EAAA0B,kBAAAzrD,KAAAsI,QAAAkjD,8BAEA/oD,IAAAzC,KAAAsI,QAAA4iD,wBAAAzoD,IAAAzC,KAAA+qD,eACA/qD,KAAA+qD,aAAAhB,EAAA2B,eAAA1rD,KAAA+qD,eAEAzuB,EAAAt8B,KAAA2rD,mBAEAxB,EAAAzgD,UAAAiiD,gBAAA,WACA,IAAAZ,EAAA/qD,KAAA+qD,aACA,GAAA/qD,KAAAsI,QAAAgjD,oBAAA,CACA,QAAA7oD,IAAAzC,KAAAsqD,UACA,SAEAS,EAAA,gCAA0Dl2C,EAAA+xC,aAAA5mD,KAAAsqD,WAE1D,OAAAtqD,KAAAsI,QAAAijD,2BACA,GAEAR,EACA,wBAAAA,EAAA,MAEA,IAEAZ,EAAAzgD,UAAA8gD,qBAAA,WACA,OAAAxqD,KAAAsqD,WAEAH,EAAAzgD,UAAAkiD,qBAAA,SAAAtB,GACAtqD,KAAAsqD,aAEAH,EAAAzgD,UAAAmiD,SAAA,WACA,OAAA7rD,KAAAsI,QAAAgjD,qBAEAnB,EAAAzgD,UAAAoiD,gBAAA,WACA,OAAA9rD,KAAA+qD,cAEAZ,EAAAzgD,UAAAqiD,kBAAA,WACA,OAAA/rD,KAAAsI,QAAA2iD,yBAEAd,EAAAzgD,UAAAsiD,iBAAA,WACA,OAAAhsD,KAAAwrD,wBAEArB,EAhEA,GAwbAA,CADAJ,EA9jBA,SAAAl1C,GAmIA,OAlIA,WACA,SAAA81C,EAAAriD,GACAtI,KAAAisD,QACAjsD,KAAAksD,UAAA5jD,EAAAwX,SACA9f,KAAAmsD,aAAA7jD,EAAAuiD,YACA7qD,KAAAosD,yBAAA9jD,EAAAsiD,wBACAtiD,EAAAwiD,oBACA9qD,KAAAqsD,mBAAA/jD,EAAAwiD,kBAAA7qD,QAAA,YAEAD,KAAAssD,gBAAAhkD,EAAA0iD,eACAhrD,KAAA+qD,aAAAziD,EAAAyiD,aACAziD,EAAA4iD,oBACAlrD,KAAAusD,mBAAAjkD,EAAA4iD,kBAAAjrD,QAAA,YAEAqI,EAAA6iD,mBACAnrD,KAAAwsD,mBAAAlkD,EAAA6iD,kBAAAlrD,QAAA,WACA,MAAAD,KAAAwsD,mBAAAtgD,OAAAlM,KAAAwsD,mBAAAttD,OAAA,KACAc,KAAAwsD,oBAAA,MAIAxsD,KAAAwsD,mBAAA,GAEAxsD,KAAAysD,mBAAAnkD,EAAA8iD,kBACAprD,KAAA0sD,+BAAA73C,EAAA83C,wBACA3sD,KAAA4sD,YAAA,EACA5sD,KAAA6sD,QAAA,EAsGA,OApGAlC,EAAAjhD,UAAAgiD,eAAA,SAAA39B,GAOA,OANA/tB,KAAAusD,oBAAA,IAAAx+B,EAAAztB,QAAAN,KAAAusD,sBAEA,QADAx+B,IAAAvtB,UAAAR,KAAAusD,mBAAArtD,SACAgN,OAAA,UAAA6hB,EAAA7hB,OAAA,KACA6hB,IAAAvtB,UAAA,KAGAutB,GAEA48B,EAAAjhD,UAAA+hD,kBAAA,SAAA92C,GAGA,OAFAA,IAAA1U,QAAA,WACA0U,EAAA3U,KAAA0rD,eAAA/2C,IACA3U,KAAAwsD,oBAAA,IAAA73C,GAEAg2C,EAAAjhD,UAAAoX,IAAA,SAAAlU,EAAAsT,EAAAvgB,EAAA8rB,GAEA,GAAA7e,EAAA,CAGA,IAAAwc,EAAA0jC,EAAAC,EAAAC,EAAA/tD,EACA,GAAAihB,KAAAvL,SAAA,CACA,IAAAs4C,EAAAjtD,KAAAmsD,aAAAjsC,EAAAvL,UAeA,GAbA3U,KAAAosD,yBAAAlsC,EAAAvL,aAEAhV,GAAAK,KAAAosD,yBAAAlsC,EAAAvL,WACA,IACAhV,EAAA,GAGAstD,IAAA5oC,MAAArkB,KAAAosD,yBAAAlsC,EAAAvL,iBAMAlS,IAAAwqD,EAEA,YADAjtD,KAAAisD,KAAAlrD,KAAA6L,GAKAogD,GADAF,GADAG,IAAAzsD,UAAA,EAAAb,IACAX,MAAA,OACA8tD,EAAA5tD,OAAA,GAIA,GADA6tD,GADA3jC,EAAAxc,EAAA5N,MAAA,OACAoqB,EAAAlqB,OAAA,GACAghB,KAAAvL,SACA,GAAA8W,EAMA,IAAAxsB,EAAA,EAAmCA,EAAAmqB,EAAAlqB,OAAkBD,IACrDe,KAAAktD,oBAAAC,YAAiEC,WAAavgD,KAAA7M,KAAA4sD,YAAA3tD,EAAA,EAAAooB,OAAA,IAAApoB,EAAAe,KAAA6sD,QAAA,GAC9Et/B,UAA2C1gB,KAAAigD,EAAA5tD,OAAAD,EAAAooB,OAAA,IAAApoB,EAAA+tD,EAAA9tD,OAAA,GAC3C8F,OAAAhF,KAAAyrD,kBAAAvrC,EAAAvL,iBARA3U,KAAAktD,oBAAAC,YAA6DC,WAAavgD,KAAA7M,KAAA4sD,YAAA,EAAAvlC,OAAArnB,KAAA6sD,SAC1Et/B,UAAuC1gB,KAAAigD,EAAA5tD,OAAAmoB,OAAA2lC,EAAA9tD,QACvC8F,OAAAhF,KAAAyrD,kBAAAvrC,EAAAvL,YAUA,IAAAyU,EAAAlqB,OACAc,KAAA6sD,SAAAE,EAAA7tD,QAGAc,KAAA4sD,aAAAxjC,EAAAlqB,OAAA,EACAc,KAAA6sD,QAAAE,EAAA7tD,QAEAc,KAAAisD,KAAAlrD,KAAA6L,KAEA+9C,EAAAjhD,UAAAqX,QAAA,WACA,WAAA/gB,KAAAisD,KAAA/sD,QAEAyrD,EAAAjhD,UAAAgX,MAAA,SAAAC,GAEA,GADA3gB,KAAAktD,oBAAA,IAAAltD,KAAA0sD,gCAAoFnC,KAAAvqD,KAAAssD,gBAAAe,WAAA,OACpFrtD,KAAAysD,mBACA,QAAA93C,KAAA3U,KAAAmsD,aACA,GAAAnsD,KAAAmsD,aAAA36C,eAAAmD,GAAA,CACA,IAAA3P,EAAAhF,KAAAmsD,aAAAx3C,GACA3U,KAAAosD,yBAAAz3C,KACA3P,IAAAqf,MAAArkB,KAAAosD,yBAAAz3C,KAEA3U,KAAAktD,oBAAAI,iBAAAttD,KAAAyrD,kBAAA92C,GAAA3P,GAKA,GADAhF,KAAAksD,UAAArrC,OAAAF,EAAA3gB,MACAA,KAAAisD,KAAA/sD,OAAA,GACA,IAAA6rD,OAAA,EACAwC,EAAA97C,KAAA+7C,UAAAxtD,KAAAktD,oBAAAO,UACAztD,KAAA+qD,aACAA,EAAA/qD,KAAA+qD,aAEA/qD,KAAAqsD,qBACAtB,EAAA/qD,KAAAqsD,oBAEArsD,KAAA+qD,eACA/qD,KAAAsqD,UAAAiD,EAEA,OAAAvtD,KAAAisD,KAAA9pD,KAAA,KAEAwoD,EAhIA,GA6jBAA,CADA91C,EAAA,IAAAX,EAAAW,EAAAT,IAEAS,IAEAq1C,EAxTA,SAAAr1C,GAkKA,OAzJA,WACA,SAAA64C,EAAAtoD,EAAAub,EAAAgtC,GACA3tD,KAAAoF,OACApF,KAAA0qD,aAAAiD,EAAAh5C,SACA3U,KAAA4tB,MAAAjN,EAAAiN,UACA5tB,KAAAipB,YACAjpB,KAAAk3C,wBACAl3C,KAAA4tD,KAAAjtC,EAAAitC,KACA5tD,KAAA6C,MAAA,KACA7C,KAAA2gB,UAEA3gB,KAAA6tD,SACA7tD,KAAAyqD,SA2IA,OAjIAiD,EAAAhkD,UAAA3I,KAAA,SAAAgtB,EAAAkU,EAAA/c,EAAAq2B,EAAAj1C,GACA,IAAA4jD,EAAAlqD,KAAA8tD,EAAA9tD,KAAA2gB,QAAA5L,cAAAyzC,OACAxoD,KAAA6tD,MAAA9sD,KAAAgtB,GACA,IAAAggC,EAAA,SAAA56C,EAAA6d,EAAA8X,GACAohB,EAAA2D,MAAA75C,OAAAk2C,EAAA2D,MAAAvtD,QAAAytB,GAAA,GACA,IAAAigC,EAAAllB,IAAAohB,EAAAQ,aACAnP,EAAAtS,UAAA91B,GACA7M,EAAA,MAAwC2pB,WAAY,QACpD1c,EAAAI,KAAA,YAAAm1B,EAAA,+EAMAohB,EAAAO,MAAA3hB,IAAAyS,EAAA98C,SACAyrD,EAAAO,MAAA3hB,IAA6D9X,OAAA1oB,QAAAizC,IAE7DpoC,IAAA+2C,EAAArnD,QACAqnD,EAAArnD,MAAAsQ,GAEA7M,EAAA6M,EAAA6d,EAAAg9B,EAAAllB,KAGAmlB,GACA5lC,YAAAroB,KAAA2gB,QAAA0H,YACA89B,UAAAjhC,EAAAihC,UACAr3B,SAAA5J,EAAA4J,SACA47B,aAAAxlC,EAAAwlC,cAEAz1C,EAAAJ,EAAAH,eAAAqZ,EAAA7I,EAAAtQ,iBAAA5U,KAAA2gB,QAAA9L,GACA,GAAAI,EAAA,CAIA,IAqDAi5C,EACAC,EAtDAC,EAAA,SAAAF,GACA,IAAA1pB,EACA6pB,EAAAH,EAAAv5C,SACAsU,EAAAilC,EAAAjlC,SAAAhpB,QAAA,cASAguD,EAAAr5C,iBAAAK,EAAAunB,QAAA6xB,GACAJ,EAAA5lC,cACA4lC,EAAAn/B,SAAA7Z,EAAA9S,KAAA+nD,EAAAvpC,QAAAmO,UAAA,GAAA7Z,EAAAwtB,SAAAwrB,EAAAr5C,iBAAAq5C,EAAA9H,aACAlxC,EAAAqtB,eAAA2rB,EAAAn/B,WAAA7Z,EAAAotB,4BACA4rB,EAAAn/B,SAAA7Z,EAAA9S,KAAA8rD,EAAA9H,UAAA8H,EAAAn/B,YAGAm/B,EAAAt5C,SAAA05C,EACA,IAAAC,EAAA,IAAAjhC,EAAAM,MAAAu8B,EAAAvpC,SACA2tC,EAAAjX,gBAAA,EACA6S,EAAAjhC,SAAAolC,GAAAplC,GACA/D,EAAAwX,WAAA6e,EAAA7e,aACAuxB,EAAAvxB,WAAA,GAEA6e,EAAA9e,UACA+H,EAAAspB,EAAAnqB,WAAA1a,EAAAqlC,EAAApE,EAAA3O,EAAAM,WAAAoS,cACAplC,EACAklC,EAAAvpB,EAAA,KAAA6pB,GAGAN,EAAA,KAAAvpB,EAAA6pB,GAGA9S,EAAA98C,OACAsvD,EAAA,KAAA9kC,EAAAolC,IAKAnE,EAAAO,MAAA4D,IACAnE,EAAAO,MAAA4D,GAAA/lD,QAAAmgC,UACA8S,EAAA9S,SAIA,IAAApgC,GAAAimD,EAAApE,EAAA+D,GAAAjrD,MAAAimB,EAAA,SAAA9V,EAAA6d,GACA+8B,EAAA56C,EAAA6d,EAAAq9B,KAJAN,EAAA,KAAA7D,EAAAO,MAAA4D,GAAAr9B,KAAAq9B,IAWA1tC,EAAAwE,EAAAnlB,KAAA2gB,SACAshB,IACAthB,EAAAuhB,IAAAqZ,EAAA9e,SAAA,eAEA8e,EAAA9e,UACA9b,EAAAitC,KAAA,yBACAjtC,EAAA4tC,WACAL,EAAAJ,EAAAU,eAAAzgC,EAAA7I,EAAAtQ,iBAAA+L,EAAA9L,EAAAI,GAGAk5C,EAAAL,EAAAW,WAAA1gC,EAAA7I,EAAAtQ,iBAAA+L,EAAA9L,EAAAI,IAIA0L,EAAA4tC,WACAL,EAAAj5C,EAAAyxC,aAAA34B,EAAA7I,EAAAtQ,iBAAA+L,EAAA9L,GAGAs5C,EAAAl5C,EAAAy5C,SAAA3gC,EAAA7I,EAAAtQ,iBAAA+L,EAAA9L,EAAA,SAAA6V,EAAAwjC,GACAxjC,EACAqjC,EAAArjC,GAGA0jC,EAAAF,KAKAA,EACAA,EAAAv5C,SAIAy5C,EAAAF,GAHAH,EAAAG,GAMAC,GACAA,EAAAQ,KAAAP,EAAAL,QA/FAA,GAAoC/kC,QAAA,qCAAA+E,KAkGpC2/B,EAvJA,GA+SAA,CAAA74C,GACA,IAmCAwrC,EAnCAx6C,EAtEA,SAAAgP,EAAAu1C,EAAAsD,GACA,IAAA7nD,EAAA,SAAA9C,EAAAuF,EAAAhC,GAQA,GAPA,mBAAAgC,GACAhC,EAAAgC,EACAA,EAAA0f,EAAAhoB,KAAAsI,aAGAA,EAAA0f,EAAAhoB,KAAAsI,gBAEAhC,EAAA,CACA,IAAAsoD,EAAA5uD,KACA,WAAA6uD,QAAA,SAAAC,EAAAC,GACAlpD,EAAAiD,KAAA8lD,EAAA7rD,EAAAuF,EAAA,SAAAoiB,EAAA1J,GACA0J,EACAqkC,EAAArkC,GAGAokC,EAAA9tC,OAMAhhB,KAAAgD,MAAAD,EAAAuF,EAAA,SAAAoiB,EAAAsG,EAAArG,EAAAriB,GACA,GAAAoiB,EACA,OAAApkB,EAAAokB,GAEA,IAAAxa,EACA,IAEAA,EADA,IAAAk6C,EAAAp5B,EAAArG,GACAjK,MAAApY,GAEA,MAAAoiB,GACA,OAAApkB,EAAAokB,GAEApkB,EAAA,KAAA4J,MAIA,OAAArK,EA+BAmpD,CAAAn6C,EAAAo1C,GACAjnD,EArJA,SAAA6R,EAAAu1C,EAAAsD,GACA,IAAA1qD,EAAA,SAAAD,EAAAuF,EAAAhC,GAQA,GAPA,mBAAAgC,GACAhC,EAAAgC,EACAA,EAAA0f,EAAAhoB,KAAAsI,aAGAA,EAAA0f,EAAAhoB,KAAAsI,gBAEAhC,EAAA,CACA,IAAAsoD,EAAA5uD,KACA,WAAA6uD,QAAA,SAAAC,EAAAC,GACA/rD,EAAA8F,KAAA8lD,EAAA7rD,EAAAuF,EAAA,SAAAoiB,EAAA1J,GACA0J,EACAqkC,EAAArkC,GAGAokC,EAAA9tC,OAMA,IAAAiuC,EACAtB,OAAA,EACAuB,EAAA,IAAA5F,GAAAtpD,MAAAsI,EAAA6mD,oBAGA,GAFA7mD,EAAAyM,cAAAm6C,EACAD,EAAA,IAAA5hC,EAAAM,MAAArlB,GACAA,EAAAqlD,aACAA,EAAArlD,EAAAqlD,iBAEA,CACA,IAAAh5C,EAAArM,EAAAqM,UAAA,QACAwxC,EAAAxxC,EAAA1U,QAAA,iBACA0tD,GACAh5C,WACA0T,YAAA4mC,EAAA5mC,YACAyG,SAAAmgC,EAAAngC,UAAA,GACAla,iBAAAuxC,EACAA,YACAuE,aAAA/1C,IAGAma,UAAA,MAAA6+B,EAAA7+B,SAAAzK,OAAA,KACAspC,EAAA7+B,UAAA,KAGA,IAAAsgC,EAAA,IAAA1B,EAAA1tD,KAAAivD,EAAAtB,GACA3tD,KAAAkqD,cAAAkF,EAGA9mD,EAAA08B,SACA18B,EAAA08B,QAAA5gC,QAAA,SAAAogC,GACA,IAAA6qB,EAAApmC,EACA,GAAAub,EAAA8qB,aAGA,GAFArmC,EAAAub,EAAA8qB,YAAArvD,QAAA,eACAovD,EAAAH,EAAA1G,OAAA7kB,WAAA1a,EAAAgmC,EAAAG,EAAA5qB,EAAAl8B,QAAAk8B,EAAA7vB,qBACAkU,EACA,OAAAviB,EAAA+oD,QAIAH,EAAA3qB,UAAAC,KAIA,IAAAn8B,GAAA4mD,EAAAG,EAAAzB,GACA3qD,MAAAD,EAAA,SAAAoQ,EAAA6d,GACA,GAAA7d,EACA,OAAA7M,EAAA6M,GAEA7M,EAAA,KAAA0qB,EAAAo+B,EAAA9mD,IACiBA,IAGjB,OAAAtF,EA0EA2qB,CAAA9Y,EAAAo1C,EAAAC,GACAtoD,EAAA6nD,GAAA,IAAA/kB,IACA6qB,GACA7qB,SAAA9iC,EAAA8nD,MAAA9nD,EAAA+nD,MAAA/nD,EAAAgoD,OACApmD,OACAs+B,QACA5tB,cACA6tB,uBACA0B,wBACA5uB,cACA6lB,YACAryB,UACAiM,aAAAO,GACAwY,WACAs9B,gBAAAZ,EACAI,iBAAAH,EACAI,UAAAH,EACAyD,cAAAxD,EACArkD,SACA7C,QACA6lB,YACA6+B,iBACAl/B,QACA4/B,cAAAkB,GACA/1C,UAGA5L,EAAA,SAAA04C,GACA,kBACA,IAAAvhD,EAAAf,OAAA2rB,OAAA22B,EAAA32C,WAEA,OADA22C,EAAA1uB,MAAA7yB,EAAAsD,MAAAsH,UAAA2a,MAAAvb,KAAA3H,UAAA,IACArC,IAIA0wD,EAAAzxD,OAAA2rB,OAAA6lC,GACA,QAAAx+C,KAAAw+C,EAAAztB,KAGA,sBADAue,EAAAkP,EAAAztB,KAAA/wB,IAEAy+C,EAAAz+C,EAAAjQ,eAAA6G,EAAA04C,QAIA,QAAA5E,KADA+T,EAAAz+C,GAAAhT,OAAA2rB,OAAA,MACA22B,EAEAmP,EAAAz+C,GAAA0qC,EAAA36C,eAAA6G,EAAA04C,EAAA5E,IAYA,OAFA8T,EAAAvsD,MAAAusD,EAAAvsD,MAAAyR,KAAA+6C,GACAD,EAAA1pD,OAAA0pD,EAAA1pD,OAAA4O,KAAA+6C,GACAA,EAMA,IAAAC,MAEAzrB,GAAA,aACAA,GAAAt6B,UAAA3L,OAAAglB,OAAA,IAAAgf,IACAM,wBAAA,WACA,UAEAlgC,KAAA,SAAAogC,EAAAC,GACA,OAAAD,EAGAviC,KAAA+iC,gBAAAP,EAAAD,GAAAxU,KAFAyU,GAIAktB,MAAA,SAAAhtB,EAAAt8B,EAAAE,EAAAqpD,GACA,IAAAC,EAAA,IAAAC,eACAC,GAAAxnD,GAAAynD,gBAAAznD,GAAA0nD,UAQA,SAAAC,EAAAL,EAAAtpD,EAAAqpD,GACAC,EAAAM,QAAA,KAAAN,EAAAM,OAAA,IACA5pD,EAAAspD,EAAAO,aAAAP,EAAAQ,kBAAA,kBAEA,mBAAAT,GACAA,EAAAC,EAAAM,OAAAxtB,GAZA,mBAAAktB,EAAAS,kBACAT,EAAAS,iBAAA,YAEA7G,GAAArqD,MAAA,iBAAAujC,EAAA,KACAktB,EAAAU,KAAA,MAAA5tB,EAAAotB,GACAF,EAAAW,iBAAA,SAAAnqD,GAAA,4CACAwpD,EAAAY,KAAA,MASAloD,GAAAynD,iBAAAznD,GAAA0nD,UACA,IAAAJ,EAAAM,QAAAN,EAAAM,QAAA,KAAAN,EAAAM,OAAA,IACA5pD,EAAAspD,EAAAO,cAGAR,EAAAC,EAAAM,OAAAxtB,GAGAotB,EACAF,EAAAa,mBAAA,WACA,GAAAb,EAAAc,YACAT,EAAAL,EAAAtpD,EAAAqpD,IAKAM,EAAAL,EAAAtpD,EAAAqpD,IAGAgB,SAAA,WACA,UAEAC,eAAA,WACAnB,OAEAf,SAAA,SAAA/5C,EAAAC,EAAAtM,EAAAuM,GAGAD,IAAA5U,KAAAsiC,eAAA3tB,KACAA,EAAAC,EAAAD,GAEAA,EAAArM,EAAA45B,IAAAliC,KAAAiiC,mBAAAttB,EAAArM,EAAA45B,KAAAvtB,EACArM,QAGA,IACAgG,EADAtO,KAAA+iC,gBAAApuB,EAAAtB,OAAA7G,SAAA8B,MACAo0B,IACA1iB,EAAAhgB,KACA,WAAA6uD,QAAA,SAAAC,EAAAC,GACA,GAAAzmD,EAAAuoD,cAAApB,GAAAnhD,GACA,IACA,IAAAwiD,EAAArB,GAAAnhD,GACA,OAAAwgD,GAAwC7lC,SAAA6nC,EAAAn8C,SAAArG,EAAAyiD,SAA+CC,aAAA,IAAA/iD,QAEvF,MAAAkF,GACA,OAAA47C,GAAuCp6C,SAAArG,EAAA0a,QAAA,sBAAA1a,EAAA,cAAA6E,EAAA6V,UAGvChJ,EAAA0vC,MAAAphD,EAAAhG,EAAAslD,KAAA,SAAApqD,EAAAwtD,GAEAvB,GAAAnhD,GAAA9K,EAEAsrD,GAA6B7lC,SAAAzlB,EAAAmR,SAAArG,EAAAyiD,SAA2CC,mBACvD,SAAAd,EAAAxtB,GACjBqsB,GAA4B3oD,KAAA,OAAA4iB,QAAA,IAAA0Z,EAAA,mBAAAwtB,EAAA,IAAA5hD,gBAK5B,IAAA2iD,GAAA,SAAAhpC,EAAA/kB,GAGA,OAFAoF,GAAA2f,EACAuhC,GAAAtmD,EACA8gC,IAOAykB,GAAA,SAAArjD,GACApF,KAAAoF,QAGAqjD,GAAA/+C,UAAA3L,OAAAglB,OAAA,IAAA0gB,IACAgrB,WAAA,SAAA95C,EAAA4tB,EAAA5hB,EAAA9L,EAAAI,GACA,WAAA45C,QAAA,SAAAqC,EAAAnC,GACA95C,EAAAy5C,SAAA/5C,EAAA4tB,EAAA5hB,EAAA9L,GACA85C,KAAAuC,GAAAC,MAAApC,QAKA,IAyCAqC,GAAA,SAAA/9C,EAAAjO,EAAAkD,GAkJA,OACAwY,IAZA,SAAA3N,EAAAk+C,GACA/oD,EAAAgpD,gBAAA,SAAAhpD,EAAAgpD,eAGA,YAAAhpD,EAAAgpD,eA3BA,SAAAn+C,EAAAk+C,GACA,IACA18C,EAAAxB,EAAAwB,UAAA08C,EACAE,KACAv2B,GAAA7nB,EAAA/M,MAAA,qBAAA+M,EAAA6V,SAAA,+CAAArU,EACA68C,EAAA,SAAAr+C,EAAAlU,EAAAwyD,QACAhvD,IAAA0Q,EAAAsW,QAAAxqB,IACAsyD,EAAAxwD,KANA,mBAMAd,QAAA,YAA0DgC,SAAAkR,EAAAtG,KAAA,SAAA5N,EAAA,IAC1DgB,QAAA,YAA2CwxD,GAC3CxxD,QAAA,cAA6CkT,EAAAsW,QAAAxqB,MAG7CkU,EAAAtG,OACA2kD,EAAAr+C,EAAA,MACAq+C,EAAAr+C,EAAA,UACAq+C,EAAAr+C,EAAA,MACA6nB,GAAA,YAAA7nB,EAAAtG,KAAA,aAAAsG,EAAAkU,OAAA,SAAAkqC,EAAApvD,KAAA,OAEAgR,EAAArT,QAAAqT,EAAAsW,SAAAnhB,EAAAopD,UAAA,KACA12B,GAAA,kBAAA7nB,EAAArT,OAEAsF,EAAAmO,OAAA1Q,MAAAm4B,GAOA22B,CAAAx+C,EAAAk+C,GAEA,mBAAA/oD,EAAAgpD,gBACAhpD,EAAAgpD,eAAA,MAAAn+C,EAAAk+C,GA9IA,SAAAl+C,EAAAk+C,GACA,IAGAO,EACA52B,EAJArtB,EAAA,sBAAAyD,EAAAigD,GAAA,IAEAvX,EAAAzmC,EAAAxB,SAAAM,cAAA,OAGAo/C,KACA58C,EAAAxB,EAAAwB,UAAA08C,EACAQ,EAAAl9C,EAAA9U,MAAA,uBACAi6C,EAAAnsC,KACAmsC,EAAAgY,UAAA,qBACA92B,EAAA,QAAA7nB,EAAA/M,MAAA,qBAAA+M,EAAA6V,SAAA,wCACA,uBAAArU,EAAA,KAAAk9C,EAAA,QACA,IAAAL,EAAA,SAAAr+C,EAAAlU,EAAAwyD,QACAhvD,IAAA0Q,EAAAsW,QAAAxqB,IACAsyD,EAAAxwD,KAbA,qEAaAd,QAAA,YAA0DgC,SAAAkR,EAAAtG,KAAA,SAAA5N,EAAA,IAC1DgB,QAAA,YAA2CwxD,GAC3CxxD,QAAA,cAA6CkT,EAAAsW,QAAAxqB,MAG7CkU,EAAAtG,OACA2kD,EAAAr+C,EAAA,MACAq+C,EAAAr+C,EAAA,UACAq+C,EAAAr+C,EAAA,MACA6nB,GAAA,WAAA7nB,EAAAtG,KAAA,aAAAsG,EAAAkU,OAAA,eAAAkqC,EAAApvD,KAAA,aAEAgR,EAAArT,QAAAqT,EAAAsW,SAAAnhB,EAAAopD,UAAA,KACA12B,GAAA,0BAAA7nB,EAAArT,MAAAd,MAAA,MAAAqlB,MAAA,GAAAliB,KAAA,UAEA23C,EAAAiY,UAAA/2B,EAEArpB,EAAAC,UAAAyB,EAAAxB,UACA,mDACA,yBACA,sBACA,kBACA,aACA,IACA,8BACA,mBACA,sBACA,kBACA,kBACA,IACA,4BACA,kBACA,kBACA,aACA,yBACA,IACA,iCACA,kBACA,IACA,2BACA,mBACA,qBACA,yBACA,aACA,IACA,0BACA,cACA,IACA,+BACA,cACA,qBACA,uBACA,iCACA,KACA1P,KAAA,OAA2ByL,MAAA,kBAC3BksC,EAAAruC,MAAAyH,SACA,iCACA,yBACA,yBACA,qBACA,6BACA,0BACA,cACA,gBACA,uBACA/Q,KAAA,KACA,gBAAAmG,EAAA0pD,MACAJ,EAAAK,YAAA,WACA,IAAApgD,EAAAwB,EAAAxB,SACAkrC,EAAAlrC,EAAAkrC,KACAA,IACAlrC,EAAA5B,eAAAtC,GACAovC,EAAAmV,aAAApY,EAAAjoC,EAAA5B,eAAAtC,IAGAovC,EAAA/pC,aAAA8mC,EAAAiD,EAAArqC,YAEAy/C,cAAAP,KAEiB,KA2CjBQ,CAAAj/C,EAAAk+C,IAWAgB,OA7CA,SAAAtkC,GACAzlB,EAAAgpD,gBAAA,SAAAhpD,EAAAgpD,eAGA,YAAAhpD,EAAAgpD,gBACA,mBAAAhpD,EAAAgpD,gBACAhpD,EAAAgpD,eAAA,SAAAvjC,GAZA,SAAAA,GACA,IAAAvuB,EAAA6T,EAAAxB,SAAA5B,eAAA,sBAAAmB,EAAA2c,IACAvuB,GACAA,EAAAuT,WAAAE,YAAAzT,GAKA8yD,CAAAvkC,MAsWAwkC,IAp8VAj1B,mBAAA,EAEAk1B,SAAA,EAIAjvC,UAAA,EAEAkvC,MAAA,EAMA7kC,SAEAvK,OAAA,EAIA6M,eAAA,EAEAwiC,UAAA,EAIA5jC,SAAA,GAKAzG,aAAA,EAOAF,KAAA,EAEAiP,aAAA,EAIAqf,WAAA,KAGAC,WAAA,KAEA7a,QAAA,IAo5VA,GAAAxoB,OAAAjO,KACA,QAAAvD,MAAAwR,OAAAjO,KACAiO,OAAAjO,KAAAoM,eAAA3P,MACA0wD,GAAA1wD,IAAAwR,OAAAjO,KAAAvD,MAj0VA,SAAAwR,EAAA/K,GAEA+I,EAAA/I,EAAAqJ,EAAAyB,cAAAC,SACA5Q,IAAA6F,EAAAynD,iBACAznD,EAAAynD,eAAA,yDAAA/jD,KAAAqH,EAAA7G,SAAAmmD,WAQArqD,EAAAwnD,MAAAxnD,EAAAwnD,QAAA,EACAxnD,EAAA0nD,UAAA1nD,EAAA0nD,YAAA,EAEA1nD,EAAAsqD,KAAAtqD,EAAAsqD,OAAAtqD,EAAAynD,eAAA,UACAznD,EAAA0pD,IAAA1pD,EAAA0pD,MAAA,aAAA3+C,EAAA7G,SAAAqmD,UACA,WAAAx/C,EAAA7G,SAAAqmD,UACA,aAAAx/C,EAAA7G,SAAAqmD,UACAx/C,EAAA7G,SAAAsmD,MACAz/C,EAAA7G,SAAAsmD,KAAA5zD,OAAA,GACAoJ,EAAAynD,eAAA,cACA,cACA,IAAAnjC,EAAA,6CAAAhhB,KAAAyH,EAAA7G,SAAA4lB,MACAxF,IACAtkB,EAAAskB,kBAAA,SAEAnqB,IAAA6F,EAAAuoD,eACAvoD,EAAAuoD,cAAA,QAEApuD,IAAA6F,EAAAyqD,UACAzqD,EAAAyqD,SAAA,GAEAzqD,EAAA8f,eACA9f,EAAA+f,YAAA,OAmyVA2qC,CAAA3/C,OAAAk/C,IACAA,GAAAvtB,QAAAutB,GAAAvtB,YACA3xB,OAAA4/C,eACAV,GAAAvtB,QAAAutB,GAAAvtB,QAAAh1B,OAAAqD,OAAA4/C,eAEA,IAEA32B,GACA1pB,GACAnH,GAJArG,GAhQA,SAAAiO,EAAA/K,GACA,IAAAuJ,EAAAwB,EAAAxB,SACAzM,EAAA0kD,KACA1kD,EAAAkD,UACA,IAAAuM,EAAAzP,EAAAyP,YACAmvB,EAAAitB,GAAA3oD,EAAAlD,EAAAmO,QACA0B,EAAA,IAAA+uB,EACAnvB,EAAAK,eAAAD,GACA7P,EAAA4+B,cACA5+B,EAAAqjD,gBA9QA,SAAArjD,EAAAkD,GAWAA,EAAAopD,cAAA,IAAAppD,EAAAopD,SAAAppD,EAAAopD,SAAA,gBAAAppD,EAAA0pD,IATA,EAEA,EAQA1pD,EAAA4qD,UACA5qD,EAAA4qD,UACA/zD,MAAA,SAAAqU,GACAlL,EAAAopD,UAdA,GAeA9uD,QAAAM,IAAAsQ,IAGAG,KAAA,SAAAH,GACAlL,EAAAopD,UAlBA,GAmBA9uD,QAAAM,IAAAsQ,IAGAE,KAAA,SAAAF,GACAlL,EAAAopD,UAtBA,GAuBA9uD,QAAA8Q,KAAAF,IAGA3Q,MAAA,SAAA2Q,GACAlL,EAAAopD,UA1BA,GA2BA9uD,QAAAC,MAAA2Q,OAKA,QAAAvU,EAAA,EAAuBA,EAAAqJ,EAAA4qD,QAAAh0D,OAA4BD,IACnDmG,EAAAmO,OAAAK,YAAAtL,EAAA4qD,QAAAj0D,IA0OAk0D,CAAA/tD,EAAAkD,GACA,IAAAipD,EAAAH,GAAA/9C,EAAAjO,EAAAkD,GACA8qD,EAAAhuD,EAAAguD,MAAA9qD,EAAA8qD,OA/EA,SAAA//C,EAAA/K,EAAAiL,GACA,IAAA6/C,EAAA,KACA,mBAAA9qD,EAAA0pD,IACA,IACAoB,OAAA,IAAA//C,EAAAggD,aAAA,KAAAhgD,EAAAggD,aAEA,MAAA3hD,IAEA,OACA4hD,OAAA,SAAAvlC,EAAAijC,EAAAta,EAAA5kC,GACA,GAAAshD,EAAA,CACA7/C,EAAAI,KAAA,UAAAoa,EAAA,cACA,IACAqlC,EAAAG,QAAAxlC,EAAAjc,GACAshD,EAAAG,QAAAxlC,EAAA,aAAAijC,GACAta,GACA0c,EAAAG,QAAAxlC,EAAA,QAAAtc,KAAA+7C,UAAA9W,IAGA,MAAAvjC,GAEAI,EAAA1Q,MAAA,mBAAAkrB,EAAA,sCAIAylC,OAAA,SAAAzlC,EAAAgjC,EAAAra,GACA,IAAApa,EAAA82B,KAAAK,QAAA1lC,GACA2lC,EAAAN,KAAAK,QAAA1lC,EAAA,cACAsE,EAAA+gC,KAAAK,QAAA1lC,EAAA,SAGA,GAFA2oB,QACArkB,KAAA,KACAqhC,GAAA3C,EAAAC,cACA,IAAA/iD,KAAA8iD,EAAAC,cAAA2C,YACA,IAAA1lD,KAAAylD,GAAAC,WACAliD,KAAA+7C,UAAA9W,KAAArkB,EAEA,OAAAiK,IA2CAs3B,CAAAvgD,EAAA/K,EAAAlD,EAAAmO,SArCA,WACA,SAAAsgD,IACA,MACAztD,KAAA,UACA4iB,QAAA,qEAGA,IAAA8qC,GACAC,aAAA,SAAA/N,GAEA,OADA6N,KACA,GAEAG,cAAA,SAAAhO,GAEA,OADA6N,KACA,GAEAI,eAAA,SAAAjO,GAEA,OADA6N,KACA,IAGAzkC,EAAAG,YAAAukC,GAiBAI,CAAA9uD,EAAAyP,aAEAvM,EAAAgM,WACAlP,EAAAkP,UAAA8a,iBAAAG,YAAAjnB,EAAAgM,WAEA,IAAA6/C,EAAA,oBACA,SAAAhvC,EAAArmB,GACA,IAAA0oB,KACA,QAAAC,KAAA3oB,EACAA,EAAA0S,eAAAiW,KACAD,EAAAC,GAAA3oB,EAAA2oB,IAGA,OAAAD,EAGA,SAAA/S,EAAA4U,EAAA+qC,GACA,IAAAC,EAAAjyD,MAAAsH,UAAA2a,MAAAvb,KAAA3H,UAAA,GACA,kBACA,IAAAqiB,EAAA6wC,EAAArkD,OAAA5N,MAAAsH,UAAA2a,MAAAvb,KAAA3H,UAAA,IACA,OAAAkoB,EAAAsI,MAAAyiC,EAAA5wC,IAGA,SAAA8wC,EAAA5d,GAGA,IAFA,IACAjrC,EADAqG,EAAAD,EAAArE,qBAAA,SAEAvO,EAAA,EAA2BA,EAAA6S,EAAA5S,OAAmBD,IAE9C,IADAwM,EAAAqG,EAAA7S,IACAmH,KAAAvG,MAAAs0D,GAAA,CACA,IAAAI,EAAApvC,EAAA7c,GACAisD,EAAA7d,aACA,IAAAoa,EAAArlD,EAAAsmD,WAAA,GACAwC,EAAA5/C,SAAA9C,EAAArF,SAAA8B,KAAArO,QAAA,WAGAmF,EAAAS,OAAAirD,EAAAyD,EAAA9/C,EAAA,SAAAhJ,EAAA0H,EAAAjD,GACAiD,EACAo+C,EAAAzwC,IAAA3N,EAAA,WAGA1H,EAAArF,KAAA,WACAqF,EAAA6G,WACA7G,EAAA6G,WAAAY,QAAAhD,EAAAosB,IAGA7wB,EAAAsmD,UAAA7hD,EAAAosB,MAGqB,KAAA7wB,KAIrB,SAAA+oD,EAAAziD,EAAAzL,EAAAmuD,EAAAC,EAAAhe,GACA,IAAA6d,EAAApvC,EAAA7c,GACA+I,EAAAkjD,EAAAxiD,GACAwiD,EAAA3G,KAAA77C,EAAA3L,KACAswC,IACA6d,EAAA7d,cAqCAzhC,EAAAy5C,SAAA38C,EAAAzD,KAAA,KAAAimD,EAAA1/C,GACA85C,KAAA,SAAAT,IApCA,SAAAA,GACA,IAAA1qD,EAAA0qD,EAAAjlC,SACA8E,EAAAmgC,EAAAv5C,SACAo8C,EAAA7C,EAAA6C,QACA9C,GACAr5C,iBAAAK,EAAAunB,QAAAzO,GACApZ,SAAAoZ,EACA28B,aAAA38B,EACA1F,YAAAksC,EAAAlsC,aAIA,GAFA4lC,EAAA9H,UAAA8H,EAAAr5C,iBACAq5C,EAAAn/B,SAAAylC,EAAAzlC,UAAAm/B,EAAAr5C,iBACAm8C,EAAA,CACAA,EAAA2D,YACA,IAAAp4B,EAAA82B,EAAAI,OAAAzlC,EAAAgjC,EAAAwD,EAAA7d,YACA,IAAA+d,GAAAn4B,EAGA,OAFAy0B,EAAA4D,OAAA,OACAruD,EAAA,KAAAg2B,EAAA94B,EAAAuO,EAAAg/C,EAAAhjC,GAKAwjC,EAAAc,OAAAtkC,GACAwmC,EAAA5G,aAAAM,EACA7oD,EAAAS,OAAArC,EAAA+wD,EAAA,SAAAphD,EAAAjD,GACAiD,GACAA,EAAA7E,KAAAyf,EACAznB,EAAA6M,KAGAigD,EAAAE,OAAAvhD,EAAAzD,KAAAyiD,EAAAC,aAAAuD,EAAA7d,WAAAxmC,EAAAosB,KACAh2B,EAAA,KAAA4J,EAAAosB,IAAA94B,EAAAuO,EAAAg/C,EAAAhjC,MAMA6mC,CAAA1G,KACaiD,MAAA,SAAAzmC,GACb9nB,QAAAM,IAAAwnB,GACApkB,EAAAokB,KAGA,SAAAmqC,EAAAvuD,EAAAmuD,EAAA/d,GACA,QAAAz3C,EAAA,EAA2BA,EAAAmG,EAAA0vD,OAAA51D,OAAwBD,IACnDu1D,EAAApvD,EAAA0vD,OAAA71D,GAAAqH,EAAAmuD,EAAArvD,EAAA0vD,OAAA51D,QAAAD,EAAA,GAAAy3C,GAsHA,OA/FAtxC,EAAAb,MAAA,WAMA,OALAa,EAAA2vD,YACA3vD,EAAA4sD,IAAA,cArBA,gBAAA5sD,EAAA4sD,MACA5sD,EAAA4vD,WAAA/C,YAAA,WACA7sD,EAAA2vD,YACA9/C,EAAA27C,iBACAiE,EAAA,SAAA1hD,EAAAmpB,EAAA5qB,EAAAK,EAAAg/C,GACA59C,EACAo+C,EAAAzwC,IAAA3N,IAAA7E,MAAAyD,EAAAzD,MAEAguB,GACA3qB,EAAAC,UAAAyB,EAAAxB,SAAAyqB,EAAAvqB,OAIiBzJ,EAAAsqD,QAWjB5yD,KAAA+0D,WAAA,GACA,GAEA3vD,EAAA6vD,QAAA,WAA4F,OAAxD9C,cAAA/sD,EAAA4vD,YAAgCh1D,KAAA+0D,WAAA,GAAwB,GAK5F3vD,EAAA8vD,+BAAA,WACA,IAAAC,EAAAtjD,EAAArE,qBAAA,QACApI,EAAA0vD,UACA,QAAA71D,EAAA,EAA2BA,EAAAk2D,EAAAj2D,OAAkBD,KAC7C,oBAAAk2D,EAAAl2D,GAAAm2D,KAAAD,EAAAl2D,GAAAm2D,IAAAv1D,MAAA,eACAs1D,EAAAl2D,GAAAmH,KAAAvG,MAAAs0D,KACA/uD,EAAA0vD,OAAA/zD,KAAAo0D,EAAAl2D,KAQAmG,EAAAiwD,oBAAA,WAAgD,WAAAxG,QAAA,SAAAC,EAAAC,GAChD3pD,EAAA8vD,iCACApG,OAMA1pD,EAAAsxC,WAAA,SAAA4e,GAA6C,OAAAlwD,EAAAmwD,SAAA,EAAAD,GAAA,IAC7ClwD,EAAAmwD,QAAA,SAAAd,EAAA/d,EAAAka,GAIA,OAHA6D,GAAA7D,KAAA,IAAAA,GACA37C,EAAA27C,iBAEA,IAAA/B,QAAA,SAAAC,EAAAC,GACA,IAAAyG,EACAC,EACAC,EACAC,EACAH,EAAAC,EAAA,IAAAxnD,KAGA,KADA0nD,EAAAvwD,EAAA0vD,OAAA51D,SAEAu2D,EAAA,IAAAxnD,KACAynD,EAAAD,EAAAD,EACApwD,EAAAmO,OAAAI,KAAA,gDACAm7C,GACA0G,YACAC,UACAC,oBACAZ,OAAA1vD,EAAA0vD,OAAA51D,UAKA21D,EAAA,SAAA1hD,EAAAmpB,EAAA5qB,EAAAK,EAAAg/C,GACA,GAAA59C,EAGA,OAFAo+C,EAAAzwC,IAAA3N,IAAA7E,MAAAyD,EAAAzD,WACAygD,EAAA57C,GAGA49C,EAAA4D,MACAvvD,EAAAmO,OAAAI,KAAA,WAAA5B,EAAAzD,KAAA,gBAGAlJ,EAAAmO,OAAAI,KAAA,YAAA5B,EAAAzD,KAAA,kBAEAqD,EAAAC,UAAAyB,EAAAxB,SAAAyqB,EAAAvqB,GACA3M,EAAAmO,OAAAI,KAAA,WAAA5B,EAAAzD,KAAA,sBAAAL,KAAAwnD,GAAA,MAIA,KAFAE,IAGAD,EAAA,IAAAznD,KAAAunD,EACApwD,EAAAmO,OAAAI,KAAA,uCAAA+hD,EAAA,MACA5G,GACA0G,YACAC,UACAC,oBACAZ,OAAA1vD,EAAA0vD,OAAA51D,UAGAu2D,EAAA,IAAAxnD,MACqBwmD,EAAA/d,GAErB4d,EAAA5d,MAGAtxC,EAAAwwD,cAAAtB,EACAlvD,EAqBA4rB,CAAA3d,OAAAk/C,IAMA,SAAAsD,GAAAryD,GACAA,EAAAmR,UACA/R,QAAA8Q,KAAAlQ,GAEA+uD,GAAAzC,OACAl9C,GAAAK,YAAAxH,IAyBA,OAnCA4H,OAAAjO,QAaAmtD,GAAAQ,UACA,SAAA/mD,KAAAqH,OAAA7G,SAAA4lB,OACAhtB,GAAAb,QAGAguD,GAAAzC,QACAxzB,GAAA,oCACA1pB,GAAAf,SAAAe,MAAAf,SAAArE,qBAAA,YACA/B,GAAAoG,SAAAM,cAAA,UACA/L,KAAA,WACAqF,GAAA6G,WACA7G,GAAA6G,WAAAY,QAAAopB,GAGA7wB,GAAA8G,YAAAV,SAAAW,eAAA8pB,KAEA1pB,GAAAL,YAAA9G,KAEArG,GAAA8vD,iCACA9vD,GAAA0wD,iBAAA1wD,GAAAmwD,QAAA,gBAAAnwD,GAAA4sD,KAAArD,KAAAkH,QAGAzwD,IA9/VgEoC,EAAAvJ,QAAAkT","file":"static/js/3.b313d4eacae5b9891394.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// Regular Expressions for parsing tags and attributes\nvar startTag = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\nvar endTag = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\nvar attr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n\n// Empty Elements - HTML 5\nvar empty = makeMap(\"area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr\");\n\n// Block Elements - HTML 5\nvar block = makeMap(\"a,address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video\");\n\n// Inline Elements - HTML 5\nvar inline = makeMap(\"abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var\");\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar closeSelf = makeMap(\"colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr\");\n\n// Attributes that have their values filled in disabled=\"disabled\"\nvar fillAttrs = makeMap(\"checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected\");\n\n// Special Elements (can contain anything)\nvar special = makeMap(\"script,style\");\n\nvar HTMLParser = function HTMLParser(html, handler) {\n  var index,\n      chars,\n      match,\n      stack = [],\n      last = html;\n\n  stack.last = function () {\n    return this[this.length - 1];\n  };\n\n  while (html) {\n    chars = true;\n\n    // Make sure we're not in a script or style element\n    if (!stack.last() || !special[stack.last()]) {\n\n      // Comment\n      if (html.indexOf(\"<!--\") == 0) {\n        index = html.indexOf(\"-->\");\n\n        if (index >= 0) {\n          if (handler.comment) {\n            handler.comment(html.substring(4, index));\n          }\n          html = html.substring(index + 3);\n          chars = false;\n        }\n\n        // end tag\n      } else if (html.indexOf(\"</\") == 0) {\n        match = html.match(endTag);\n\n        if (match) {\n          html = html.substring(match[0].length);\n          match[0].replace(endTag, parseEndTag);\n          chars = false;\n        }\n\n        // start tag\n      } else if (html.indexOf(\"<\") == 0) {\n        match = html.match(startTag);\n\n        if (match) {\n          html = html.substring(match[0].length);\n          match[0].replace(startTag, parseStartTag);\n          chars = false;\n        }\n      }\n\n      if (chars) {\n        index = html.indexOf(\"<\");\n\n        var text = index < 0 ? html : html.substring(0, index);\n        html = index < 0 ? \"\" : html.substring(index);\n\n        if (handler.chars) {\n          handler.chars(text);\n        }\n      }\n    } else {\n      html = html.replace(new RegExp(\"([\\\\s\\\\S]*?)<\\/\" + stack.last() + \"[^>]*>\"), function (all, text) {\n        text = text.replace(/<!--([\\s\\S]*?)-->|<!\\[CDATA\\[([\\s\\S]*?)]]>/g, \"$1$2\");\n        if (handler.chars) {\n          handler.chars(text);\n        }\n\n        return \"\";\n      });\n\n      parseEndTag(\"\", stack.last());\n    }\n\n    if (html == last) {\n      throw \"Parse Error: \" + html;\n    }\n    last = html;\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function parseStartTag(tag, tagName, rest, unary) {\n    tagName = tagName.toLowerCase();\n\n    if (block[tagName]) {\n      while (stack.last() && inline[stack.last()]) {\n        parseEndTag(\"\", stack.last());\n      }\n    }\n\n    if (closeSelf[tagName] && stack.last() == tagName) {\n      parseEndTag(\"\", tagName);\n    }\n\n    unary = empty[tagName] || !!unary;\n\n    if (!unary) {\n      stack.push(tagName);\n    }\n\n    if (handler.start) {\n      var attrs = [];\n\n      rest.replace(attr, function (match, name) {\n        var value = arguments[2] ? arguments[2] : arguments[3] ? arguments[3] : arguments[4] ? arguments[4] : fillAttrs[name] ? name : \"\";\n\n        attrs.push({\n          name: name,\n          value: value,\n          escaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\\\"') //\"\n        });\n      });\n\n      if (handler.start) {\n        handler.start(tagName, attrs, unary);\n      }\n    }\n  }\n\n  function parseEndTag(tag, tagName) {\n    // If no tag name is provided, clean shop\n    if (!tagName) {\n      var pos = 0;\n    }\n\n    // Find the closest opened tag of the same type\n    else {\n        for (var pos = stack.length - 1; pos >= 0; pos--) {\n          if (stack[pos] == tagName) {\n            break;\n          }\n        }\n      }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (handler.end) {\n          handler.end(stack[i]);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n    }\n  }\n};\n\nfunction makeMap(str) {\n  var obj = {},\n      items = str.split(\",\");\n  for (var i = 0; i < items.length; i++) {\n    obj[items[i]] = true;\n  }\n  return obj;\n}\n\nvar DEBUG = false;\nvar debug = DEBUG ? console.log.bind(console) : function () {};\n\nfunction removeDOCTYPE(html) {\n  return html\n  // .replace(/<\\?xml.*\\?>\\n/, '')\n  // .replace(/<!doctype.*\\>\\n/i, '')\n  // .replace(/<!DOCTYPE.*\\>\\n/i, '')\n  .replace(/<!DOCTYPE html>(.+?)<body>/i, '').replace(/<script (.+?)<\\/script>.*/i, '').replace(/<\\/body>/i, '').replace(/<\\/html>/i, '');\n}\n\nvar html2json = function html2json(html) {\n\n  html = (html || '').replace(/\\s+/g, ' ');\n  html = removeDOCTYPE(html);\n\n  var bufArray = [];\n  var results = {\n    node: 'root',\n    child: []\n  };\n\n  HTMLParser(html, {\n    start: function start(tag, attrs, unary) {\n      debug(tag, attrs, unary);\n      // node for this element\n      var node = {\n        node: 'element',\n        tag: tag\n      };\n\n      if (attrs.length !== 0) {\n        node.attr = attrs.reduce(function (pre, attr) {\n          var name = attr.name;\n          var value = attr.value;\n          // 去掉空格\n          // value = value.replace(/\\s/g, '');\n          value = value.replace(/(&nbsp;)/g, ' ');\n          value = value.replace(/(&gt;)/g, '>');\n          value = value.replace(/(&lt;)/g, '<');\n          value = value.replace(/(&amp;)/g, '&');\n          value = value.replace(/(&quot;)/g, '\"');\n          // console.log(value);\n          // 多个值划分,单位转换\n          var values = value.split(';');\n          value = (values || []).map(function (value) {\n            if (value.indexOf('px') != -1) {\n              var v = value.split(':')[1];\n              var key = value.split(':')[0];\n              if (v.split(/\\s/g).length > 1) {\n                return v.map(function (vi) {\n                  var va = Number.parseInt(vi);\n                  if (!isNaN(va)) {\n                    va = va * 2;\n                    return key + \": \" + va + \"rpx;\";\n                  }\n                  return value;\n                });\n              } else {\n                var va = Number.parseInt(v);\n                if (!isNaN(va)) {\n                  va = va * 2;\n                  return key + \": \" + va + \"rpx;\";\n                }\n                return value;\n              }\n            } else {\n              return value;\n            }\n          }).join(' ');\n\n          // if attr already exists\n          // merge it\n          if (pre[name]) {\n            if (Array.isArray(pre[name])) {\n              // already array, push to last\n              pre[name].push(value);\n            } else {\n              // single value, make it array\n              pre[name] = [pre[name], value];\n            }\n          } else {\n            // not exist, put it\n            pre[name] = value;\n          }\n\n          return pre;\n        }, {});\n      }\n\n      // 标题样式等\n      var tagClass = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'a', 'abbr', 'address', 'applet', 'acronym', 'area', 'article', 'aside', 'audio', 'b', 'base', 'basefont', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'datalist', 'dd', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'keygen', 'kbd', 'label', 'legend', 'li', 'link', 'map', 'mark', 'menu', 'meta', 'meter', 'nav', 'noframes', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'pre', 'progress', 'q', 'rp', 'ruby', 's', 'samp', 'script', 'select', 'small', 'source', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr', 'rt', 'section'];\n      if (tagClass.includes(tag)) {\n        if (node.attr && node.attr.class) {\n          node.attr.class = node.attr.class + \" \" + tag;\n        } else {\n          node.attr = node.attr || {};\n          node.attr.class = tag;\n        }\n      }\n\n      if (unary) {\n        // if this tag dosen't have end tag\n        // like <img src=\"hoge.png\"/>\n        // add to parents\n        var parent = bufArray[0] || results;\n        if (parent.child === undefined) {\n          parent.child = [];\n        }\n        parent.child.push(node);\n      } else {\n        bufArray.unshift(node);\n      }\n    },\n    end: function end(tag) {\n      debug(tag);\n      // merge into parent tag\n      var node = bufArray.shift();\n      if (node.tag !== tag) {\n        console.error('invalid state: mismatch end tag');\n      }\n\n      if (bufArray.length === 0) {\n        results.child.push(node);\n      } else {\n        var parent = bufArray[0];\n        if (parent.child === undefined) {\n          parent.child = [];\n        }\n        parent.child.push(node);\n      }\n    },\n    chars: function chars(text) {\n      debug(text);\n      if (text == ' ') {\n        return;\n      }\n      var node = {\n        node: 'text',\n        text: text\n      };\n      if (bufArray.length === 0) {\n        results.child.push(node);\n      } else {\n        var parent = bufArray[0];\n        if (parent.child === undefined) {\n          parent.child = [];\n        }\n        parent.child.push(node);\n      }\n    },\n    comment: function comment(text) {\n      debug(text);\n      var node = {\n        node: 'comment',\n        text: text\n      };\n      var parent = bufArray[0];\n      if (parent.child === undefined) {\n        parent.child = [];\n      }\n      parent.child.push(node);\n    }\n  });\n  return results;\n};\n\nfunction html2wxml(input) {\n  if (input === void 0) input = '';\n\n  var parse = \"\";\n  var part = \"\";\n  if (!input) {\n    console.log('please input html content!!!');\n    return 0;\n  }\n\n  var htmlToJson = html2json(input).child;\n\n  for (var i = 0, len = htmlToJson.length; i < len; i++) {\n    parse = parseChild(htmlToJson[i]);\n  }\n\n  function parseChild(node) {\n    if (node.child) {\n      part += \"<view class=\\\"\" + node.attr.class + \"\\\">\";\n      for (var i = 0, len = node.child.length; i < len; i++) {\n        if (node.node == 'element') {\n          parseChild(node.child[i]);\n        }\n      }\n      part += \"</view>\";\n    } else {\n      if (node.node == 'element') {\n        if (node.tag == 'img') {\n          part += \"<image class=\\\"\" + node.attr.class + \"\\\" src=\\\"\" + node.attr.src + \"\\\"></image>\";\n        } else {\n          part += \"<view class=\\\"\" + node.attr.class + \"\\\"></view>\";\n        }\n      }\n      if (node.node == 'text') {\n        part += \"<text>\" + node.text + \"</text>\";\n      }\n      // if ()\n    }\n    return part;\n  }\n\n  return parse;\n}\n\nexports.html2wxml = html2wxml;\n//# sourceMappingURL=htmltowxml.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_htmltowxml@1.0.4@htmltowxml/dist/htmltowxml.js\n// module id = dH7G\n// module chunks = 3","<template>\n  <div>\n    <el-row>\n      <el-col :span=\"11\">\n        <el-tabs v-model=\"activeLIndex\" type=\"border-card\">\n          <el-tab-pane :label=\"item.name\" v-for=\"(item,index) in leftTabs\" :key=\"index\">\n            <div class=\"grid-content bg-purple\">\n              <el-input type=\"textarea\" class=\"textarea\" :rows=\"25\" placeholder=\"请输入内容\" v-model=\"item.text\">\n              </el-input>\n            </div>\n          </el-tab-pane>\n        </el-tabs>\n        <!-- <el-radio-group v-model=\"lRadioIndex\" class=\"\">\n          <el-radio :label=\"index\" v-for=\"(item,index) in leftTabs\" :key=\"index\">{{item.name}}</el-radio>\n        </el-radio-group>\n        <div class=\"grid-content bg-purple\">\n          <el-input type=\"textarea\" class=\"textarea\" :rows=\"25\" placeholder=\"请输入内容\" v-model=\"sourceTextarea\">\n          </el-input>\n        </div> -->\n      </el-col>\n      <el-col :span=\"1\">\n        <div class=\"dot-tip\">To</div>\n      </el-col>\n\n      <el-col :span=\"11\">\n        <el-tabs v-model=\"activeRIndex\" type=\"border-card\">\n          <el-tab-pane :label=\"item.name\" v-for=\"(item,index) in rightSliceTabs\" :key=\"index\" :disabled='item.disabled'>\n            <div class=\"grid-content bg-purple-light\">\n              <el-input type=\"textarea\" class=\"textarea\" :disabled='isBanInput' :rows=\"25\" placeholder=\"请在左侧输入内容\" v-model=\"item.text\">\n              </el-input>\n            </div>\n          </el-tab-pane>\n        </el-tabs>\n      </el-col>\n    </el-row>\n  </div>\n\n</template>\n\n<script>\n  import * as htmltoless from 'htmltoless'\n  import {\n    html2wxml\n  } from 'htmltowxml';\n  import less from 'less';\n  export default {\n    name: '',\n    data() {\n      return {\n        activeLIndex: 0,\n        activeRIndex: 0,\n        leftTabs: [{\n          name: 'html',\n          text: ``,\n          to: `less,wxml`,\n        }],\n        isBanInput: false,\n        sourceText: ``,\n        allowTo: [], //允许转换的类型\n      }\n    },\n    computed: {\n      rightSliceTabs() {\n        let to = this.leftTabs[this.activeLIndex].to;\n        let tos = to.split(',');\n        this.rightTabs.forEach(item => {\n          item.disabled = !tos.includes(item.name);\n        })\n        return this.rightTabs;\n      },\n      rightTabs() {\n        let to = this.leftTabs[this.activeLIndex].to\n        let tos = to.split(',');\n        let tabs = tos.map(item => {\n          return {\n            name: item,\n          }\n        })\n        return tabs\n      }\n    },\n    watch: {\n      activeLIndex: {\n        handler() {\n          this.calAllowConverItems();\n          this.handleConversion();\n        },\n        immediate: true,\n      },\n      activeRIndex: {\n        handler() {\n          this.handleConversion();\n        },\n        immediate: true,\n      },\n      leftTabs: {\n        handler(value) {\n          if (!value.text) {\n            this.rightTabs.forEach(item => {\n              item.text = '';\n            })\n          }\n          this.handleConversion();\n        },\n        // immediate: true,\n        deep: true,\n      }\n    },\n\n    created() {\n      console.log(less)\n      \n    },\n\n    methods: {\n      handleConversion() {\n        let source = this.leftTabs[this.activeLIndex].name\n        let to = this.rightSliceTabs[this.activeRIndex].name\n        this.leftText = this.leftTabs[this.activeLIndex].text;\n        if (source === 'html' && to === 'less') {\n          this.htmlToLess();\n        } else if (source === 'html' && to === 'wxml') {\n          this.htmlToWxml();\n        }\n      },\n      //htmltoless\n      htmlToLess() {\n        if (!this.sourceText) return\n        const less = htmltoless.parse(this.sourceText);\n        // this.isBanInput = true;\n        this.appendRightText(less)\n      },\n      htmlToWxml() {\n        if (!this.sourceText) return\n        let wxml = html2wxml(this.sourceText);\n        this.appendRightText(wxml);\n      },\n      //htmltotext\n      htmlToText() {\n        const text = convert(html, {\n          wordwrap: 130\n        });\n        this.appendRightText(text);\n      },\n      appendRightText(text) {\n        this.rightSliceTabs[this.activeRIndex].text = text || '格式不正确'\n      },\n      //计算允许转换的类型\n      calAllowConverItems() {\n        let to = this.leftTabs[this.activeRIndex].to;\n        this.allowTo = to.split(',');\n\n      }\n\n    }\n\n  }\n</script>\n\n<style lang=\"less\" scoped>\n  .grid-content {\n    margin-top: 20px;\n  }\n\n  .dot-tip {\n    font-weight: bold;\n    text-align: center;\n    line-height: 3;\n  }\n\n  .textarea {\n    min-height: 500px;\n  }\n</style>\n\n\n// WEBPACK FOOTER //\n// src/views/User/Conversion/htmltox.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-row',[_c('el-col',{attrs:{\"span\":11}},[_c('el-tabs',{attrs:{\"type\":\"border-card\"},model:{value:(_vm.activeLIndex),callback:function ($$v) {_vm.activeLIndex=$$v},expression:\"activeLIndex\"}},_vm._l((_vm.leftTabs),function(item,index){return _c('el-tab-pane',{key:index,attrs:{\"label\":item.name}},[_c('div',{staticClass:\"grid-content bg-purple\"},[_c('el-input',{staticClass:\"textarea\",attrs:{\"type\":\"textarea\",\"rows\":25,\"placeholder\":\"请输入内容\"},model:{value:(item.text),callback:function ($$v) {_vm.$set(item, \"text\", $$v)},expression:\"item.text\"}})],1)])}),1)],1),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":1}},[_c('div',{staticClass:\"dot-tip\"},[_vm._v(\"To\")])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":11}},[_c('el-tabs',{attrs:{\"type\":\"border-card\"},model:{value:(_vm.activeRIndex),callback:function ($$v) {_vm.activeRIndex=$$v},expression:\"activeRIndex\"}},_vm._l((_vm.rightSliceTabs),function(item,index){return _c('el-tab-pane',{key:index,attrs:{\"label\":item.name,\"disabled\":item.disabled}},[_c('div',{staticClass:\"grid-content bg-purple-light\"},[_c('el-input',{staticClass:\"textarea\",attrs:{\"type\":\"textarea\",\"disabled\":_vm.isBanInput,\"rows\":25,\"placeholder\":\"请在左侧输入内容\"},model:{value:(item.text),callback:function ($$v) {_vm.$set(item, \"text\", $$v)},expression:\"item.text\"}})],1)])}),1)],1)],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-0b1e1415\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/User/Conversion/htmltox.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0b1e1415\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!less-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./htmltox.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./htmltox.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./htmltox.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0b1e1415\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./htmltox.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-0b1e1415\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/User/Conversion/htmltox.vue\n// module id = null\n// module chunks = ","/***********************************************\nCopyright 2010, 2011, Chris Winberry <chris@winberry.net>. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n***********************************************/\n/* v1.7.6 */\n\n(function () {\n\nfunction runningInNode () {\n\treturn(\n\t\t(typeof require) == \"function\"\n\t\t&&\n\t\t(typeof exports) == \"object\"\n\t\t&&\n\t\t(typeof module) == \"object\"\n\t\t&&\n\t\t(typeof __filename) == \"string\"\n\t\t&&\n\t\t(typeof __dirname) == \"string\"\n\t\t);\n}\n\nif (!runningInNode()) {\n\tif (!this.Tautologistics)\n\t\tthis.Tautologistics = {};\n\telse if (this.Tautologistics.NodeHtmlParser)\n\t\treturn; //NodeHtmlParser already defined!\n\tthis.Tautologistics.NodeHtmlParser = {};\n\texports = this.Tautologistics.NodeHtmlParser;\n}\n\n//Types of elements found in the DOM\nvar ElementType = {\n\t  Text: \"text\" //Plain text\n\t, Directive: \"directive\" //Special tag <!...>\n\t, Comment: \"comment\" //Special tag <!--...-->\n\t, Script: \"script\" //Special tag <script>...</script>\n\t, Style: \"style\" //Special tag <style>...</style>\n\t, Tag: \"tag\" //Any tag that isn't special\n}\n\nfunction Parser (handler, options) {\n\tthis._options = options ? options : { };\n\tif (this._options.includeLocation == undefined) {\n\t\tthis._options.includeLocation = false; //Do not track element position in document by default\n\t}\n\n\tthis.validateHandler(handler);\n\tthis._handler = handler;\n\tthis.reset();\n}\n\n\t//**\"Static\"**//\n\t//Regular expressions used for cleaning up and parsing (stateless)\n\tParser._reTrim = /(^\\s+|\\s+$)/g; //Trim leading/trailing whitespace\n\tParser._reTrimComment = /(^\\!--|--$)/g; //Remove comment tag markup from comment contents\n\tParser._reWhitespace = /\\s/g; //Used to find any whitespace to split on\n\tParser._reTagName = /^\\s*(\\/?)\\s*([^\\s\\/]+)/; //Used to find the tag name for an element\n\n\t//Regular expressions used for parsing (stateful)\n\tParser._reAttrib = //Find attributes in a tag\n\t\t/([^=<>\\\"\\'\\s]+)\\s*=\\s*\"([^\"]*)\"|([^=<>\\\"\\'\\s]+)\\s*=\\s*'([^']*)'|([^=<>\\\"\\'\\s]+)\\s*=\\s*([^'\"\\s]+)|([^=<>\\\"\\'\\s\\/]+)/g;\n\tParser._reTags = /[\\<\\>]/g; //Find tag markers\n\n\t//**Public**//\n\t//Methods//\n\t//Parses a complete HTML and pushes it to the handler\n\tParser.prototype.parseComplete = function Parser$parseComplete (data) {\n\t\tthis.reset();\n\t\tthis.parseChunk(data);\n\t\tthis.done();\n\t}\n\n\t//Parses a piece of an HTML document\n\tParser.prototype.parseChunk = function Parser$parseChunk (data) {\n\t\tif (this._done)\n\t\t\tthis.handleError(new Error(\"Attempted to parse chunk after parsing already done\"));\n\t\tthis._buffer += data; //FIXME: this can be a bottleneck\n\t\tthis.parseTags();\n\t}\n\n\t//Tells the parser that the HTML being parsed is complete\n\tParser.prototype.done = function Parser$done () {\n\t\tif (this._done)\n\t\t\treturn;\n\t\tthis._done = true;\n\t\n\t\t//Push any unparsed text into a final element in the element list\n\t\tif (this._buffer.length) {\n\t\t\tvar rawData = this._buffer;\n\t\t\tthis._buffer = \"\";\n\t\t\tvar element = {\n\t\t\t\t  raw: rawData\n\t\t\t\t, data: (this._parseState == ElementType.Text) ? rawData : rawData.replace(Parser._reTrim, \"\")\n\t\t\t\t, type: this._parseState\n\t\t\t\t};\n\t\t\tif (this._parseState == ElementType.Tag || this._parseState == ElementType.Script || this._parseState == ElementType.Style)\n\t\t\t\telement.name = this.parseTagName(element.data);\n\t\t\tthis.parseAttribs(element);\n\t\t\tthis._elements.push(element);\n\t\t}\n\t\n\t\tthis.writeHandler();\n\t\tthis._handler.done();\n\t}\n\n\t//Resets the parser to a blank state, ready to parse a new HTML document\n\tParser.prototype.reset = function Parser$reset () {\n\t\tthis._buffer = \"\";\n\t\tthis._done = false;\n\t\tthis._elements = [];\n\t\tthis._elementsCurrent = 0;\n\t\tthis._current = 0;\n\t\tthis._next = 0;\n\t\tthis._location = {\n\t\t\t  row: 0\n\t\t\t, col: 0\n\t\t\t, charOffset: 0\n\t\t\t, inBuffer: 0\n\t\t};\n\t\tthis._parseState = ElementType.Text;\n\t\tthis._prevTagSep = '';\n\t\tthis._tagStack = [];\n\t\tthis._handler.reset();\n\t}\n\t\n\t//**Private**//\n\t//Properties//\n\tParser.prototype._options = null; //Parser options for how to behave\n\tParser.prototype._handler = null; //Handler for parsed elements\n\tParser.prototype._buffer = null; //Buffer of unparsed data\n\tParser.prototype._done = false; //Flag indicating whether parsing is done\n\tParser.prototype._elements =  null; //Array of parsed elements\n\tParser.prototype._elementsCurrent = 0; //Pointer to last element in _elements that has been processed\n\tParser.prototype._current = 0; //Position in data that has already been parsed\n\tParser.prototype._next = 0; //Position in data of the next tag marker (<>)\n\tParser.prototype._location = null; //Position tracking for elements in a stream\n\tParser.prototype._parseState = ElementType.Text; //Current type of element being parsed\n\tParser.prototype._prevTagSep = ''; //Previous tag marker found\n\t//Stack of element types previously encountered; keeps track of when\n\t//parsing occurs inside a script/comment/style tag\n\tParser.prototype._tagStack = null;\n\n\t//Methods//\n\t//Takes an array of elements and parses any found attributes\n\tParser.prototype.parseTagAttribs = function Parser$parseTagAttribs (elements) {\n\t\tvar idxEnd = elements.length;\n\t\tvar idx = 0;\n\t\n\t\twhile (idx < idxEnd) {\n\t\t\tvar element = elements[idx++];\n\t\t\tif (element.type == ElementType.Tag || element.type == ElementType.Script || element.type == ElementType.style)\n\t\t\t\tthis.parseAttribs(element);\n\t\t}\n\t\n\t\treturn(elements);\n\t}\n\n\t//Takes an element and adds an \"attribs\" property for any element attributes found \n\tParser.prototype.parseAttribs = function Parser$parseAttribs (element) {\n\t\t//Only parse attributes for tags\n\t\tif (element.type != ElementType.Script && element.type != ElementType.Style && element.type != ElementType.Tag)\n\t\t\treturn;\n\t\n\t\tvar tagName = element.data.split(Parser._reWhitespace, 1)[0];\n\t\tvar attribRaw = element.data.substring(tagName.length);\n\t\tif (attribRaw.length < 1)\n\t\t\treturn;\n\t\n\t\tvar match;\n\t\tParser._reAttrib.lastIndex = 0;\n\t\twhile (match = Parser._reAttrib.exec(attribRaw)) {\n\t\t\tif (element.attribs == undefined)\n\t\t\t\telement.attribs = {};\n\t\n\t\t\tif (typeof match[1] == \"string\" && match[1].length) {\n\t\t\t\telement.attribs[match[1]] = match[2];\n\t\t\t} else if (typeof match[3] == \"string\" && match[3].length) {\n\t\t\t\telement.attribs[match[3].toString()] = match[4].toString();\n\t\t\t} else if (typeof match[5] == \"string\" && match[5].length) {\n\t\t\t\telement.attribs[match[5]] = match[6];\n\t\t\t} else if (typeof match[7] == \"string\" && match[7].length) {\n\t\t\t\telement.attribs[match[7]] = match[7];\n\t\t\t}\n\t\t}\n\t}\n\n\t//Extracts the base tag name from the data value of an element\n\tParser.prototype.parseTagName = function Parser$parseTagName (data) {\n\t\tif (data == null || data == \"\")\n\t\t\treturn(\"\");\n\t\tvar match = Parser._reTagName.exec(data);\n\t\tif (!match)\n\t\t\treturn(\"\");\n\t\treturn((match[1] ? \"/\" : \"\") + match[2]);\n\t}\n\n\t//Parses through HTML text and returns an array of found elements\n\t//I admit, this function is rather large but splitting up had an noticeable impact on speed\n\tParser.prototype.parseTags = function Parser$parseTags () {\n\t\tvar bufferEnd = this._buffer.length - 1;\n\t\twhile (Parser._reTags.test(this._buffer)) {\n\t\t\tthis._next = Parser._reTags.lastIndex - 1;\n\t\t\tvar tagSep = this._buffer.charAt(this._next); //The currently found tag marker\n\t\t\tvar rawData = this._buffer.substring(this._current, this._next); //The next chunk of data to parse\n\t\n\t\t\t//A new element to eventually be appended to the element list\n\t\t\tvar element = {\n\t\t\t\t  raw: rawData\n\t\t\t\t, data: (this._parseState == ElementType.Text) ? rawData : rawData.replace(Parser._reTrim, \"\")\n\t\t\t\t, type: this._parseState\n\t\t\t};\n\t\n\t\t\tvar elementName = this.parseTagName(element.data);\n\t\n\t\t\t//This section inspects the current tag stack and modifies the current\n\t\t\t//element if we're actually parsing a special area (script/comment/style tag)\n\t\t\tif (this._tagStack.length) { //We're parsing inside a script/comment/style tag\n\t\t\t\tif (this._tagStack[this._tagStack.length - 1] == ElementType.Script) { //We're currently in a script tag\n\t\t\t\t\tif (elementName.toLowerCase() == \"/script\") //Actually, we're no longer in a script tag, so pop it off the stack\n\t\t\t\t\t\tthis._tagStack.pop();\n\t\t\t\t\telse { //Not a closing script tag\n\t\t\t\t\t\tif (element.raw.indexOf(\"!--\") != 0) { //Make sure we're not in a comment\n\t\t\t\t\t\t\t//All data from here to script close is now a text element\n\t\t\t\t\t\t\telement.type = ElementType.Text;\n\t\t\t\t\t\t\t//If the previous element is text, append the current text to it\n\t\t\t\t\t\t\tif (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Text) {\n\t\t\t\t\t\t\t\tvar prevElement = this._elements[this._elements.length - 1];\n\t\t\t\t\t\t\t\tprevElement.raw = prevElement.data = prevElement.raw + this._prevTagSep + element.raw;\n\t\t\t\t\t\t\t\telement.raw = element.data = \"\"; //This causes the current element to not be added to the element list\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this._tagStack[this._tagStack.length - 1] == ElementType.Style) { //We're currently in a style tag\n\t\t\t\t\tif (elementName.toLowerCase() == \"/style\") //Actually, we're no longer in a style tag, so pop it off the stack\n\t\t\t\t\t\tthis._tagStack.pop();\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (element.raw.indexOf(\"!--\") != 0) { //Make sure we're not in a comment\n\t\t\t\t\t\t\t//All data from here to style close is now a text element\n\t\t\t\t\t\t\telement.type = ElementType.Text;\n\t\t\t\t\t\t\t//If the previous element is text, append the current text to it\n\t\t\t\t\t\t\tif (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Text) {\n\t\t\t\t\t\t\t\tvar prevElement = this._elements[this._elements.length - 1];\n\t\t\t\t\t\t\t\tif (element.raw != \"\") {\n\t\t\t\t\t\t\t\t\tprevElement.raw = prevElement.data = prevElement.raw + this._prevTagSep + element.raw;\n\t\t\t\t\t\t\t\t\telement.raw = element.data = \"\"; //This causes the current element to not be added to the element list\n\t\t\t\t\t\t\t\t} else { //Element is empty, so just append the last tag marker found\n\t\t\t\t\t\t\t\t\tprevElement.raw = prevElement.data = prevElement.raw + this._prevTagSep;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else { //The previous element was not text\n\t\t\t\t\t\t\t\tif (element.raw != \"\") {\n\t\t\t\t\t\t\t\t\telement.raw = element.data = element.raw;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this._tagStack[this._tagStack.length - 1] == ElementType.Comment) { //We're currently in a comment tag\n\t\t\t\t\tvar rawLen = element.raw.length;\n\t\t\t\t\tif (element.raw.charAt(rawLen - 2) == \"-\" && element.raw.charAt(rawLen - 1) == \"-\" && tagSep == \">\") {\n\t\t\t\t\t\t//Actually, we're no longer in a style tag, so pop it off the stack\n\t\t\t\t\t\tthis._tagStack.pop();\n\t\t\t\t\t\t//If the previous element is a comment, append the current text to it\n\t\t\t\t\t\tif (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Comment) {\n\t\t\t\t\t\t\tvar prevElement = this._elements[this._elements.length - 1];\n\t\t\t\t\t\t\tprevElement.raw = prevElement.data = (prevElement.raw + element.raw).replace(Parser._reTrimComment, \"\");\n\t\t\t\t\t\t\telement.raw = element.data = \"\"; //This causes the current element to not be added to the element list\n\t\t\t\t\t\t\telement.type = ElementType.Text;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse //Previous element not a comment\n\t\t\t\t\t\t\telement.type = ElementType.Comment; //Change the current element's type to a comment\n\t\t\t\t\t}\n\t\t\t\t\telse { //Still in a comment tag\n\t\t\t\t\t\telement.type = ElementType.Comment;\n\t\t\t\t\t\t//If the previous element is a comment, append the current text to it\n\t\t\t\t\t\tif (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Comment) {\n\t\t\t\t\t\t\tvar prevElement = this._elements[this._elements.length - 1];\n\t\t\t\t\t\t\tprevElement.raw = prevElement.data = prevElement.raw + element.raw + tagSep;\n\t\t\t\t\t\t\telement.raw = element.data = \"\"; //This causes the current element to not be added to the element list\n\t\t\t\t\t\t\telement.type = ElementType.Text;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\telement.raw = element.data = element.raw + tagSep;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t//Processing of non-special tags\n\t\t\tif (element.type == ElementType.Tag) {\n\t\t\t\telement.name = elementName;\n\t\t\t\tvar elementNameCI = elementName.toLowerCase();\n\t\t\t\t\n\t\t\t\tif (element.raw.indexOf(\"!--\") == 0) { //This tag is really comment\n\t\t\t\t\telement.type = ElementType.Comment;\n\t\t\t\t\tdelete element[\"name\"];\n\t\t\t\t\tvar rawLen = element.raw.length;\n\t\t\t\t\t//Check if the comment is terminated in the current element\n\t\t\t\t\tif (element.raw.charAt(rawLen - 1) == \"-\" && element.raw.charAt(rawLen - 2) == \"-\" && tagSep == \">\")\n\t\t\t\t\t\telement.raw = element.data = element.raw.replace(Parser._reTrimComment, \"\");\n\t\t\t\t\telse { //It's not so push the comment onto the tag stack\n\t\t\t\t\t\telement.raw += tagSep;\n\t\t\t\t\t\tthis._tagStack.push(ElementType.Comment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (element.raw.indexOf(\"!\") == 0 || element.raw.indexOf(\"?\") == 0) {\n\t\t\t\t\telement.type = ElementType.Directive;\n\t\t\t\t\t//TODO: what about CDATA?\n\t\t\t\t}\n\t\t\t\telse if (elementNameCI == \"script\") {\n\t\t\t\t\telement.type = ElementType.Script;\n\t\t\t\t\t//Special tag, push onto the tag stack if not terminated\n\t\t\t\t\tif (element.data.charAt(element.data.length - 1) != \"/\")\n\t\t\t\t\t\tthis._tagStack.push(ElementType.Script);\n\t\t\t\t}\n\t\t\t\telse if (elementNameCI == \"/script\")\n\t\t\t\t\telement.type = ElementType.Script;\n\t\t\t\telse if (elementNameCI == \"style\") {\n\t\t\t\t\telement.type = ElementType.Style;\n\t\t\t\t\t//Special tag, push onto the tag stack if not terminated\n\t\t\t\t\tif (element.data.charAt(element.data.length - 1) != \"/\")\n\t\t\t\t\t\tthis._tagStack.push(ElementType.Style);\n\t\t\t\t}\n\t\t\t\telse if (elementNameCI == \"/style\")\n\t\t\t\t\telement.type = ElementType.Style;\n\t\t\t\tif (element.name && element.name.charAt(0) == \"/\")\n\t\t\t\t\telement.data = element.name;\n\t\t\t}\n\t\n\t\t\t//Add all tags and non-empty text elements to the element list\n\t\t\tif (element.raw != \"\" || element.type != ElementType.Text) {\n\t\t\t\tif (this._options.includeLocation && !element.location) {\n\t\t\t\t\telement.location = this.getLocation(element.type == ElementType.Tag);\n\t\t\t\t}\n\t\t\t\tthis.parseAttribs(element);\n\t\t\t\tthis._elements.push(element);\n\t\t\t\t//If tag self-terminates, add an explicit, separate closing tag\n\t\t\t\tif (\n\t\t\t\t\telement.type != ElementType.Text\n\t\t\t\t\t&&\n\t\t\t\t\telement.type != ElementType.Comment\n\t\t\t\t\t&&\n\t\t\t\t\telement.type != ElementType.Directive\n\t\t\t\t\t&&\n\t\t\t\t\telement.data.charAt(element.data.length - 1) == \"/\"\n\t\t\t\t\t)\n\t\t\t\t\tthis._elements.push({\n\t\t\t\t\t\t  raw: \"/\" + element.name\n\t\t\t\t\t\t, data: \"/\" + element.name\n\t\t\t\t\t\t, name: \"/\" + element.name\n\t\t\t\t\t\t, type: element.type\n\t\t\t\t\t});\n\t\t\t}\n\t\t\tthis._parseState = (tagSep == \"<\") ? ElementType.Tag : ElementType.Text;\n\t\t\tthis._current = this._next + 1;\n\t\t\tthis._prevTagSep = tagSep;\n\t\t}\n\n\t\tif (this._options.includeLocation) {\n\t\t\tthis.getLocation();\n\t\t\tthis._location.row += this._location.inBuffer;\n\t\t\tthis._location.inBuffer = 0;\n\t\t\tthis._location.charOffset = 0;\n\t\t}\n\t\tthis._buffer = (this._current <= bufferEnd) ? this._buffer.substring(this._current) : \"\";\n\t\tthis._current = 0;\n\t\n\t\tthis.writeHandler();\n\t}\n\n\tParser.prototype.getLocation = function Parser$getLocation (startTag) {\n\t\tvar c,\n\t\t\tl = this._location,\n\t\t\tend = this._current - (startTag ? 1 : 0),\n\t\t\tchunk = startTag && l.charOffset == 0 && this._current == 0;\n\t\t\n\t\tfor (; l.charOffset < end; l.charOffset++) {\n\t\t\tc = this._buffer.charAt(l.charOffset);\n\t\t\tif (c == '\\n') {\n\t\t\t\tl.inBuffer++;\n\t\t\t\tl.col = 0;\n\t\t\t} else if (c != '\\r') {\n\t\t\t\tl.col++;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t  line: l.row + l.inBuffer + 1\n\t\t\t, col: l.col + (chunk ? 0: 1)\n\t\t};\n\t}\n\n\t//Checks the handler to make it is an object with the right \"interface\"\n\tParser.prototype.validateHandler = function Parser$validateHandler (handler) {\n\t\tif ((typeof handler) != \"object\")\n\t\t\tthrow new Error(\"Handler is not an object\");\n\t\tif ((typeof handler.reset) != \"function\")\n\t\t\tthrow new Error(\"Handler method 'reset' is invalid\");\n\t\tif ((typeof handler.done) != \"function\")\n\t\t\tthrow new Error(\"Handler method 'done' is invalid\");\n\t\tif ((typeof handler.writeTag) != \"function\")\n\t\t\tthrow new Error(\"Handler method 'writeTag' is invalid\");\n\t\tif ((typeof handler.writeText) != \"function\")\n\t\t\tthrow new Error(\"Handler method 'writeText' is invalid\");\n\t\tif ((typeof handler.writeComment) != \"function\")\n\t\t\tthrow new Error(\"Handler method 'writeComment' is invalid\");\n\t\tif ((typeof handler.writeDirective) != \"function\")\n\t\t\tthrow new Error(\"Handler method 'writeDirective' is invalid\");\n\t}\n\n\t//Writes parsed elements out to the handler\n\tParser.prototype.writeHandler = function Parser$writeHandler (forceFlush) {\n\t\tforceFlush = !!forceFlush;\n\t\tif (this._tagStack.length && !forceFlush)\n\t\t\treturn;\n\t\twhile (this._elements.length) {\n\t\t\tvar element = this._elements.shift();\n\t\t\tswitch (element.type) {\n\t\t\t\tcase ElementType.Comment:\n\t\t\t\t\tthis._handler.writeComment(element);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ElementType.Directive:\n\t\t\t\t\tthis._handler.writeDirective(element);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ElementType.Text:\n\t\t\t\t\tthis._handler.writeText(element);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis._handler.writeTag(element);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tParser.prototype.handleError = function Parser$handleError (error) {\n\t\tif ((typeof this._handler.error) == \"function\")\n\t\t\tthis._handler.error(error);\n\t\telse\n\t\t\tthrow error;\n\t}\n\n//TODO: make this a trully streamable handler\nfunction RssHandler (callback) {\n\tRssHandler.super_.call(this, callback, { ignoreWhitespace: true, verbose: false, enforceEmptyTags: false });\n}\ninherits(RssHandler, DefaultHandler);\n\n\tRssHandler.prototype.done = function RssHandler$done () {\n\t\tvar feed = { };\n\t\tvar feedRoot;\n\n\t\tvar found = DomUtils.getElementsByTagName(function (value) { return(value == \"rss\" || value == \"feed\"); }, this.dom, false);\n\t\tif (found.length) {\n\t\t\tfeedRoot = found[0];\n\t\t}\n\t\tif (feedRoot) {\n\t\t\tif (feedRoot.name == \"rss\") {\n\t\t\t\tfeed.type = \"rss\";\n\t\t\t\tfeedRoot = feedRoot.children[0]; //<channel/>\n\t\t\t\tfeed.id = \"\";\n\t\t\t\ttry {\n\t\t\t\t\tfeed.title = DomUtils.getElementsByTagName(\"title\", feedRoot.children, false)[0].children[0].data;\n\t\t\t\t} catch (ex) { }\n\t\t\t\ttry {\n\t\t\t\t\tfeed.link = DomUtils.getElementsByTagName(\"link\", feedRoot.children, false)[0].children[0].data;\n\t\t\t\t} catch (ex) { }\n\t\t\t\ttry {\n\t\t\t\t\tfeed.description = DomUtils.getElementsByTagName(\"description\", feedRoot.children, false)[0].children[0].data;\n\t\t\t\t} catch (ex) { }\n\t\t\t\ttry {\n\t\t\t\t\tfeed.updated = new Date(DomUtils.getElementsByTagName(\"lastBuildDate\", feedRoot.children, false)[0].children[0].data);\n\t\t\t\t} catch (ex) { }\n\t\t\t\ttry {\n\t\t\t\t\tfeed.author = DomUtils.getElementsByTagName(\"managingEditor\", feedRoot.children, false)[0].children[0].data;\n\t\t\t\t} catch (ex) { }\n\t\t\t\tfeed.items = [];\n\t\t\t\tDomUtils.getElementsByTagName(\"item\", feedRoot.children).forEach(function (item, index, list) {\n\t\t\t\t\tvar entry = {};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentry.id = DomUtils.getElementsByTagName(\"guid\", item.children, false)[0].children[0].data;\n\t\t\t\t\t} catch (ex) { }\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentry.title = DomUtils.getElementsByTagName(\"title\", item.children, false)[0].children[0].data;\n\t\t\t\t\t} catch (ex) { }\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentry.link = DomUtils.getElementsByTagName(\"link\", item.children, false)[0].children[0].data;\n\t\t\t\t\t} catch (ex) { }\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentry.description = DomUtils.getElementsByTagName(\"description\", item.children, false)[0].children[0].data;\n\t\t\t\t\t} catch (ex) { }\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentry.pubDate = new Date(DomUtils.getElementsByTagName(\"pubDate\", item.children, false)[0].children[0].data);\n\t\t\t\t\t} catch (ex) { }\n\t\t\t\t\tfeed.items.push(entry);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tfeed.type = \"atom\";\n\t\t\t\ttry {\n\t\t\t\t\tfeed.id = DomUtils.getElementsByTagName(\"id\", feedRoot.children, false)[0].children[0].data;\n\t\t\t\t} catch (ex) { }\n\t\t\t\ttry {\n\t\t\t\t\tfeed.title = DomUtils.getElementsByTagName(\"title\", feedRoot.children, false)[0].children[0].data;\n\t\t\t\t} catch (ex) { }\n\t\t\t\ttry {\n\t\t\t\t\tfeed.link = DomUtils.getElementsByTagName(\"link\", feedRoot.children, false)[0].attribs.href;\n\t\t\t\t} catch (ex) { }\n\t\t\t\ttry {\n\t\t\t\t\tfeed.description = DomUtils.getElementsByTagName(\"subtitle\", feedRoot.children, false)[0].children[0].data;\n\t\t\t\t} catch (ex) { }\n\t\t\t\ttry {\n\t\t\t\t\tfeed.updated = new Date(DomUtils.getElementsByTagName(\"updated\", feedRoot.children, false)[0].children[0].data);\n\t\t\t\t} catch (ex) { }\n\t\t\t\ttry {\n\t\t\t\t\tfeed.author = DomUtils.getElementsByTagName(\"email\", feedRoot.children, true)[0].children[0].data;\n\t\t\t\t} catch (ex) { }\n\t\t\t\tfeed.items = [];\n\t\t\t\tDomUtils.getElementsByTagName(\"entry\", feedRoot.children).forEach(function (item, index, list) {\n\t\t\t\t\tvar entry = {};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentry.id = DomUtils.getElementsByTagName(\"id\", item.children, false)[0].children[0].data;\n\t\t\t\t\t} catch (ex) { }\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentry.title = DomUtils.getElementsByTagName(\"title\", item.children, false)[0].children[0].data;\n\t\t\t\t\t} catch (ex) { }\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentry.link = DomUtils.getElementsByTagName(\"link\", item.children, false)[0].attribs.href;\n\t\t\t\t\t} catch (ex) { }\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentry.description = DomUtils.getElementsByTagName(\"summary\", item.children, false)[0].children[0].data;\n\t\t\t\t\t} catch (ex) { }\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentry.pubDate = new Date(DomUtils.getElementsByTagName(\"updated\", item.children, false)[0].children[0].data);\n\t\t\t\t\t} catch (ex) { }\n\t\t\t\t\tfeed.items.push(entry);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.dom = feed;\n\t\t}\n\t\tRssHandler.super_.prototype.done.call(this);\n\t}\n\n///////////////////////////////////////////////////\n\nfunction DefaultHandler (callback, options) {\n\tthis.reset();\n\tthis._options = options ? options : { };\n\tif (this._options.ignoreWhitespace == undefined)\n\t\tthis._options.ignoreWhitespace = false; //Keep whitespace-only text nodes\n\tif (this._options.verbose == undefined)\n\t\tthis._options.verbose = true; //Keep data property for tags and raw property for all\n\tif (this._options.enforceEmptyTags == undefined)\n\t\tthis._options.enforceEmptyTags = true; //Don't allow children for HTML tags defined as empty in spec\n\tif ((typeof callback) == \"function\")\n\t\tthis._callback = callback;\n}\n\n\t//**\"Static\"**//\n\t//HTML Tags that shouldn't contain child nodes\n\tDefaultHandler._emptyTags = {\n\t\t  area: 1\n\t\t, base: 1\n\t\t, basefont: 1\n\t\t, br: 1\n\t\t, col: 1\n\t\t, frame: 1\n\t\t, hr: 1\n\t\t, img: 1\n\t\t, input: 1\n\t\t, isindex: 1\n\t\t, link: 1\n\t\t, meta: 1\n\t\t, param: 1\n\t\t, embed: 1\n\t}\n\t//Regex to detect whitespace only text nodes\n\tDefaultHandler.reWhitespace = /^\\s*$/;\n\n\t//**Public**//\n\t//Properties//\n\tDefaultHandler.prototype.dom = null; //The hierarchical object containing the parsed HTML\n\t//Methods//\n\t//Resets the handler back to starting state\n\tDefaultHandler.prototype.reset = function DefaultHandler$reset() {\n\t\tthis.dom = [];\n\t\tthis._done = false;\n\t\tthis._tagStack = [];\n\t\tthis._tagStack.last = function DefaultHandler$_tagStack$last () {\n\t\t\treturn(this.length ? this[this.length - 1] : null);\n\t\t}\n\t}\n\t//Signals the handler that parsing is done\n\tDefaultHandler.prototype.done = function DefaultHandler$done () {\n\t\tthis._done = true;\n\t\tthis.handleCallback(null);\n\t}\n\tDefaultHandler.prototype.writeTag = function DefaultHandler$writeTag (element) {\n\t\tthis.handleElement(element);\n\t} \n\tDefaultHandler.prototype.writeText = function DefaultHandler$writeText (element) {\n\t\tif (this._options.ignoreWhitespace)\n\t\t\tif (DefaultHandler.reWhitespace.test(element.data))\n\t\t\t\treturn;\n\t\tthis.handleElement(element);\n\t} \n\tDefaultHandler.prototype.writeComment = function DefaultHandler$writeComment (element) {\n\t\tthis.handleElement(element);\n\t} \n\tDefaultHandler.prototype.writeDirective = function DefaultHandler$writeDirective (element) {\n\t\tthis.handleElement(element);\n\t}\n\tDefaultHandler.prototype.error = function DefaultHandler$error (error) {\n\t\tthis.handleCallback(error);\n\t}\n\n\t//**Private**//\n\t//Properties//\n\tDefaultHandler.prototype._options = null; //Handler options for how to behave\n\tDefaultHandler.prototype._callback = null; //Callback to respond to when parsing done\n\tDefaultHandler.prototype._done = false; //Flag indicating whether handler has been notified of parsing completed\n\tDefaultHandler.prototype._tagStack = null; //List of parents to the currently element being processed\n\t//Methods//\n\tDefaultHandler.prototype.handleCallback = function DefaultHandler$handleCallback (error) {\n\t\t\tif ((typeof this._callback) != \"function\")\n\t\t\t\tif (error)\n\t\t\t\t\tthrow error;\n\t\t\t\telse\n\t\t\t\t\treturn;\n\t\t\tthis._callback(error, this.dom);\n\t}\n\t\n\tDefaultHandler.prototype.isEmptyTag = function(element) {\n\t\tvar name = element.name.toLowerCase();\n\t\tif (name.charAt(0) == '/') {\n\t\t\tname = name.substring(1);\n\t\t}\n\t\treturn this._options.enforceEmptyTags && !!DefaultHandler._emptyTags[name];\n\t};\n\t\n\tDefaultHandler.prototype.handleElement = function DefaultHandler$handleElement (element) {\n\t\tif (this._done)\n\t\t\tthis.handleCallback(new Error(\"Writing to the handler after done() called is not allowed without a reset()\"));\n\t\tif (!this._options.verbose) {\n//\t\t\telement.raw = null; //FIXME: Not clean\n\t\t\t//FIXME: Serious performance problem using delete\n\t\t\tdelete element.raw;\n\t\t\tif (element.type == \"tag\" || element.type == \"script\" || element.type == \"style\")\n\t\t\t\tdelete element.data;\n\t\t}\n\t\tif (!this._tagStack.last()) { //There are no parent elements\n\t\t\t//If the element can be a container, add it to the tag stack and the top level list\n\t\t\tif (element.type != ElementType.Text && element.type != ElementType.Comment && element.type != ElementType.Directive) {\n\t\t\t\tif (element.name.charAt(0) != \"/\") { //Ignore closing tags that obviously don't have an opening tag\n\t\t\t\t\tthis.dom.push(element);\n\t\t\t\t\tif (!this.isEmptyTag(element)) { //Don't add tags to the tag stack that can't have children\n\t\t\t\t\t\tthis._tagStack.push(element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse //Otherwise just add to the top level list\n\t\t\t\tthis.dom.push(element);\n\t\t}\n\t\telse { //There are parent elements\n\t\t\t//If the element can be a container, add it as a child of the element\n\t\t\t//on top of the tag stack and then add it to the tag stack\n\t\t\tif (element.type != ElementType.Text && element.type != ElementType.Comment && element.type != ElementType.Directive) {\n\t\t\t\tif (element.name.charAt(0) == \"/\") {\n\t\t\t\t\t//This is a closing tag, scan the tagStack to find the matching opening tag\n\t\t\t\t\t//and pop the stack up to the opening tag's parent\n\t\t\t\t\tvar baseName = element.name.substring(1);\n\t\t\t\t\tif (!this.isEmptyTag(element)) {\n\t\t\t\t\t\tvar pos = this._tagStack.length - 1;\n\t\t\t\t\t\twhile (pos > -1 && this._tagStack[pos--].name != baseName) { }\n\t\t\t\t\t\tif (pos > -1 || this._tagStack[0].name == baseName)\n\t\t\t\t\t\t\twhile (pos < this._tagStack.length - 1)\n\t\t\t\t\t\t\t\tthis._tagStack.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse { //This is not a closing tag\n\t\t\t\t\tif (!this._tagStack.last().children)\n\t\t\t\t\t\tthis._tagStack.last().children = [];\n\t\t\t\t\tthis._tagStack.last().children.push(element);\n\t\t\t\t\tif (!this.isEmptyTag(element)) //Don't add tags to the tag stack that can't have children\n\t\t\t\t\t\tthis._tagStack.push(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse { //This is not a container element\n\t\t\t\tif (!this._tagStack.last().children)\n\t\t\t\t\tthis._tagStack.last().children = [];\n\t\t\t\tthis._tagStack.last().children.push(element);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar DomUtils = {\n\t\t  testElement: function DomUtils$testElement (options, element) {\n\t\t\tif (!element) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tfor (var key in options) {\n\t\t\t\tif (key == \"tag_name\") {\n\t\t\t\t\tif (element.type != \"tag\" && element.type != \"script\" && element.type != \"style\") {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (!options[\"tag_name\"](element.name)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else if (key == \"tag_type\") {\n\t\t\t\t\tif (!options[\"tag_type\"](element.type)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else if (key == \"tag_contains\") {\n\t\t\t\t\tif (element.type != \"text\" && element.type != \"comment\" && element.type != \"directive\") {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (!options[\"tag_contains\"](element.data)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!element.attribs || !options[key](element.attribs[key])) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\treturn true;\n\t\t}\n\t\n\t\t, getElements: function DomUtils$getElements (options, currentElement, recurse, limit) {\n\t\t\trecurse = (recurse === undefined || recurse === null) || !!recurse;\n\t\t\tlimit = isNaN(parseInt(limit)) ? -1 : parseInt(limit);\n\n\t\t\tif (!currentElement) {\n\t\t\t\treturn([]);\n\t\t\t}\n\t\n\t\t\tvar found = [];\n\t\t\tvar elementList;\n\n\t\t\tfunction getTest (checkVal) {\n\t\t\t\treturn(function (value) { return(value == checkVal); });\n\t\t\t}\n\t\t\tfor (var key in options) {\n\t\t\t\tif ((typeof options[key]) != \"function\") {\n\t\t\t\t\toptions[key] = getTest(options[key]);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (DomUtils.testElement(options, currentElement)) {\n\t\t\t\tfound.push(currentElement);\n\t\t\t}\n\n\t\t\tif (limit >= 0 && found.length >= limit) {\n\t\t\t\treturn(found);\n\t\t\t}\n\n\t\t\tif (recurse && currentElement.children) {\n\t\t\t\telementList = currentElement.children;\n\t\t\t} else if (currentElement instanceof Array) {\n\t\t\t\telementList = currentElement;\n\t\t\t} else {\n\t\t\t\treturn(found);\n\t\t\t}\n\t\n\t\t\tfor (var i = 0; i < elementList.length; i++) {\n\t\t\t\tfound = found.concat(DomUtils.getElements(options, elementList[i], recurse, limit));\n\t\t\t\tif (limit >= 0 && found.length >= limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn(found);\n\t\t}\n\t\t\n\t\t, getElementById: function DomUtils$getElementById (id, currentElement, recurse) {\n\t\t\tvar result = DomUtils.getElements({ id: id }, currentElement, recurse, 1);\n\t\t\treturn(result.length ? result[0] : null);\n\t\t}\n\t\t\n\t\t, getElementsByTagName: function DomUtils$getElementsByTagName (name, currentElement, recurse, limit) {\n\t\t\treturn(DomUtils.getElements({ tag_name: name }, currentElement, recurse, limit));\n\t\t}\n\t\t\n\t\t, getElementsByTagType: function DomUtils$getElementsByTagType (type, currentElement, recurse, limit) {\n\t\t\treturn(DomUtils.getElements({ tag_type: type }, currentElement, recurse, limit));\n\t\t}\n\t}\n\n\tfunction inherits (ctor, superCtor) {\n\t\tvar tempCtor = function(){};\n\t\ttempCtor.prototype = superCtor.prototype;\n\t\tctor.super_ = superCtor;\n\t\tctor.prototype = new tempCtor();\n\t\tctor.prototype.constructor = ctor;\n\t}\n\nexports.Parser = Parser;\n\nexports.DefaultHandler = DefaultHandler;\n\nexports.RssHandler = RssHandler;\n\nexports.ElementType = ElementType;\n\nexports.DomUtils = DomUtils;\n\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_htmlparser@1.7.7@htmlparser/lib/htmlparser.js\n// module id = lsxf\n// module chunks = 3","var htmlparser = require('htmlparser');\n\n(function () {\n\n    function parseHtml(html){\n\n        var handler = new htmlparser.DefaultHandler(function (error, dom) {}, { verbose: false, ignoreWhitespace: true });\n        var parser = new htmlparser.Parser(handler).parseComplete(html);\n\n        return handler.dom\n    }\n\n    function buildObject(obj){\n\n        var tempArray = [];\n\n        for(var i in obj){\n            if(obj[i].type != \"text\"){\n\n                var tempObject = {};\n\n                if(obj[i].attribs && obj[i].attribs.class){\n                    tempObject.type = \"class\";\n\n                    var classNames = obj[i].attribs.class.split(' ');\n                    if(classNames.length > 1){\n                        tempObject.children = [];\n                    }\n\n                    for(var j in classNames){\n                        if(j == 0){\n                            tempObject.name = classNames[j];\n                        } else {\n                            tempObject.children[j-1] = {};\n                            tempObject.children[j-1].type = \"additional-class\";\n                            tempObject.children[j-1].name = classNames[j];\n                        }\n\n                    }\n\n                } else if(obj[i].attribs && obj[i].attribs.id){\n                    tempObject.type = \"id\";\n                    tempObject.name = obj[i].attribs.id;\n                } else if(obj[i].type === \"tag\"){\n                    tempObject.type = \"tag\";\n                    tempObject.name = obj[i].name;\n                }\n\n                if(obj[i].children && obj[i].children[0] && obj[i].children[0].type != \"text\"){\n                    if (tempObject.children){\n                        tempObject.children = tempObject.children.concat(buildObject(obj[i].children));\n                    } else {\n                        tempObject.children = buildObject(obj[i].children);\n                    }\n                }\n\n                tempArray.push(tempObject);\n            }\n        }\n\n        return tempArray\n    }\n\n    function removeDuplicates(obj, print){\n\n        var i = obj.length;\n        while(i--){\n\n            var j = i;\n            while(j--){\n\n                if(obj[i] && obj[i].name && obj[j] && obj[j].name && obj[i].name === obj[j].name){\n\n                    if(obj[i].children){\n\n                        if(obj[j].children){\n\n                            obj[j].children = obj[j].children.concat(obj[i].children);\n                        } else {\n                            obj[j].children = obj[i].children;\n                        }\n                    }\n\n                    delete obj[i]\n                }\n            }\n        }\n\n        var top = [];\n        var rest = [];\n\n        for(var n in obj){\n\n            if(obj[n].children){\n                obj[n].children = removeDuplicates(obj[n].children);\n            }\n\n            if(obj[n].type === \"additional-class\"){\n                top.push(obj[n]);\n            } else {\n                rest.push(obj[n]);\n            }\n        }\n\n        return top.concat(rest)\n    }\n\n    function print(obj, indent){\n        indent = indent ? indent : '';\n        var tempArray = [];\n\n        for(var i in obj){\n\n            var modifier = '';\n            if(obj[i].type === 'class'){\n                modifier = '.';\n            } else if(obj[i].type === 'id'){\n                modifier = '#';\n            } else if(obj[i].type === 'tag'){\n                modifier = '';\n            } else if(obj[i].type === 'additional-class'){\n                modifier = '&.';\n            }\n\n            tempArray.push(indent + modifier + obj[i].name + '{\\n');\n\n            if(obj[i].children){\n\n                var children = print(obj[i].children, indent + '\\t');\n                for(var j in children){\n                    tempArray.push(children[j]);\n                }\n            }\n\n            tempArray.push(indent + '}');\n        }\n\n        return tempArray\n    }\n\n\n    function parse(html){\n        var html = parseHtml(html);\n        var obj = buildObject(html);\n        var clean = removeDuplicates(obj);\n        var css = print(clean);\n\n        return css.join('\\n')\n    }\n\n    exports.buildObject = buildObject;\n    exports.removeDuplicates = removeDuplicates;\n    exports.print = print;\n    exports.parse = parse;\n\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_htmltoless@0.0.1@htmltoless/lib/htmltoless.js\n// module id = nlad\n// module chunks = 3","/**\n * Less - Leaner CSS v4.1.1\n * http://lesscss.org\n * \n * Copyright (c) 2009-2021, Alexis Sellier <self@cloudhead.net>\n * Licensed under the Apache-2.0 License.\n *\n * @license Apache-2.0\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.less = factory());\n}(this, (function () { 'use strict';\n\n    // Export a new default each time\r\n    function defaultOptions () {\r\n        return {\r\n            /* Inline Javascript - @plugin still allowed */\r\n            javascriptEnabled: false,\r\n            /* Outputs a makefile import dependency list to stdout. */\r\n            depends: false,\r\n            /* (DEPRECATED) Compress using less built-in compression.\r\n             * This does an okay job but does not utilise all the tricks of\r\n             * dedicated css compression. */\r\n            compress: false,\r\n            /* Runs the less parser and just reports errors without any output. */\r\n            lint: false,\r\n            /* Sets available include paths.\r\n             * If the file in an @import rule does not exist at that exact location,\r\n             * less will look for it at the location(s) passed to this option.\r\n             * You might use this for instance to specify a path to a library which\r\n             * you want to be referenced simply and relatively in the less files. */\r\n            paths: [],\r\n            /* color output in the terminal */\r\n            color: true,\r\n            /* The strictImports controls whether the compiler will allow an @import inside of either\r\n             * @media blocks or (a later addition) other selector blocks.\r\n             * See: https://github.com/less/less.js/issues/656 */\r\n            strictImports: false,\r\n            /* Allow Imports from Insecure HTTPS Hosts */\r\n            insecure: false,\r\n            /* Allows you to add a path to every generated import and url in your css.\r\n             * This does not affect less import statements that are processed, just ones\r\n             * that are left in the output css. */\r\n            rootpath: '',\r\n            /* By default URLs are kept as-is, so if you import a file in a sub-directory\r\n             * that references an image, exactly the same URL will be output in the css.\r\n             * This option allows you to re-write URL's in imported files so that the\r\n             * URL is always relative to the base imported file */\r\n            rewriteUrls: false,\r\n            /* How to process math\r\n             *   0 always           - eagerly try to solve all operations\r\n             *   1 parens-division  - require parens for division \"/\"\r\n             *   2 parens | strict  - require parens for all operations\r\n             *   3 strict-legacy    - legacy strict behavior (super-strict)\r\n             */\r\n            math: 1,\r\n            /* Without this option, less attempts to guess at the output unit when it does maths. */\r\n            strictUnits: false,\r\n            /* Effectively the declaration is put at the top of your base Less file,\r\n             * meaning it can be used but it also can be overridden if this variable\r\n             * is defined in the file. */\r\n            globalVars: null,\r\n            /* As opposed to the global variable option, this puts the declaration at the\r\n             * end of your base file, meaning it will override anything defined in your Less file. */\r\n            modifyVars: null,\r\n            /* This option allows you to specify a argument to go on to every URL.  */\r\n            urlArgs: ''\r\n        };\r\n    }\n\n    function extractId(href) {\r\n        return href.replace(/^[a-z-]+:\\/+?[^\\/]+/, '') // Remove protocol & domain\r\n            .replace(/[\\?\\&]livereload=\\w+/, '') // Remove LiveReload cachebuster\r\n            .replace(/^\\//, '') // Remove root /\r\n            .replace(/\\.[a-zA-Z]+$/, '') // Remove simple extension\r\n            .replace(/[^\\.\\w-]+/g, '-') // Replace illegal characters\r\n            .replace(/\\./g, ':'); // Replace dots with colons(for valid id)\r\n    }\r\n    function addDataAttr(options, tag) {\r\n        for (var opt in tag.dataset) {\r\n            if (tag.dataset.hasOwnProperty(opt)) {\r\n                if (opt === 'env' || opt === 'dumpLineNumbers' || opt === 'rootpath' || opt === 'errorReporting') {\r\n                    options[opt] = tag.dataset[opt];\r\n                }\r\n                else {\r\n                    try {\r\n                        options[opt] = JSON.parse(tag.dataset[opt]);\r\n                    }\r\n                    catch (_) { }\r\n                }\r\n            }\r\n        }\r\n    }\n\n    var browser = {\r\n        createCSS: function (document, styles, sheet) {\r\n            // Strip the query-string\r\n            var href = sheet.href || '';\r\n            // If there is no title set, use the filename, minus the extension\r\n            var id = \"less:\" + (sheet.title || extractId(href));\r\n            // If this has already been inserted into the DOM, we may need to replace it\r\n            var oldStyleNode = document.getElementById(id);\r\n            var keepOldStyleNode = false;\r\n            // Create a new stylesheet node for insertion or (if necessary) replacement\r\n            var styleNode = document.createElement('style');\r\n            styleNode.setAttribute('type', 'text/css');\r\n            if (sheet.media) {\r\n                styleNode.setAttribute('media', sheet.media);\r\n            }\r\n            styleNode.id = id;\r\n            if (!styleNode.styleSheet) {\r\n                styleNode.appendChild(document.createTextNode(styles));\r\n                // If new contents match contents of oldStyleNode, don't replace oldStyleNode\r\n                keepOldStyleNode = (oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 &&\r\n                    oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue);\r\n            }\r\n            var head = document.getElementsByTagName('head')[0];\r\n            // If there is no oldStyleNode, just append; otherwise, only append if we need\r\n            // to replace oldStyleNode with an updated stylesheet\r\n            if (oldStyleNode === null || keepOldStyleNode === false) {\r\n                var nextEl = sheet && sheet.nextSibling || null;\r\n                if (nextEl) {\r\n                    nextEl.parentNode.insertBefore(styleNode, nextEl);\r\n                }\r\n                else {\r\n                    head.appendChild(styleNode);\r\n                }\r\n            }\r\n            if (oldStyleNode && keepOldStyleNode === false) {\r\n                oldStyleNode.parentNode.removeChild(oldStyleNode);\r\n            }\r\n            // For IE.\r\n            // This needs to happen *after* the style element is added to the DOM, otherwise IE 7 and 8 may crash.\r\n            // See http://social.msdn.microsoft.com/Forums/en-US/7e081b65-878a-4c22-8e68-c10d39c2ed32/internet-explorer-crashes-appending-style-element-to-head\r\n            if (styleNode.styleSheet) {\r\n                try {\r\n                    styleNode.styleSheet.cssText = styles;\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Couldn\\'t reassign styleSheet.cssText.');\r\n                }\r\n            }\r\n        },\r\n        currentScript: function (window) {\r\n            var document = window.document;\r\n            return document.currentScript || (function () {\r\n                var scripts = document.getElementsByTagName('script');\r\n                return scripts[scripts.length - 1];\r\n            })();\r\n        }\r\n    };\n\n    var addDefaultOptions = (function (window, options) {\r\n        // use options from the current script tag data attribues\r\n        addDataAttr(options, browser.currentScript(window));\r\n        if (options.isFileProtocol === undefined) {\r\n            options.isFileProtocol = /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);\r\n        }\r\n        // Load styles asynchronously (default: false)\r\n        //\r\n        // This is set to `false` by default, so that the body\r\n        // doesn't start loading before the stylesheets are parsed.\r\n        // Setting this to `true` can result in flickering.\r\n        //\r\n        options.async = options.async || false;\r\n        options.fileAsync = options.fileAsync || false;\r\n        // Interval between watch polls\r\n        options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);\r\n        options.env = options.env || (window.location.hostname == '127.0.0.1' ||\r\n            window.location.hostname == '0.0.0.0' ||\r\n            window.location.hostname == 'localhost' ||\r\n            (window.location.port &&\r\n                window.location.port.length > 0) ||\r\n            options.isFileProtocol ? 'development'\r\n            : 'production');\r\n        var dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);\r\n        if (dumpLineNumbers) {\r\n            options.dumpLineNumbers = dumpLineNumbers[1];\r\n        }\r\n        if (options.useFileCache === undefined) {\r\n            options.useFileCache = true;\r\n        }\r\n        if (options.onReady === undefined) {\r\n            options.onReady = true;\r\n        }\r\n        if (options.relativeUrls) {\r\n            options.rewriteUrls = 'all';\r\n        }\r\n    });\n\n    var logger = {\r\n        error: function (msg) {\r\n            this._fireEvent('error', msg);\r\n        },\r\n        warn: function (msg) {\r\n            this._fireEvent('warn', msg);\r\n        },\r\n        info: function (msg) {\r\n            this._fireEvent('info', msg);\r\n        },\r\n        debug: function (msg) {\r\n            this._fireEvent('debug', msg);\r\n        },\r\n        addListener: function (listener) {\r\n            this._listeners.push(listener);\r\n        },\r\n        removeListener: function (listener) {\r\n            for (var i = 0; i < this._listeners.length; i++) {\r\n                if (this._listeners[i] === listener) {\r\n                    this._listeners.splice(i, 1);\r\n                    return;\r\n                }\r\n            }\r\n        },\r\n        _fireEvent: function (type, msg) {\r\n            for (var i = 0; i < this._listeners.length; i++) {\r\n                var logFunction = this._listeners[i][type];\r\n                if (logFunction) {\r\n                    logFunction(msg);\r\n                }\r\n            }\r\n        },\r\n        _listeners: []\r\n    };\n\n    /**\r\n     * @todo Document why this abstraction exists, and the relationship between\r\n     *       environment, file managers, and plugin manager\r\n     */\r\n    var Environment = /** @class */ (function () {\r\n        function Environment(externalEnvironment, fileManagers) {\r\n            this.fileManagers = fileManagers || [];\r\n            externalEnvironment = externalEnvironment || {};\r\n            var optionalFunctions = ['encodeBase64', 'mimeLookup', 'charsetLookup', 'getSourceMapGenerator'];\r\n            var requiredFunctions = [];\r\n            var functions = requiredFunctions.concat(optionalFunctions);\r\n            for (var i = 0; i < functions.length; i++) {\r\n                var propName = functions[i];\r\n                var environmentFunc = externalEnvironment[propName];\r\n                if (environmentFunc) {\r\n                    this[propName] = environmentFunc.bind(externalEnvironment);\r\n                }\r\n                else if (i < requiredFunctions.length) {\r\n                    this.warn(\"missing required function in environment - \" + propName);\r\n                }\r\n            }\r\n        }\r\n        Environment.prototype.getFileManager = function (filename, currentDirectory, options, environment, isSync) {\r\n            if (!filename) {\r\n                logger.warn('getFileManager called with no filename.. Please report this issue. continuing.');\r\n            }\r\n            if (currentDirectory == null) {\r\n                logger.warn('getFileManager called with null directory.. Please report this issue. continuing.');\r\n            }\r\n            var fileManagers = this.fileManagers;\r\n            if (options.pluginManager) {\r\n                fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\r\n            }\r\n            for (var i = fileManagers.length - 1; i >= 0; i--) {\r\n                var fileManager = fileManagers[i];\r\n                if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {\r\n                    return fileManager;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        Environment.prototype.addFileManager = function (fileManager) {\r\n            this.fileManagers.push(fileManager);\r\n        };\r\n        Environment.prototype.clearFileManagers = function () {\r\n            this.fileManagers = [];\r\n        };\r\n        return Environment;\r\n    }());\n\n    var colors = {\r\n        'aliceblue': '#f0f8ff',\r\n        'antiquewhite': '#faebd7',\r\n        'aqua': '#00ffff',\r\n        'aquamarine': '#7fffd4',\r\n        'azure': '#f0ffff',\r\n        'beige': '#f5f5dc',\r\n        'bisque': '#ffe4c4',\r\n        'black': '#000000',\r\n        'blanchedalmond': '#ffebcd',\r\n        'blue': '#0000ff',\r\n        'blueviolet': '#8a2be2',\r\n        'brown': '#a52a2a',\r\n        'burlywood': '#deb887',\r\n        'cadetblue': '#5f9ea0',\r\n        'chartreuse': '#7fff00',\r\n        'chocolate': '#d2691e',\r\n        'coral': '#ff7f50',\r\n        'cornflowerblue': '#6495ed',\r\n        'cornsilk': '#fff8dc',\r\n        'crimson': '#dc143c',\r\n        'cyan': '#00ffff',\r\n        'darkblue': '#00008b',\r\n        'darkcyan': '#008b8b',\r\n        'darkgoldenrod': '#b8860b',\r\n        'darkgray': '#a9a9a9',\r\n        'darkgrey': '#a9a9a9',\r\n        'darkgreen': '#006400',\r\n        'darkkhaki': '#bdb76b',\r\n        'darkmagenta': '#8b008b',\r\n        'darkolivegreen': '#556b2f',\r\n        'darkorange': '#ff8c00',\r\n        'darkorchid': '#9932cc',\r\n        'darkred': '#8b0000',\r\n        'darksalmon': '#e9967a',\r\n        'darkseagreen': '#8fbc8f',\r\n        'darkslateblue': '#483d8b',\r\n        'darkslategray': '#2f4f4f',\r\n        'darkslategrey': '#2f4f4f',\r\n        'darkturquoise': '#00ced1',\r\n        'darkviolet': '#9400d3',\r\n        'deeppink': '#ff1493',\r\n        'deepskyblue': '#00bfff',\r\n        'dimgray': '#696969',\r\n        'dimgrey': '#696969',\r\n        'dodgerblue': '#1e90ff',\r\n        'firebrick': '#b22222',\r\n        'floralwhite': '#fffaf0',\r\n        'forestgreen': '#228b22',\r\n        'fuchsia': '#ff00ff',\r\n        'gainsboro': '#dcdcdc',\r\n        'ghostwhite': '#f8f8ff',\r\n        'gold': '#ffd700',\r\n        'goldenrod': '#daa520',\r\n        'gray': '#808080',\r\n        'grey': '#808080',\r\n        'green': '#008000',\r\n        'greenyellow': '#adff2f',\r\n        'honeydew': '#f0fff0',\r\n        'hotpink': '#ff69b4',\r\n        'indianred': '#cd5c5c',\r\n        'indigo': '#4b0082',\r\n        'ivory': '#fffff0',\r\n        'khaki': '#f0e68c',\r\n        'lavender': '#e6e6fa',\r\n        'lavenderblush': '#fff0f5',\r\n        'lawngreen': '#7cfc00',\r\n        'lemonchiffon': '#fffacd',\r\n        'lightblue': '#add8e6',\r\n        'lightcoral': '#f08080',\r\n        'lightcyan': '#e0ffff',\r\n        'lightgoldenrodyellow': '#fafad2',\r\n        'lightgray': '#d3d3d3',\r\n        'lightgrey': '#d3d3d3',\r\n        'lightgreen': '#90ee90',\r\n        'lightpink': '#ffb6c1',\r\n        'lightsalmon': '#ffa07a',\r\n        'lightseagreen': '#20b2aa',\r\n        'lightskyblue': '#87cefa',\r\n        'lightslategray': '#778899',\r\n        'lightslategrey': '#778899',\r\n        'lightsteelblue': '#b0c4de',\r\n        'lightyellow': '#ffffe0',\r\n        'lime': '#00ff00',\r\n        'limegreen': '#32cd32',\r\n        'linen': '#faf0e6',\r\n        'magenta': '#ff00ff',\r\n        'maroon': '#800000',\r\n        'mediumaquamarine': '#66cdaa',\r\n        'mediumblue': '#0000cd',\r\n        'mediumorchid': '#ba55d3',\r\n        'mediumpurple': '#9370d8',\r\n        'mediumseagreen': '#3cb371',\r\n        'mediumslateblue': '#7b68ee',\r\n        'mediumspringgreen': '#00fa9a',\r\n        'mediumturquoise': '#48d1cc',\r\n        'mediumvioletred': '#c71585',\r\n        'midnightblue': '#191970',\r\n        'mintcream': '#f5fffa',\r\n        'mistyrose': '#ffe4e1',\r\n        'moccasin': '#ffe4b5',\r\n        'navajowhite': '#ffdead',\r\n        'navy': '#000080',\r\n        'oldlace': '#fdf5e6',\r\n        'olive': '#808000',\r\n        'olivedrab': '#6b8e23',\r\n        'orange': '#ffa500',\r\n        'orangered': '#ff4500',\r\n        'orchid': '#da70d6',\r\n        'palegoldenrod': '#eee8aa',\r\n        'palegreen': '#98fb98',\r\n        'paleturquoise': '#afeeee',\r\n        'palevioletred': '#d87093',\r\n        'papayawhip': '#ffefd5',\r\n        'peachpuff': '#ffdab9',\r\n        'peru': '#cd853f',\r\n        'pink': '#ffc0cb',\r\n        'plum': '#dda0dd',\r\n        'powderblue': '#b0e0e6',\r\n        'purple': '#800080',\r\n        'rebeccapurple': '#663399',\r\n        'red': '#ff0000',\r\n        'rosybrown': '#bc8f8f',\r\n        'royalblue': '#4169e1',\r\n        'saddlebrown': '#8b4513',\r\n        'salmon': '#fa8072',\r\n        'sandybrown': '#f4a460',\r\n        'seagreen': '#2e8b57',\r\n        'seashell': '#fff5ee',\r\n        'sienna': '#a0522d',\r\n        'silver': '#c0c0c0',\r\n        'skyblue': '#87ceeb',\r\n        'slateblue': '#6a5acd',\r\n        'slategray': '#708090',\r\n        'slategrey': '#708090',\r\n        'snow': '#fffafa',\r\n        'springgreen': '#00ff7f',\r\n        'steelblue': '#4682b4',\r\n        'tan': '#d2b48c',\r\n        'teal': '#008080',\r\n        'thistle': '#d8bfd8',\r\n        'tomato': '#ff6347',\r\n        'turquoise': '#40e0d0',\r\n        'violet': '#ee82ee',\r\n        'wheat': '#f5deb3',\r\n        'white': '#ffffff',\r\n        'whitesmoke': '#f5f5f5',\r\n        'yellow': '#ffff00',\r\n        'yellowgreen': '#9acd32'\r\n    };\n\n    var unitConversions = {\r\n        length: {\r\n            'm': 1,\r\n            'cm': 0.01,\r\n            'mm': 0.001,\r\n            'in': 0.0254,\r\n            'px': 0.0254 / 96,\r\n            'pt': 0.0254 / 72,\r\n            'pc': 0.0254 / 72 * 12\r\n        },\r\n        duration: {\r\n            's': 1,\r\n            'ms': 0.001\r\n        },\r\n        angle: {\r\n            'rad': 1 / (2 * Math.PI),\r\n            'deg': 1 / 360,\r\n            'grad': 1 / 400,\r\n            'turn': 1\r\n        }\r\n    };\n\n    var data = { colors: colors, unitConversions: unitConversions };\n\n    /**\r\n     * The reason why Node is a class and other nodes simply do not extend\r\n     * from Node (since we're transpiling) is due to this issue:\r\n     *\r\n     * https://github.com/less/less.js/issues/3434\r\n     */\r\n    var Node = /** @class */ (function () {\r\n        function Node() {\r\n            this.parent = null;\r\n            this.visibilityBlocks = undefined;\r\n            this.nodeVisible = undefined;\r\n            this.rootNode = null;\r\n            this.parsed = null;\r\n            var self = this;\r\n            Object.defineProperty(this, 'currentFileInfo', {\r\n                get: function () { return self.fileInfo(); }\r\n            });\r\n            Object.defineProperty(this, 'index', {\r\n                get: function () { return self.getIndex(); }\r\n            });\r\n        }\r\n        Node.prototype.setParent = function (nodes, parent) {\r\n            function set(node) {\r\n                if (node && node instanceof Node) {\r\n                    node.parent = parent;\r\n                }\r\n            }\r\n            if (Array.isArray(nodes)) {\r\n                nodes.forEach(set);\r\n            }\r\n            else {\r\n                set(nodes);\r\n            }\r\n        };\r\n        Node.prototype.getIndex = function () {\r\n            return this._index || (this.parent && this.parent.getIndex()) || 0;\r\n        };\r\n        Node.prototype.fileInfo = function () {\r\n            return this._fileInfo || (this.parent && this.parent.fileInfo()) || {};\r\n        };\r\n        Node.prototype.isRulesetLike = function () { return false; };\r\n        Node.prototype.toCSS = function (context) {\r\n            var strs = [];\r\n            this.genCSS(context, {\r\n                add: function (chunk, fileInfo, index) {\r\n                    strs.push(chunk);\r\n                },\r\n                isEmpty: function () {\r\n                    return strs.length === 0;\r\n                }\r\n            });\r\n            return strs.join('');\r\n        };\r\n        Node.prototype.genCSS = function (context, output) {\r\n            output.add(this.value);\r\n        };\r\n        Node.prototype.accept = function (visitor) {\r\n            this.value = visitor.visit(this.value);\r\n        };\r\n        Node.prototype.eval = function () { return this; };\r\n        Node.prototype._operate = function (context, op, a, b) {\r\n            switch (op) {\r\n                case '+': return a + b;\r\n                case '-': return a - b;\r\n                case '*': return a * b;\r\n                case '/': return a / b;\r\n            }\r\n        };\r\n        Node.prototype.fround = function (context, value) {\r\n            var precision = context && context.numPrecision;\r\n            // add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999...) are properly rounded:\r\n            return (precision) ? Number((value + 2e-16).toFixed(precision)) : value;\r\n        };\r\n        Node.compare = function (a, b) {\r\n            /* returns:\r\n             -1: a < b\r\n             0: a = b\r\n             1: a > b\r\n             and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\r\n            if ((a.compare) &&\r\n                // for \"symmetric results\" force toCSS-based comparison\r\n                // of Quoted or Anonymous if either value is one of those\r\n                !(b.type === 'Quoted' || b.type === 'Anonymous')) {\r\n                return a.compare(b);\r\n            }\r\n            else if (b.compare) {\r\n                return -b.compare(a);\r\n            }\r\n            else if (a.type !== b.type) {\r\n                return undefined;\r\n            }\r\n            a = a.value;\r\n            b = b.value;\r\n            if (!Array.isArray(a)) {\r\n                return a === b ? 0 : undefined;\r\n            }\r\n            if (a.length !== b.length) {\r\n                return undefined;\r\n            }\r\n            for (var i = 0; i < a.length; i++) {\r\n                if (Node.compare(a[i], b[i]) !== 0) {\r\n                    return undefined;\r\n                }\r\n            }\r\n            return 0;\r\n        };\r\n        Node.numericCompare = function (a, b) {\r\n            return a < b ? -1\r\n                : a === b ? 0\r\n                    : a > b ? 1 : undefined;\r\n        };\r\n        // Returns true if this node represents root of ast imported by reference\r\n        Node.prototype.blocksVisibility = function () {\r\n            if (this.visibilityBlocks == null) {\r\n                this.visibilityBlocks = 0;\r\n            }\r\n            return this.visibilityBlocks !== 0;\r\n        };\r\n        Node.prototype.addVisibilityBlock = function () {\r\n            if (this.visibilityBlocks == null) {\r\n                this.visibilityBlocks = 0;\r\n            }\r\n            this.visibilityBlocks = this.visibilityBlocks + 1;\r\n        };\r\n        Node.prototype.removeVisibilityBlock = function () {\r\n            if (this.visibilityBlocks == null) {\r\n                this.visibilityBlocks = 0;\r\n            }\r\n            this.visibilityBlocks = this.visibilityBlocks - 1;\r\n        };\r\n        // Turns on node visibility - if called node will be shown in output regardless\r\n        // of whether it comes from import by reference or not\r\n        Node.prototype.ensureVisibility = function () {\r\n            this.nodeVisible = true;\r\n        };\r\n        // Turns off node visibility - if called node will NOT be shown in output regardless\r\n        // of whether it comes from import by reference or not\r\n        Node.prototype.ensureInvisibility = function () {\r\n            this.nodeVisible = false;\r\n        };\r\n        // return values:\r\n        // false - the node must not be visible\r\n        // true - the node must be visible\r\n        // undefined or null - the node has the same visibility as its parent\r\n        Node.prototype.isVisible = function () {\r\n            return this.nodeVisible;\r\n        };\r\n        Node.prototype.visibilityInfo = function () {\r\n            return {\r\n                visibilityBlocks: this.visibilityBlocks,\r\n                nodeVisible: this.nodeVisible\r\n            };\r\n        };\r\n        Node.prototype.copyVisibilityInfo = function (info) {\r\n            if (!info) {\r\n                return;\r\n            }\r\n            this.visibilityBlocks = info.visibilityBlocks;\r\n            this.nodeVisible = info.nodeVisible;\r\n        };\r\n        return Node;\r\n    }());\n\n    //\r\n    // RGB Colors - #ff0014, #eee\r\n    //\r\n    var Color = function (rgb, a, originalForm) {\r\n        var self = this;\r\n        //\r\n        // The end goal here, is to parse the arguments\r\n        // into an integer triplet, such as `128, 255, 0`\r\n        //\r\n        // This facilitates operations and conversions.\r\n        //\r\n        if (Array.isArray(rgb)) {\r\n            this.rgb = rgb;\r\n        }\r\n        else if (rgb.length >= 6) {\r\n            this.rgb = [];\r\n            rgb.match(/.{2}/g).map(function (c, i) {\r\n                if (i < 3) {\r\n                    self.rgb.push(parseInt(c, 16));\r\n                }\r\n                else {\r\n                    self.alpha = (parseInt(c, 16)) / 255;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.rgb = [];\r\n            rgb.split('').map(function (c, i) {\r\n                if (i < 3) {\r\n                    self.rgb.push(parseInt(c + c, 16));\r\n                }\r\n                else {\r\n                    self.alpha = (parseInt(c + c, 16)) / 255;\r\n                }\r\n            });\r\n        }\r\n        this.alpha = this.alpha || (typeof a === 'number' ? a : 1);\r\n        if (typeof originalForm !== 'undefined') {\r\n            this.value = originalForm;\r\n        }\r\n    };\r\n    Color.prototype = Object.assign(new Node(), {\r\n        type: 'Color',\r\n        luma: function () {\r\n            var r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255;\r\n            r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);\r\n            g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);\r\n            b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);\r\n            return 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add(this.toCSS(context));\r\n        },\r\n        toCSS: function (context, doNotCompress) {\r\n            var compress = context && context.compress && !doNotCompress;\r\n            var color;\r\n            var alpha;\r\n            var colorFunction;\r\n            var args = [];\r\n            // `value` is set if this color was originally\r\n            // converted from a named color string so we need\r\n            // to respect this and try to output named color too.\r\n            alpha = this.fround(context, this.alpha);\r\n            if (this.value) {\r\n                if (this.value.indexOf('rgb') === 0) {\r\n                    if (alpha < 1) {\r\n                        colorFunction = 'rgba';\r\n                    }\r\n                }\r\n                else if (this.value.indexOf('hsl') === 0) {\r\n                    if (alpha < 1) {\r\n                        colorFunction = 'hsla';\r\n                    }\r\n                    else {\r\n                        colorFunction = 'hsl';\r\n                    }\r\n                }\r\n                else {\r\n                    return this.value;\r\n                }\r\n            }\r\n            else {\r\n                if (alpha < 1) {\r\n                    colorFunction = 'rgba';\r\n                }\r\n            }\r\n            switch (colorFunction) {\r\n                case 'rgba':\r\n                    args = this.rgb.map(function (c) {\r\n                        return clamp(Math.round(c), 255);\r\n                    }).concat(clamp(alpha, 1));\r\n                    break;\r\n                case 'hsla':\r\n                    args.push(clamp(alpha, 1));\r\n                case 'hsl':\r\n                    color = this.toHSL();\r\n                    args = [\r\n                        this.fround(context, color.h),\r\n                        this.fround(context, color.s * 100) + \"%\",\r\n                        this.fround(context, color.l * 100) + \"%\"\r\n                    ].concat(args);\r\n            }\r\n            if (colorFunction) {\r\n                // Values are capped between `0` and `255`, rounded and zero-padded.\r\n                return colorFunction + \"(\" + args.join(\",\" + (compress ? '' : ' ')) + \")\";\r\n            }\r\n            color = this.toRGB();\r\n            if (compress) {\r\n                var splitcolor = color.split('');\r\n                // Convert color to short format\r\n                if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\r\n                    color = \"#\" + splitcolor[1] + splitcolor[3] + splitcolor[5];\r\n                }\r\n            }\r\n            return color;\r\n        },\r\n        //\r\n        // Operations have to be done per-channel, if not,\r\n        // channels will spill onto each other. Once we have\r\n        // our result, in the form of an integer triplet,\r\n        // we create a new Color node to hold the result.\r\n        //\r\n        operate: function (context, op, other) {\r\n            var rgb = new Array(3);\r\n            var alpha = this.alpha * (1 - other.alpha) + other.alpha;\r\n            for (var c = 0; c < 3; c++) {\r\n                rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\r\n            }\r\n            return new Color(rgb, alpha);\r\n        },\r\n        toRGB: function () {\r\n            return toHex(this.rgb);\r\n        },\r\n        toHSL: function () {\r\n            var r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255, a = this.alpha;\r\n            var max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n            var h;\r\n            var s;\r\n            var l = (max + min) / 2;\r\n            var d = max - min;\r\n            if (max === min) {\r\n                h = s = 0;\r\n            }\r\n            else {\r\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n                switch (max) {\r\n                    case r:\r\n                        h = (g - b) / d + (g < b ? 6 : 0);\r\n                        break;\r\n                    case g:\r\n                        h = (b - r) / d + 2;\r\n                        break;\r\n                    case b:\r\n                        h = (r - g) / d + 4;\r\n                        break;\r\n                }\r\n                h /= 6;\r\n            }\r\n            return { h: h * 360, s: s, l: l, a: a };\r\n        },\r\n        // Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\r\n        toHSV: function () {\r\n            var r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255, a = this.alpha;\r\n            var max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n            var h;\r\n            var s;\r\n            var v = max;\r\n            var d = max - min;\r\n            if (max === 0) {\r\n                s = 0;\r\n            }\r\n            else {\r\n                s = d / max;\r\n            }\r\n            if (max === min) {\r\n                h = 0;\r\n            }\r\n            else {\r\n                switch (max) {\r\n                    case r:\r\n                        h = (g - b) / d + (g < b ? 6 : 0);\r\n                        break;\r\n                    case g:\r\n                        h = (b - r) / d + 2;\r\n                        break;\r\n                    case b:\r\n                        h = (r - g) / d + 4;\r\n                        break;\r\n                }\r\n                h /= 6;\r\n            }\r\n            return { h: h * 360, s: s, v: v, a: a };\r\n        },\r\n        toARGB: function () {\r\n            return toHex([this.alpha * 255].concat(this.rgb));\r\n        },\r\n        compare: function (x) {\r\n            return (x.rgb &&\r\n                x.rgb[0] === this.rgb[0] &&\r\n                x.rgb[1] === this.rgb[1] &&\r\n                x.rgb[2] === this.rgb[2] &&\r\n                x.alpha === this.alpha) ? 0 : undefined;\r\n        }\r\n    });\r\n    Color.fromKeyword = function (keyword) {\r\n        var c;\r\n        var key = keyword.toLowerCase();\r\n        if (colors.hasOwnProperty(key)) {\r\n            c = new Color(colors[key].slice(1));\r\n        }\r\n        else if (key === 'transparent') {\r\n            c = new Color([0, 0, 0], 0);\r\n        }\r\n        if (c) {\r\n            c.value = keyword;\r\n            return c;\r\n        }\r\n    };\r\n    function clamp(v, max) {\r\n        return Math.min(Math.max(v, 0), max);\r\n    }\r\n    function toHex(v) {\r\n        return \"#\" + v.map(function (c) {\r\n            c = clamp(Math.round(c), 255);\r\n            return (c < 16 ? '0' : '') + c.toString(16);\r\n        }).join('');\r\n    }\n\n    var Paren = function (node) {\r\n        this.value = node;\r\n    };\r\n    Paren.prototype = Object.assign(new Node(), {\r\n        type: 'Paren',\r\n        genCSS: function (context, output) {\r\n            output.add('(');\r\n            this.value.genCSS(context, output);\r\n            output.add(')');\r\n        },\r\n        eval: function (context) {\r\n            return new Paren(this.value.eval(context));\r\n        }\r\n    });\n\n    var _noSpaceCombinators = {\r\n        '': true,\r\n        ' ': true,\r\n        '|': true\r\n    };\r\n    var Combinator = function (value) {\r\n        if (value === ' ') {\r\n            this.value = ' ';\r\n            this.emptyOrWhitespace = true;\r\n        }\r\n        else {\r\n            this.value = value ? value.trim() : '';\r\n            this.emptyOrWhitespace = this.value === '';\r\n        }\r\n    };\r\n    Combinator.prototype = Object.assign(new Node(), {\r\n        type: 'Combinator',\r\n        genCSS: function (context, output) {\r\n            var spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';\r\n            output.add(spaceOrEmpty + this.value + spaceOrEmpty);\r\n        }\r\n    });\n\n    var Element = function (combinator, value, isVariable, index, currentFileInfo, visibilityInfo) {\r\n        this.combinator = combinator instanceof Combinator ?\r\n            combinator : new Combinator(combinator);\r\n        if (typeof value === 'string') {\r\n            this.value = value.trim();\r\n        }\r\n        else if (value) {\r\n            this.value = value;\r\n        }\r\n        else {\r\n            this.value = '';\r\n        }\r\n        this.isVariable = isVariable;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.setParent(this.combinator, this);\r\n    };\r\n    Element.prototype = Object.assign(new Node(), {\r\n        type: 'Element',\r\n        accept: function (visitor) {\r\n            var value = this.value;\r\n            this.combinator = visitor.visit(this.combinator);\r\n            if (typeof value === 'object') {\r\n                this.value = visitor.visit(value);\r\n            }\r\n        },\r\n        eval: function (context) {\r\n            return new Element(this.combinator, this.value.eval ? this.value.eval(context) : this.value, this.isVariable, this.getIndex(), this.fileInfo(), this.visibilityInfo());\r\n        },\r\n        clone: function () {\r\n            return new Element(this.combinator, this.value, this.isVariable, this.getIndex(), this.fileInfo(), this.visibilityInfo());\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add(this.toCSS(context), this.fileInfo(), this.getIndex());\r\n        },\r\n        toCSS: function (context) {\r\n            context = context || {};\r\n            var value = this.value;\r\n            var firstSelector = context.firstSelector;\r\n            if (value instanceof Paren) {\r\n                // selector in parens should not be affected by outer selector\r\n                // flags (breaks only interpolated selectors - see #1973)\r\n                context.firstSelector = true;\r\n            }\r\n            value = value.toCSS ? value.toCSS(context) : value;\r\n            context.firstSelector = firstSelector;\r\n            if (value === '' && this.combinator.value.charAt(0) === '&') {\r\n                return '';\r\n            }\r\n            else {\r\n                return this.combinator.toCSS(context) + value;\r\n            }\r\n        }\r\n    });\n\n    var Math$1 = {\r\n        ALWAYS: 0,\r\n        PARENS_DIVISION: 1,\r\n        PARENS: 2\r\n        // removed - STRICT_LEGACY: 3\r\n    };\r\n    var RewriteUrls = {\r\n        OFF: 0,\r\n        LOCAL: 1,\r\n        ALL: 2\r\n    };\n\n    /**\r\n     * Returns the object type of the given payload\r\n     *\r\n     * @param {*} payload\r\n     * @returns {string}\r\n     */\r\n    function getType(payload) {\r\n        return Object.prototype.toString.call(payload).slice(8, -1);\r\n    }\r\n    /**\r\n     * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n     *\r\n     * @param {*} payload\r\n     * @returns {payload is Record<string, any>}\r\n     */\r\n    function isPlainObject(payload) {\r\n        if (getType(payload) !== 'Object')\r\n            return false;\r\n        return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\r\n    }\r\n    /**\r\n     * Returns whether the payload is an array\r\n     *\r\n     * @param {any} payload\r\n     * @returns {payload is any[]}\r\n     */\r\n    function isArray(payload) {\r\n        return getType(payload) === 'Array';\r\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    }\n\n    function assignProp(carry, key, newVal, originalObject, includeNonenumerable) {\r\n        var propType = {}.propertyIsEnumerable.call(originalObject, key)\r\n            ? 'enumerable'\r\n            : 'nonenumerable';\r\n        if (propType === 'enumerable')\r\n            carry[key] = newVal;\r\n        if (includeNonenumerable && propType === 'nonenumerable') {\r\n            Object.defineProperty(carry, key, {\r\n                value: newVal,\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Copy (clone) an object and all its props recursively to get rid of any prop referenced of the original object. Arrays are also cloned, however objects inside arrays are still linked.\r\n     *\r\n     * @export\r\n     * @template T\r\n     * @param {T} target Target can be anything\r\n     * @param {Options} [options={}] Options can be `props` or `nonenumerable`\r\n     * @returns {T} the target with replaced values\r\n     * @export\r\n     */\r\n    function copy(target, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (isArray(target))\r\n            return target.map(function (i) { return copy(i, options); });\r\n        if (!isPlainObject(target))\r\n            return target;\r\n        var props = Object.getOwnPropertyNames(target);\r\n        var symbols = Object.getOwnPropertySymbols(target);\r\n        return __spreadArrays(props, symbols).reduce(function (carry, key) {\r\n            if (isArray(options.props) && !options.props.includes(key)) {\r\n                return carry;\r\n            }\r\n            var val = target[key];\r\n            var newVal = copy(val, options);\r\n            assignProp(carry, key, newVal, target, options.nonenumerable);\r\n            return carry;\r\n        }, {});\r\n    }\n\n    /* jshint proto: true */\r\n    function getLocation(index, inputStream) {\r\n        var n = index + 1;\r\n        var line = null;\r\n        var column = -1;\r\n        while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\r\n            column++;\r\n        }\r\n        if (typeof index === 'number') {\r\n            line = (inputStream.slice(0, index).match(/\\n/g) || '').length;\r\n        }\r\n        return {\r\n            line: line,\r\n            column: column\r\n        };\r\n    }\r\n    function copyArray(arr) {\r\n        var i;\r\n        var length = arr.length;\r\n        var copy = new Array(length);\r\n        for (i = 0; i < length; i++) {\r\n            copy[i] = arr[i];\r\n        }\r\n        return copy;\r\n    }\r\n    function clone(obj) {\r\n        var cloned = {};\r\n        for (var prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                cloned[prop] = obj[prop];\r\n            }\r\n        }\r\n        return cloned;\r\n    }\r\n    function defaults(obj1, obj2) {\r\n        var newObj = obj2 || {};\r\n        if (!obj2._defaults) {\r\n            newObj = {};\r\n            var defaults_1 = copy(obj1);\r\n            newObj._defaults = defaults_1;\r\n            var cloned = obj2 ? copy(obj2) : {};\r\n            Object.assign(newObj, defaults_1, cloned);\r\n        }\r\n        return newObj;\r\n    }\r\n    function copyOptions(obj1, obj2) {\r\n        if (obj2 && obj2._defaults) {\r\n            return obj2;\r\n        }\r\n        var opts = defaults(obj1, obj2);\r\n        if (opts.strictMath) {\r\n            opts.math = Math$1.PARENS;\r\n        }\r\n        // Back compat with changed relativeUrls option\r\n        if (opts.relativeUrls) {\r\n            opts.rewriteUrls = RewriteUrls.ALL;\r\n        }\r\n        if (typeof opts.math === 'string') {\r\n            switch (opts.math.toLowerCase()) {\r\n                case 'always':\r\n                    opts.math = Math$1.ALWAYS;\r\n                    break;\r\n                case 'parens-division':\r\n                    opts.math = Math$1.PARENS_DIVISION;\r\n                    break;\r\n                case 'strict':\r\n                case 'parens':\r\n                    opts.math = Math$1.PARENS;\r\n                    break;\r\n                default:\r\n                    opts.math = Math$1.PARENS;\r\n            }\r\n        }\r\n        if (typeof opts.rewriteUrls === 'string') {\r\n            switch (opts.rewriteUrls.toLowerCase()) {\r\n                case 'off':\r\n                    opts.rewriteUrls = RewriteUrls.OFF;\r\n                    break;\r\n                case 'local':\r\n                    opts.rewriteUrls = RewriteUrls.LOCAL;\r\n                    break;\r\n                case 'all':\r\n                    opts.rewriteUrls = RewriteUrls.ALL;\r\n                    break;\r\n            }\r\n        }\r\n        return opts;\r\n    }\r\n    function merge(obj1, obj2) {\r\n        for (var prop in obj2) {\r\n            if (obj2.hasOwnProperty(prop)) {\r\n                obj1[prop] = obj2[prop];\r\n            }\r\n        }\r\n        return obj1;\r\n    }\r\n    function flattenArray(arr, result) {\r\n        if (result === void 0) { result = []; }\r\n        for (var i = 0, length_1 = arr.length; i < length_1; i++) {\r\n            var value = arr[i];\r\n            if (Array.isArray(value)) {\r\n                flattenArray(value, result);\r\n            }\r\n            else {\r\n                if (value !== undefined) {\r\n                    result.push(value);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\n\n    var utils = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLocation: getLocation,\n        copyArray: copyArray,\n        clone: clone,\n        defaults: defaults,\n        copyOptions: copyOptions,\n        merge: merge,\n        flattenArray: flattenArray\n    });\n\n    var anonymousFunc = /(<anonymous>|Function):(\\d+):(\\d+)/;\r\n    /**\r\n     * This is a centralized class of any error that could be thrown internally (mostly by the parser).\r\n     * Besides standard .message it keeps some additional data like a path to the file where the error\r\n     * occurred along with line and column numbers.\r\n     *\r\n     * @class\r\n     * @extends Error\r\n     * @type {module.LessError}\r\n     *\r\n     * @prop {string} type\r\n     * @prop {string} filename\r\n     * @prop {number} index\r\n     * @prop {number} line\r\n     * @prop {number} column\r\n     * @prop {number} callLine\r\n     * @prop {number} callExtract\r\n     * @prop {string[]} extract\r\n     *\r\n     * @param {Object} e              - An error object to wrap around or just a descriptive object\r\n     * @param {Object} fileContentMap - An object with file contents in 'contents' property (like importManager) @todo - move to fileManager?\r\n     * @param {string} [currentFilename]\r\n     */\r\n    var LessError = function (e, fileContentMap, currentFilename) {\r\n        Error.call(this);\r\n        var filename = e.filename || currentFilename;\r\n        this.message = e.message;\r\n        this.stack = e.stack;\r\n        if (fileContentMap && filename) {\r\n            var input = fileContentMap.contents[filename];\r\n            var loc = getLocation(e.index, input);\r\n            var line = loc.line;\r\n            var col = loc.column;\r\n            var callLine = e.call && getLocation(e.call, input).line;\r\n            var lines = input ? input.split('\\n') : '';\r\n            this.type = e.type || 'Syntax';\r\n            this.filename = filename;\r\n            this.index = e.index;\r\n            this.line = typeof line === 'number' ? line + 1 : null;\r\n            this.column = col;\r\n            if (!this.line && this.stack) {\r\n                var found = this.stack.match(anonymousFunc);\r\n                /**\r\n                 * We have to figure out how this environment stringifies anonymous functions\r\n                 * so we can correctly map plugin errors.\r\n                 *\r\n                 * Note, in Node 8, the output of anonymous funcs varied based on parameters\r\n                 * being present or not, so we inject dummy params.\r\n                 */\r\n                var func = new Function('a', 'throw new Error()');\r\n                var lineAdjust = 0;\r\n                try {\r\n                    func();\r\n                }\r\n                catch (e) {\r\n                    var match = e.stack.match(anonymousFunc);\r\n                    var line = parseInt(match[2]);\r\n                    lineAdjust = 1 - line;\r\n                }\r\n                if (found) {\r\n                    if (found[2]) {\r\n                        this.line = parseInt(found[2]) + lineAdjust;\r\n                    }\r\n                    if (found[3]) {\r\n                        this.column = parseInt(found[3]);\r\n                    }\r\n                }\r\n            }\r\n            this.callLine = callLine + 1;\r\n            this.callExtract = lines[callLine];\r\n            this.extract = [\r\n                lines[this.line - 2],\r\n                lines[this.line - 1],\r\n                lines[this.line]\r\n            ];\r\n        }\r\n    };\r\n    if (typeof Object.create === 'undefined') {\r\n        var F = function () { };\r\n        F.prototype = Error.prototype;\r\n        LessError.prototype = new F();\r\n    }\r\n    else {\r\n        LessError.prototype = Object.create(Error.prototype);\r\n    }\r\n    LessError.prototype.constructor = LessError;\r\n    /**\r\n     * An overridden version of the default Object.prototype.toString\r\n     * which uses additional information to create a helpful message.\r\n     *\r\n     * @param {Object} options\r\n     * @returns {string}\r\n     */\r\n    LessError.prototype.toString = function (options) {\r\n        options = options || {};\r\n        var message = '';\r\n        var extract = this.extract || [];\r\n        var error = [];\r\n        var stylize = function (str) { return str; };\r\n        if (options.stylize) {\r\n            var type = typeof options.stylize;\r\n            if (type !== 'function') {\r\n                throw Error(\"options.stylize should be a function, got a \" + type + \"!\");\r\n            }\r\n            stylize = options.stylize;\r\n        }\r\n        if (this.line !== null) {\r\n            if (typeof extract[0] === 'string') {\r\n                error.push(stylize(this.line - 1 + \" \" + extract[0], 'grey'));\r\n            }\r\n            if (typeof extract[1] === 'string') {\r\n                var errorTxt = this.line + \" \";\r\n                if (extract[1]) {\r\n                    errorTxt += extract[1].slice(0, this.column) +\r\n                        stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') +\r\n                            extract[1].slice(this.column + 1), 'red'), 'inverse');\r\n                }\r\n                error.push(errorTxt);\r\n            }\r\n            if (typeof extract[2] === 'string') {\r\n                error.push(stylize(this.line + 1 + \" \" + extract[2], 'grey'));\r\n            }\r\n            error = error.join('\\n') + stylize('', 'reset') + \"\\n\";\r\n        }\r\n        message += stylize(this.type + \"Error: \" + this.message, 'red');\r\n        if (this.filename) {\r\n            message += stylize(' in ', 'red') + this.filename;\r\n        }\r\n        if (this.line) {\r\n            message += stylize(\" on line \" + this.line + \", column \" + (this.column + 1) + \":\", 'grey');\r\n        }\r\n        message += \"\\n\" + error;\r\n        if (this.callLine) {\r\n            message += stylize('from ', 'red') + (this.filename || '') + \"/n\";\r\n            message += stylize(this.callLine, 'grey') + \" \" + this.callExtract + \"/n\";\r\n        }\r\n        return message;\r\n    };\n\n    var Selector = function (elements, extendList, condition, index, currentFileInfo, visibilityInfo) {\r\n        this.extendList = extendList;\r\n        this.condition = condition;\r\n        this.evaldCondition = !condition;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.elements = this.getElements(elements);\r\n        this.mixinElements_ = undefined;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.setParent(this.elements, this);\r\n    };\r\n    Selector.prototype = Object.assign(new Node(), {\r\n        type: 'Selector',\r\n        accept: function (visitor) {\r\n            if (this.elements) {\r\n                this.elements = visitor.visitArray(this.elements);\r\n            }\r\n            if (this.extendList) {\r\n                this.extendList = visitor.visitArray(this.extendList);\r\n            }\r\n            if (this.condition) {\r\n                this.condition = visitor.visit(this.condition);\r\n            }\r\n        },\r\n        createDerived: function (elements, extendList, evaldCondition) {\r\n            elements = this.getElements(elements);\r\n            var newSelector = new Selector(elements, extendList || this.extendList, null, this.getIndex(), this.fileInfo(), this.visibilityInfo());\r\n            newSelector.evaldCondition = (evaldCondition != null) ? evaldCondition : this.evaldCondition;\r\n            newSelector.mediaEmpty = this.mediaEmpty;\r\n            return newSelector;\r\n        },\r\n        getElements: function (els) {\r\n            if (!els) {\r\n                return [new Element('', '&', false, this._index, this._fileInfo)];\r\n            }\r\n            if (typeof els === 'string') {\r\n                this.parse.parseNode(els, ['selector'], this._index, this._fileInfo, function (err, result) {\r\n                    if (err) {\r\n                        throw new LessError({\r\n                            index: err.index,\r\n                            message: err.message\r\n                        }, this.parse.imports, this._fileInfo.filename);\r\n                    }\r\n                    els = result[0].elements;\r\n                });\r\n            }\r\n            return els;\r\n        },\r\n        createEmptySelectors: function () {\r\n            var el = new Element('', '&', false, this._index, this._fileInfo), sels = [new Selector([el], null, null, this._index, this._fileInfo)];\r\n            sels[0].mediaEmpty = true;\r\n            return sels;\r\n        },\r\n        match: function (other) {\r\n            var elements = this.elements;\r\n            var len = elements.length;\r\n            var olen;\r\n            var i;\r\n            other = other.mixinElements();\r\n            olen = other.length;\r\n            if (olen === 0 || len < olen) {\r\n                return 0;\r\n            }\r\n            else {\r\n                for (i = 0; i < olen; i++) {\r\n                    if (elements[i].value !== other[i]) {\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n            return olen; // return number of matched elements\r\n        },\r\n        mixinElements: function () {\r\n            if (this.mixinElements_) {\r\n                return this.mixinElements_;\r\n            }\r\n            var elements = this.elements.map(function (v) {\r\n                return v.combinator.value + (v.value.value || v.value);\r\n            }).join('').match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g);\r\n            if (elements) {\r\n                if (elements[0] === '&') {\r\n                    elements.shift();\r\n                }\r\n            }\r\n            else {\r\n                elements = [];\r\n            }\r\n            return (this.mixinElements_ = elements);\r\n        },\r\n        isJustParentSelector: function () {\r\n            return !this.mediaEmpty &&\r\n                this.elements.length === 1 &&\r\n                this.elements[0].value === '&' &&\r\n                (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');\r\n        },\r\n        eval: function (context) {\r\n            var evaldCondition = this.condition && this.condition.eval(context);\r\n            var elements = this.elements;\r\n            var extendList = this.extendList;\r\n            elements = elements && elements.map(function (e) { return e.eval(context); });\r\n            extendList = extendList && extendList.map(function (extend) { return extend.eval(context); });\r\n            return this.createDerived(elements, extendList, evaldCondition);\r\n        },\r\n        genCSS: function (context, output) {\r\n            var i, element;\r\n            if ((!context || !context.firstSelector) && this.elements[0].combinator.value === '') {\r\n                output.add(' ', this.fileInfo(), this.getIndex());\r\n            }\r\n            for (i = 0; i < this.elements.length; i++) {\r\n                element = this.elements[i];\r\n                element.genCSS(context, output);\r\n            }\r\n        },\r\n        getIsOutput: function () {\r\n            return this.evaldCondition;\r\n        }\r\n    });\n\n    var Value = function (value) {\r\n        if (!value) {\r\n            throw new Error('Value requires an array argument');\r\n        }\r\n        if (!Array.isArray(value)) {\r\n            this.value = [value];\r\n        }\r\n        else {\r\n            this.value = value;\r\n        }\r\n    };\r\n    Value.prototype = Object.assign(new Node(), {\r\n        type: 'Value',\r\n        accept: function (visitor) {\r\n            if (this.value) {\r\n                this.value = visitor.visitArray(this.value);\r\n            }\r\n        },\r\n        eval: function (context) {\r\n            if (this.value.length === 1) {\r\n                return this.value[0].eval(context);\r\n            }\r\n            else {\r\n                return new Value(this.value.map(function (v) {\r\n                    return v.eval(context);\r\n                }));\r\n            }\r\n        },\r\n        genCSS: function (context, output) {\r\n            var i;\r\n            for (i = 0; i < this.value.length; i++) {\r\n                this.value[i].genCSS(context, output);\r\n                if (i + 1 < this.value.length) {\r\n                    output.add((context && context.compress) ? ',' : ', ');\r\n                }\r\n            }\r\n        }\r\n    });\n\n    var Keyword = function (value) {\r\n        this.value = value;\r\n    };\r\n    Keyword.prototype = Object.assign(new Node(), {\r\n        type: 'Keyword',\r\n        genCSS: function (context, output) {\r\n            if (this.value === '%') {\r\n                throw { type: 'Syntax', message: 'Invalid % without number' };\r\n            }\r\n            output.add(this.value);\r\n        }\r\n    });\r\n    Keyword.True = new Keyword('true');\r\n    Keyword.False = new Keyword('false');\n\n    var Anonymous = function (value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\r\n        this.value = value;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.mapLines = mapLines;\r\n        this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;\r\n        this.allowRoot = true;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n    };\r\n    Anonymous.prototype = Object.assign(new Node(), {\r\n        type: 'Anonymous',\r\n        eval: function () {\r\n            return new Anonymous(this.value, this._index, this._fileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\r\n        },\r\n        compare: function (other) {\r\n            return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\r\n        },\r\n        isRulesetLike: function () {\r\n            return this.rulesetLike;\r\n        },\r\n        genCSS: function (context, output) {\r\n            this.nodeVisible = Boolean(this.value);\r\n            if (this.nodeVisible) {\r\n                output.add(this.value, this._fileInfo, this._index, this.mapLines);\r\n            }\r\n        }\r\n    });\n\n    var MATH = Math$1;\r\n    function evalName(context, name) {\r\n        var value = '';\r\n        var i;\r\n        var n = name.length;\r\n        var output = { add: function (s) { value += s; } };\r\n        for (i = 0; i < n; i++) {\r\n            name[i].eval(context).genCSS(context, output);\r\n        }\r\n        return value;\r\n    }\r\n    var Declaration = function (name, value, important, merge, index, currentFileInfo, inline, variable) {\r\n        this.name = name;\r\n        this.value = (value instanceof Node) ? value : new Value([value ? new Anonymous(value) : null]);\r\n        this.important = important ? \" \" + important.trim() : '';\r\n        this.merge = merge;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.inline = inline || false;\r\n        this.variable = (variable !== undefined) ? variable\r\n            : (name.charAt && (name.charAt(0) === '@'));\r\n        this.allowRoot = true;\r\n        this.setParent(this.value, this);\r\n    };\r\n    Declaration.prototype = Object.assign(new Node(), {\r\n        type: 'Declaration',\r\n        genCSS: function (context, output) {\r\n            output.add(this.name + (context.compress ? ':' : ': '), this.fileInfo(), this.getIndex());\r\n            try {\r\n                this.value.genCSS(context, output);\r\n            }\r\n            catch (e) {\r\n                e.index = this._index;\r\n                e.filename = this._fileInfo.filename;\r\n                throw e;\r\n            }\r\n            output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? '' : ';'), this._fileInfo, this._index);\r\n        },\r\n        eval: function (context) {\r\n            var mathBypass = false, prevMath, name = this.name, evaldValue, variable = this.variable;\r\n            if (typeof name !== 'string') {\r\n                // expand 'primitive' name directly to get\r\n                // things faster (~10% for benchmark.less):\r\n                name = (name.length === 1) && (name[0] instanceof Keyword) ?\r\n                    name[0].value : evalName(context, name);\r\n                variable = false; // never treat expanded interpolation as new variable name\r\n            }\r\n            // @todo remove when parens-division is default\r\n            if (name === 'font' && context.math === MATH.ALWAYS) {\r\n                mathBypass = true;\r\n                prevMath = context.math;\r\n                context.math = MATH.PARENS_DIVISION;\r\n            }\r\n            try {\r\n                context.importantScope.push({});\r\n                evaldValue = this.value.eval(context);\r\n                if (!this.variable && evaldValue.type === 'DetachedRuleset') {\r\n                    throw { message: 'Rulesets cannot be evaluated on a property.',\r\n                        index: this.getIndex(), filename: this.fileInfo().filename };\r\n                }\r\n                var important = this.important;\r\n                var importantResult = context.importantScope.pop();\r\n                if (!important && importantResult.important) {\r\n                    important = importantResult.important;\r\n                }\r\n                return new Declaration(name, evaldValue, important, this.merge, this.getIndex(), this.fileInfo(), this.inline, variable);\r\n            }\r\n            catch (e) {\r\n                if (typeof e.index !== 'number') {\r\n                    e.index = this.getIndex();\r\n                    e.filename = this.fileInfo().filename;\r\n                }\r\n                throw e;\r\n            }\r\n            finally {\r\n                if (mathBypass) {\r\n                    context.math = prevMath;\r\n                }\r\n            }\r\n        },\r\n        makeImportant: function () {\r\n            return new Declaration(this.name, this.value, '!important', this.merge, this.getIndex(), this.fileInfo(), this.inline);\r\n        }\r\n    });\n\n    var debugInfo = /** @class */ (function () {\r\n        function debugInfo(context, ctx, lineSeparator) {\r\n            var result = '';\r\n            if (context.dumpLineNumbers && !context.compress) {\r\n                switch (context.dumpLineNumbers) {\r\n                    case 'comments':\r\n                        result = debugInfo.asComment(ctx);\r\n                        break;\r\n                    case 'mediaquery':\r\n                        result = debugInfo.asMediaQuery(ctx);\r\n                        break;\r\n                    case 'all':\r\n                        result = debugInfo.asComment(ctx) + (lineSeparator || '') + debugInfo.asMediaQuery(ctx);\r\n                        break;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        debugInfo.asComment = function (ctx) {\r\n            return \"/* line \" + ctx.debugInfo.lineNumber + \", \" + ctx.debugInfo.fileName + \" */\\n\";\r\n        };\r\n        debugInfo.asMediaQuery = function (ctx) {\r\n            var filenameWithProtocol = ctx.debugInfo.fileName;\r\n            if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\r\n                filenameWithProtocol = \"file://\" + filenameWithProtocol;\r\n            }\r\n            return \"@media -sass-debug-info{filename{font-family:\" + filenameWithProtocol.replace(/([.:\\/\\\\])/g, function (a) {\r\n                if (a == '\\\\') {\r\n                    a = '\\/';\r\n                }\r\n                return \"\\\\\" + a;\r\n            }) + \"}line{font-family:\\\\00003\" + ctx.debugInfo.lineNumber + \"}}\\n\";\r\n        };\r\n        return debugInfo;\r\n    }());\n\n    var Comment = function (value, isLineComment, index, currentFileInfo) {\r\n        this.value = value;\r\n        this.isLineComment = isLineComment;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.allowRoot = true;\r\n    };\r\n    Comment.prototype = Object.assign(new Node(), {\r\n        type: 'Comment',\r\n        genCSS: function (context, output) {\r\n            if (this.debugInfo) {\r\n                output.add(debugInfo(context, this), this.fileInfo(), this.getIndex());\r\n            }\r\n            output.add(this.value);\r\n        },\r\n        isSilent: function (context) {\r\n            var isCompressed = context.compress && this.value[2] !== '!';\r\n            return this.isLineComment || isCompressed;\r\n        }\r\n    });\n\n    var contexts = {};\r\n    var copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\r\n        if (!original) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < propertiesToCopy.length; i++) {\r\n            if (original.hasOwnProperty(propertiesToCopy[i])) {\r\n                destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];\r\n            }\r\n        }\r\n    };\r\n    /*\r\n     parse is used whilst parsing\r\n     */\r\n    var parseCopyProperties = [\r\n        // options\r\n        'paths',\r\n        'rewriteUrls',\r\n        'rootpath',\r\n        'strictImports',\r\n        'insecure',\r\n        'dumpLineNumbers',\r\n        'compress',\r\n        'syncImport',\r\n        'chunkInput',\r\n        'mime',\r\n        'useFileCache',\r\n        // context\r\n        'processImports',\r\n        // Used by the import manager to stop multiple import visitors being created.\r\n        'pluginManager' // Used as the plugin manager for the session\r\n    ];\r\n    contexts.Parse = function (options) {\r\n        copyFromOriginal(options, this, parseCopyProperties);\r\n        if (typeof this.paths === 'string') {\r\n            this.paths = [this.paths];\r\n        }\r\n    };\r\n    var evalCopyProperties = [\r\n        'paths',\r\n        'compress',\r\n        'math',\r\n        'strictUnits',\r\n        'sourceMap',\r\n        'importMultiple',\r\n        'urlArgs',\r\n        'javascriptEnabled',\r\n        'pluginManager',\r\n        'importantScope',\r\n        'rewriteUrls' // option - whether to adjust URL's to be relative\r\n    ];\r\n    contexts.Eval = function (options, frames) {\r\n        copyFromOriginal(options, this, evalCopyProperties);\r\n        if (typeof this.paths === 'string') {\r\n            this.paths = [this.paths];\r\n        }\r\n        this.frames = frames || [];\r\n        this.importantScope = this.importantScope || [];\r\n    };\r\n    contexts.Eval.prototype.enterCalc = function () {\r\n        if (!this.calcStack) {\r\n            this.calcStack = [];\r\n        }\r\n        this.calcStack.push(true);\r\n        this.inCalc = true;\r\n    };\r\n    contexts.Eval.prototype.exitCalc = function () {\r\n        this.calcStack.pop();\r\n        if (!this.calcStack.length) {\r\n            this.inCalc = false;\r\n        }\r\n    };\r\n    contexts.Eval.prototype.inParenthesis = function () {\r\n        if (!this.parensStack) {\r\n            this.parensStack = [];\r\n        }\r\n        this.parensStack.push(true);\r\n    };\r\n    contexts.Eval.prototype.outOfParenthesis = function () {\r\n        this.parensStack.pop();\r\n    };\r\n    contexts.Eval.prototype.inCalc = false;\r\n    contexts.Eval.prototype.mathOn = true;\r\n    contexts.Eval.prototype.isMathOn = function (op) {\r\n        if (!this.mathOn) {\r\n            return false;\r\n        }\r\n        if (op === '/' && this.math !== Math$1.ALWAYS && (!this.parensStack || !this.parensStack.length)) {\r\n            return false;\r\n        }\r\n        if (this.math > Math$1.PARENS_DIVISION) {\r\n            return this.parensStack && this.parensStack.length;\r\n        }\r\n        return true;\r\n    };\r\n    contexts.Eval.prototype.pathRequiresRewrite = function (path) {\r\n        var isRelative = this.rewriteUrls === RewriteUrls.LOCAL ? isPathLocalRelative : isPathRelative;\r\n        return isRelative(path);\r\n    };\r\n    contexts.Eval.prototype.rewritePath = function (path, rootpath) {\r\n        var newPath;\r\n        rootpath = rootpath || '';\r\n        newPath = this.normalizePath(rootpath + path);\r\n        // If a path was explicit relative and the rootpath was not an absolute path\r\n        // we must ensure that the new path is also explicit relative.\r\n        if (isPathLocalRelative(path) &&\r\n            isPathRelative(rootpath) &&\r\n            isPathLocalRelative(newPath) === false) {\r\n            newPath = \"./\" + newPath;\r\n        }\r\n        return newPath;\r\n    };\r\n    contexts.Eval.prototype.normalizePath = function (path) {\r\n        var segments = path.split('/').reverse();\r\n        var segment;\r\n        path = [];\r\n        while (segments.length !== 0) {\r\n            segment = segments.pop();\r\n            switch (segment) {\r\n                case '.':\r\n                    break;\r\n                case '..':\r\n                    if ((path.length === 0) || (path[path.length - 1] === '..')) {\r\n                        path.push(segment);\r\n                    }\r\n                    else {\r\n                        path.pop();\r\n                    }\r\n                    break;\r\n                default:\r\n                    path.push(segment);\r\n                    break;\r\n            }\r\n        }\r\n        return path.join('/');\r\n    };\r\n    function isPathRelative(path) {\r\n        return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\r\n    }\r\n    function isPathLocalRelative(path) {\r\n        return path.charAt(0) === '.';\r\n    }\r\n    // todo - do the same for the toCSS ?\n\n    function makeRegistry(base) {\r\n        return {\r\n            _data: {},\r\n            add: function (name, func) {\r\n                // precautionary case conversion, as later querying of\r\n                // the registry by function-caller uses lower case as well.\r\n                name = name.toLowerCase();\r\n                if (this._data.hasOwnProperty(name)) ;\r\n                this._data[name] = func;\r\n            },\r\n            addMultiple: function (functions) {\r\n                var _this = this;\r\n                Object.keys(functions).forEach(function (name) {\r\n                    _this.add(name, functions[name]);\r\n                });\r\n            },\r\n            get: function (name) {\r\n                return this._data[name] || (base && base.get(name));\r\n            },\r\n            getLocalFunctions: function () {\r\n                return this._data;\r\n            },\r\n            inherit: function () {\r\n                return makeRegistry(this);\r\n            },\r\n            create: function (base) {\r\n                return makeRegistry(base);\r\n            }\r\n        };\r\n    }\r\n    var functionRegistry = makeRegistry(null);\n\n    var defaultFunc = {\r\n        eval: function () {\r\n            var v = this.value_;\r\n            var e = this.error_;\r\n            if (e) {\r\n                throw e;\r\n            }\r\n            if (v != null) {\r\n                return v ? Keyword.True : Keyword.False;\r\n            }\r\n        },\r\n        value: function (v) {\r\n            this.value_ = v;\r\n        },\r\n        error: function (e) {\r\n            this.error_ = e;\r\n        },\r\n        reset: function () {\r\n            this.value_ = this.error_ = null;\r\n        }\r\n    };\n\n    var Ruleset = function (selectors, rules, strictImports, visibilityInfo) {\r\n        this.selectors = selectors;\r\n        this.rules = rules;\r\n        this._lookups = {};\r\n        this._variables = null;\r\n        this._properties = null;\r\n        this.strictImports = strictImports;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.allowRoot = true;\r\n        this.setParent(this.selectors, this);\r\n        this.setParent(this.rules, this);\r\n    };\r\n    Ruleset.prototype = Object.assign(new Node(), {\r\n        type: 'Ruleset',\r\n        isRuleset: true,\r\n        isRulesetLike: function () { return true; },\r\n        accept: function (visitor) {\r\n            if (this.paths) {\r\n                this.paths = visitor.visitArray(this.paths, true);\r\n            }\r\n            else if (this.selectors) {\r\n                this.selectors = visitor.visitArray(this.selectors);\r\n            }\r\n            if (this.rules && this.rules.length) {\r\n                this.rules = visitor.visitArray(this.rules);\r\n            }\r\n        },\r\n        eval: function (context) {\r\n            var selectors;\r\n            var selCnt;\r\n            var selector;\r\n            var i;\r\n            var hasVariable;\r\n            var hasOnePassingSelector = false;\r\n            if (this.selectors && (selCnt = this.selectors.length)) {\r\n                selectors = new Array(selCnt);\r\n                defaultFunc.error({\r\n                    type: 'Syntax',\r\n                    message: 'it is currently only allowed in parametric mixin guards,'\r\n                });\r\n                for (i = 0; i < selCnt; i++) {\r\n                    selector = this.selectors[i].eval(context);\r\n                    for (var j = 0; j < selector.elements.length; j++) {\r\n                        if (selector.elements[j].isVariable) {\r\n                            hasVariable = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    selectors[i] = selector;\r\n                    if (selector.evaldCondition) {\r\n                        hasOnePassingSelector = true;\r\n                    }\r\n                }\r\n                if (hasVariable) {\r\n                    var toParseSelectors = new Array(selCnt);\r\n                    for (i = 0; i < selCnt; i++) {\r\n                        selector = selectors[i];\r\n                        toParseSelectors[i] = selector.toCSS(context);\r\n                    }\r\n                    this.parse.parseNode(toParseSelectors.join(','), [\"selectors\"], selectors[0].getIndex(), selectors[0].fileInfo(), function (err, result) {\r\n                        if (result) {\r\n                            selectors = flattenArray(result);\r\n                        }\r\n                    });\r\n                }\r\n                defaultFunc.reset();\r\n            }\r\n            else {\r\n                hasOnePassingSelector = true;\r\n            }\r\n            var rules = this.rules ? copyArray(this.rules) : null;\r\n            var ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo());\r\n            var rule;\r\n            var subRule;\r\n            ruleset.originalRuleset = this;\r\n            ruleset.root = this.root;\r\n            ruleset.firstRoot = this.firstRoot;\r\n            ruleset.allowImports = this.allowImports;\r\n            if (this.debugInfo) {\r\n                ruleset.debugInfo = this.debugInfo;\r\n            }\r\n            if (!hasOnePassingSelector) {\r\n                rules.length = 0;\r\n            }\r\n            // inherit a function registry from the frames stack when possible;\r\n            // otherwise from the global registry\r\n            ruleset.functionRegistry = (function (frames) {\r\n                var i = 0;\r\n                var n = frames.length;\r\n                var found;\r\n                for (; i !== n; ++i) {\r\n                    found = frames[i].functionRegistry;\r\n                    if (found) {\r\n                        return found;\r\n                    }\r\n                }\r\n                return functionRegistry;\r\n            }(context.frames)).inherit();\r\n            // push the current ruleset to the frames stack\r\n            var ctxFrames = context.frames;\r\n            ctxFrames.unshift(ruleset);\r\n            // currrent selectors\r\n            var ctxSelectors = context.selectors;\r\n            if (!ctxSelectors) {\r\n                context.selectors = ctxSelectors = [];\r\n            }\r\n            ctxSelectors.unshift(this.selectors);\r\n            // Evaluate imports\r\n            if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\r\n                ruleset.evalImports(context);\r\n            }\r\n            // Store the frames around mixin definitions,\r\n            // so they can be evaluated like closures when the time comes.\r\n            var rsRules = ruleset.rules;\r\n            for (i = 0; (rule = rsRules[i]); i++) {\r\n                if (rule.evalFirst) {\r\n                    rsRules[i] = rule.eval(context);\r\n                }\r\n            }\r\n            var mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;\r\n            // Evaluate mixin calls.\r\n            for (i = 0; (rule = rsRules[i]); i++) {\r\n                if (rule.type === 'MixinCall') {\r\n                    /* jshint loopfunc:true */\r\n                    rules = rule.eval(context).filter(function (r) {\r\n                        if ((r instanceof Declaration) && r.variable) {\r\n                            // do not pollute the scope if the variable is\r\n                            // already there. consider returning false here\r\n                            // but we need a way to \"return\" variable from mixins\r\n                            return !(ruleset.variable(r.name));\r\n                        }\r\n                        return true;\r\n                    });\r\n                    rsRules.splice.apply(rsRules, [i, 1].concat(rules));\r\n                    i += rules.length - 1;\r\n                    ruleset.resetCache();\r\n                }\r\n                else if (rule.type === 'VariableCall') {\r\n                    /* jshint loopfunc:true */\r\n                    rules = rule.eval(context).rules.filter(function (r) {\r\n                        if ((r instanceof Declaration) && r.variable) {\r\n                            // do not pollute the scope at all\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    rsRules.splice.apply(rsRules, [i, 1].concat(rules));\r\n                    i += rules.length - 1;\r\n                    ruleset.resetCache();\r\n                }\r\n            }\r\n            // Evaluate everything else\r\n            for (i = 0; (rule = rsRules[i]); i++) {\r\n                if (!rule.evalFirst) {\r\n                    rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\r\n                }\r\n            }\r\n            // Evaluate everything else\r\n            for (i = 0; (rule = rsRules[i]); i++) {\r\n                // for rulesets, check if it is a css guard and can be removed\r\n                if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\r\n                    // check if it can be folded in (e.g. & where)\r\n                    if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\r\n                        rsRules.splice(i--, 1);\r\n                        for (var j = 0; (subRule = rule.rules[j]); j++) {\r\n                            if (subRule instanceof Node) {\r\n                                subRule.copyVisibilityInfo(rule.visibilityInfo());\r\n                                if (!(subRule instanceof Declaration) || !subRule.variable) {\r\n                                    rsRules.splice(++i, 0, subRule);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Pop the stack\r\n            ctxFrames.shift();\r\n            ctxSelectors.shift();\r\n            if (context.mediaBlocks) {\r\n                for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\r\n                    context.mediaBlocks[i].bubbleSelectors(selectors);\r\n                }\r\n            }\r\n            return ruleset;\r\n        },\r\n        evalImports: function (context) {\r\n            var rules = this.rules;\r\n            var i;\r\n            var importRules;\r\n            if (!rules) {\r\n                return;\r\n            }\r\n            for (i = 0; i < rules.length; i++) {\r\n                if (rules[i].type === 'Import') {\r\n                    importRules = rules[i].eval(context);\r\n                    if (importRules && (importRules.length || importRules.length === 0)) {\r\n                        rules.splice.apply(rules, [i, 1].concat(importRules));\r\n                        i += importRules.length - 1;\r\n                    }\r\n                    else {\r\n                        rules.splice(i, 1, importRules);\r\n                    }\r\n                    this.resetCache();\r\n                }\r\n            }\r\n        },\r\n        makeImportant: function () {\r\n            var result = new Ruleset(this.selectors, this.rules.map(function (r) {\r\n                if (r.makeImportant) {\r\n                    return r.makeImportant();\r\n                }\r\n                else {\r\n                    return r;\r\n                }\r\n            }), this.strictImports, this.visibilityInfo());\r\n            return result;\r\n        },\r\n        matchArgs: function (args) {\r\n            return !args || args.length === 0;\r\n        },\r\n        // lets you call a css selector with a guard\r\n        matchCondition: function (args, context) {\r\n            var lastSelector = this.selectors[this.selectors.length - 1];\r\n            if (!lastSelector.evaldCondition) {\r\n                return false;\r\n            }\r\n            if (lastSelector.condition &&\r\n                !lastSelector.condition.eval(new contexts.Eval(context, context.frames))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        resetCache: function () {\r\n            this._rulesets = null;\r\n            this._variables = null;\r\n            this._properties = null;\r\n            this._lookups = {};\r\n        },\r\n        variables: function () {\r\n            if (!this._variables) {\r\n                this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {\r\n                    if (r instanceof Declaration && r.variable === true) {\r\n                        hash[r.name] = r;\r\n                    }\r\n                    // when evaluating variables in an import statement, imports have not been eval'd\r\n                    // so we need to go inside import statements.\r\n                    // guard against root being a string (in the case of inlined less)\r\n                    if (r.type === 'Import' && r.root && r.root.variables) {\r\n                        var vars = r.root.variables();\r\n                        for (var name_1 in vars) {\r\n                            if (vars.hasOwnProperty(name_1)) {\r\n                                hash[name_1] = r.root.variable(name_1);\r\n                            }\r\n                        }\r\n                    }\r\n                    return hash;\r\n                }, {});\r\n            }\r\n            return this._variables;\r\n        },\r\n        properties: function () {\r\n            if (!this._properties) {\r\n                this._properties = !this.rules ? {} : this.rules.reduce(function (hash, r) {\r\n                    if (r instanceof Declaration && r.variable !== true) {\r\n                        var name_2 = (r.name.length === 1) && (r.name[0] instanceof Keyword) ?\r\n                            r.name[0].value : r.name;\r\n                        // Properties don't overwrite as they can merge\r\n                        if (!hash[\"$\" + name_2]) {\r\n                            hash[\"$\" + name_2] = [r];\r\n                        }\r\n                        else {\r\n                            hash[\"$\" + name_2].push(r);\r\n                        }\r\n                    }\r\n                    return hash;\r\n                }, {});\r\n            }\r\n            return this._properties;\r\n        },\r\n        variable: function (name) {\r\n            var decl = this.variables()[name];\r\n            if (decl) {\r\n                return this.parseValue(decl);\r\n            }\r\n        },\r\n        property: function (name) {\r\n            var decl = this.properties()[name];\r\n            if (decl) {\r\n                return this.parseValue(decl);\r\n            }\r\n        },\r\n        lastDeclaration: function () {\r\n            for (var i = this.rules.length; i > 0; i--) {\r\n                var decl = this.rules[i - 1];\r\n                if (decl instanceof Declaration) {\r\n                    return this.parseValue(decl);\r\n                }\r\n            }\r\n        },\r\n        parseValue: function (toParse) {\r\n            var self = this;\r\n            function transformDeclaration(decl) {\r\n                if (decl.value instanceof Anonymous && !decl.parsed) {\r\n                    if (typeof decl.value.value === 'string') {\r\n                        this.parse.parseNode(decl.value.value, ['value', 'important'], decl.value.getIndex(), decl.fileInfo(), function (err, result) {\r\n                            if (err) {\r\n                                decl.parsed = true;\r\n                            }\r\n                            if (result) {\r\n                                decl.value = result[0];\r\n                                decl.important = result[1] || '';\r\n                                decl.parsed = true;\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        decl.parsed = true;\r\n                    }\r\n                    return decl;\r\n                }\r\n                else {\r\n                    return decl;\r\n                }\r\n            }\r\n            if (!Array.isArray(toParse)) {\r\n                return transformDeclaration.call(self, toParse);\r\n            }\r\n            else {\r\n                var nodes_1 = [];\r\n                toParse.forEach(function (n) {\r\n                    nodes_1.push(transformDeclaration.call(self, n));\r\n                });\r\n                return nodes_1;\r\n            }\r\n        },\r\n        rulesets: function () {\r\n            if (!this.rules) {\r\n                return [];\r\n            }\r\n            var filtRules = [];\r\n            var rules = this.rules;\r\n            var i;\r\n            var rule;\r\n            for (i = 0; (rule = rules[i]); i++) {\r\n                if (rule.isRuleset) {\r\n                    filtRules.push(rule);\r\n                }\r\n            }\r\n            return filtRules;\r\n        },\r\n        prependRule: function (rule) {\r\n            var rules = this.rules;\r\n            if (rules) {\r\n                rules.unshift(rule);\r\n            }\r\n            else {\r\n                this.rules = [rule];\r\n            }\r\n            this.setParent(rule, this);\r\n        },\r\n        find: function (selector, self, filter) {\r\n            self = self || this;\r\n            var rules = [];\r\n            var match;\r\n            var foundMixins;\r\n            var key = selector.toCSS();\r\n            if (key in this._lookups) {\r\n                return this._lookups[key];\r\n            }\r\n            this.rulesets().forEach(function (rule) {\r\n                if (rule !== self) {\r\n                    for (var j = 0; j < rule.selectors.length; j++) {\r\n                        match = selector.match(rule.selectors[j]);\r\n                        if (match) {\r\n                            if (selector.elements.length > match) {\r\n                                if (!filter || filter(rule)) {\r\n                                    foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\r\n                                    for (var i = 0; i < foundMixins.length; ++i) {\r\n                                        foundMixins[i].path.push(rule);\r\n                                    }\r\n                                    Array.prototype.push.apply(rules, foundMixins);\r\n                                }\r\n                            }\r\n                            else {\r\n                                rules.push({ rule: rule, path: [] });\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            this._lookups[key] = rules;\r\n            return rules;\r\n        },\r\n        genCSS: function (context, output) {\r\n            var i;\r\n            var j;\r\n            var charsetRuleNodes = [];\r\n            var ruleNodes = [];\r\n            var // Line number debugging\r\n            debugInfo$1;\r\n            var rule;\r\n            var path;\r\n            context.tabLevel = (context.tabLevel || 0);\r\n            if (!this.root) {\r\n                context.tabLevel++;\r\n            }\r\n            var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  ');\r\n            var tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  ');\r\n            var sep;\r\n            var charsetNodeIndex = 0;\r\n            var importNodeIndex = 0;\r\n            for (i = 0; (rule = this.rules[i]); i++) {\r\n                if (rule instanceof Comment) {\r\n                    if (importNodeIndex === i) {\r\n                        importNodeIndex++;\r\n                    }\r\n                    ruleNodes.push(rule);\r\n                }\r\n                else if (rule.isCharset && rule.isCharset()) {\r\n                    ruleNodes.splice(charsetNodeIndex, 0, rule);\r\n                    charsetNodeIndex++;\r\n                    importNodeIndex++;\r\n                }\r\n                else if (rule.type === 'Import') {\r\n                    ruleNodes.splice(importNodeIndex, 0, rule);\r\n                    importNodeIndex++;\r\n                }\r\n                else {\r\n                    ruleNodes.push(rule);\r\n                }\r\n            }\r\n            ruleNodes = charsetRuleNodes.concat(ruleNodes);\r\n            // If this is the root node, we don't render\r\n            // a selector, or {}.\r\n            if (!this.root) {\r\n                debugInfo$1 = debugInfo(context, this, tabSetStr);\r\n                if (debugInfo$1) {\r\n                    output.add(debugInfo$1);\r\n                    output.add(tabSetStr);\r\n                }\r\n                var paths = this.paths;\r\n                var pathCnt = paths.length;\r\n                var pathSubCnt = void 0;\r\n                sep = context.compress ? ',' : (\",\\n\" + tabSetStr);\r\n                for (i = 0; i < pathCnt; i++) {\r\n                    path = paths[i];\r\n                    if (!(pathSubCnt = path.length)) {\r\n                        continue;\r\n                    }\r\n                    if (i > 0) {\r\n                        output.add(sep);\r\n                    }\r\n                    context.firstSelector = true;\r\n                    path[0].genCSS(context, output);\r\n                    context.firstSelector = false;\r\n                    for (j = 1; j < pathSubCnt; j++) {\r\n                        path[j].genCSS(context, output);\r\n                    }\r\n                }\r\n                output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\r\n            }\r\n            // Compile rules and rulesets\r\n            for (i = 0; (rule = ruleNodes[i]); i++) {\r\n                if (i + 1 === ruleNodes.length) {\r\n                    context.lastRule = true;\r\n                }\r\n                var currentLastRule = context.lastRule;\r\n                if (rule.isRulesetLike(rule)) {\r\n                    context.lastRule = false;\r\n                }\r\n                if (rule.genCSS) {\r\n                    rule.genCSS(context, output);\r\n                }\r\n                else if (rule.value) {\r\n                    output.add(rule.value.toString());\r\n                }\r\n                context.lastRule = currentLastRule;\r\n                if (!context.lastRule && rule.isVisible()) {\r\n                    output.add(context.compress ? '' : (\"\\n\" + tabRuleStr));\r\n                }\r\n                else {\r\n                    context.lastRule = false;\r\n                }\r\n            }\r\n            if (!this.root) {\r\n                output.add((context.compress ? '}' : \"\\n\" + tabSetStr + \"}\"));\r\n                context.tabLevel--;\r\n            }\r\n            if (!output.isEmpty() && !context.compress && this.firstRoot) {\r\n                output.add('\\n');\r\n            }\r\n        },\r\n        joinSelectors: function (paths, context, selectors) {\r\n            for (var s = 0; s < selectors.length; s++) {\r\n                this.joinSelector(paths, context, selectors[s]);\r\n            }\r\n        },\r\n        joinSelector: function (paths, context, selector) {\r\n            function createParenthesis(elementsToPak, originalElement) {\r\n                var replacementParen, j;\r\n                if (elementsToPak.length === 0) {\r\n                    replacementParen = new Paren(elementsToPak[0]);\r\n                }\r\n                else {\r\n                    var insideParent = new Array(elementsToPak.length);\r\n                    for (j = 0; j < elementsToPak.length; j++) {\r\n                        insideParent[j] = new Element(null, elementsToPak[j], originalElement.isVariable, originalElement._index, originalElement._fileInfo);\r\n                    }\r\n                    replacementParen = new Paren(new Selector(insideParent));\r\n                }\r\n                return replacementParen;\r\n            }\r\n            function createSelector(containedElement, originalElement) {\r\n                var element, selector;\r\n                element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\r\n                selector = new Selector([element]);\r\n                return selector;\r\n            }\r\n            // joins selector path from `beginningPath` with selector path in `addPath`\r\n            // `replacedElement` contains element that is being replaced by `addPath`\r\n            // returns concatenated path\r\n            function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\r\n                var newSelectorPath, lastSelector, newJoinedSelector;\r\n                // our new selector path\r\n                newSelectorPath = [];\r\n                // construct the joined selector - if & is the first thing this will be empty,\r\n                // if not newJoinedSelector will be the last set of elements in the selector\r\n                if (beginningPath.length > 0) {\r\n                    newSelectorPath = copyArray(beginningPath);\r\n                    lastSelector = newSelectorPath.pop();\r\n                    newJoinedSelector = originalSelector.createDerived(copyArray(lastSelector.elements));\r\n                }\r\n                else {\r\n                    newJoinedSelector = originalSelector.createDerived([]);\r\n                }\r\n                if (addPath.length > 0) {\r\n                    // /deep/ is a CSS4 selector - (removed, so should deprecate)\r\n                    // that is valid without anything in front of it\r\n                    // so if the & does not have a combinator that is \"\" or \" \" then\r\n                    // and there is a combinator on the parent, then grab that.\r\n                    // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\r\n                    var combinator = replacedElement.combinator;\r\n                    var parentEl = addPath[0].elements[0];\r\n                    if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\r\n                        combinator = parentEl.combinator;\r\n                    }\r\n                    // join the elements so far with the first part of the parent\r\n                    newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.isVariable, replacedElement._index, replacedElement._fileInfo));\r\n                    newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\r\n                }\r\n                // now add the joined selector - but only if it is not empty\r\n                if (newJoinedSelector.elements.length !== 0) {\r\n                    newSelectorPath.push(newJoinedSelector);\r\n                }\r\n                // put together the parent selectors after the join (e.g. the rest of the parent)\r\n                if (addPath.length > 1) {\r\n                    var restOfPath = addPath.slice(1);\r\n                    restOfPath = restOfPath.map(function (selector) {\r\n                        return selector.createDerived(selector.elements, []);\r\n                    });\r\n                    newSelectorPath = newSelectorPath.concat(restOfPath);\r\n                }\r\n                return newSelectorPath;\r\n            }\r\n            // joins selector path from `beginningPath` with every selector path in `addPaths` array\r\n            // `replacedElement` contains element that is being replaced by `addPath`\r\n            // returns array with all concatenated paths\r\n            function addAllReplacementsIntoPath(beginningPath, addPaths, replacedElement, originalSelector, result) {\r\n                var j;\r\n                for (j = 0; j < beginningPath.length; j++) {\r\n                    var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\r\n                    result.push(newSelectorPath);\r\n                }\r\n                return result;\r\n            }\r\n            function mergeElementsOnToSelectors(elements, selectors) {\r\n                var i, sel;\r\n                if (elements.length === 0) {\r\n                    return;\r\n                }\r\n                if (selectors.length === 0) {\r\n                    selectors.push([new Selector(elements)]);\r\n                    return;\r\n                }\r\n                for (i = 0; (sel = selectors[i]); i++) {\r\n                    // if the previous thing in sel is a parent this needs to join on to it\r\n                    if (sel.length > 0) {\r\n                        sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\r\n                    }\r\n                    else {\r\n                        sel.push(new Selector(elements));\r\n                    }\r\n                }\r\n            }\r\n            // replace all parent selectors inside `inSelector` by content of `context` array\r\n            // resulting selectors are returned inside `paths` array\r\n            // returns true if `inSelector` contained at least one parent selector\r\n            function replaceParentSelector(paths, context, inSelector) {\r\n                // The paths are [[Selector]]\r\n                // The first list is a list of comma separated selectors\r\n                // The inner list is a list of inheritance separated selectors\r\n                // e.g.\r\n                // .a, .b {\r\n                //   .c {\r\n                //   }\r\n                // }\r\n                // == [[.a] [.c]] [[.b] [.c]]\r\n                //\r\n                var i, j, k, currentElements, newSelectors, selectorsMultiplied, sel, el, hadParentSelector = false, length, lastSelector;\r\n                function findNestedSelector(element) {\r\n                    var maybeSelector;\r\n                    if (!(element.value instanceof Paren)) {\r\n                        return null;\r\n                    }\r\n                    maybeSelector = element.value.value;\r\n                    if (!(maybeSelector instanceof Selector)) {\r\n                        return null;\r\n                    }\r\n                    return maybeSelector;\r\n                }\r\n                // the elements from the current selector so far\r\n                currentElements = [];\r\n                // the current list of new selectors to add to the path.\r\n                // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\r\n                // by the parents\r\n                newSelectors = [\r\n                    []\r\n                ];\r\n                for (i = 0; (el = inSelector.elements[i]); i++) {\r\n                    // non parent reference elements just get added\r\n                    if (el.value !== '&') {\r\n                        var nestedSelector = findNestedSelector(el);\r\n                        if (nestedSelector != null) {\r\n                            // merge the current list of non parent selector elements\r\n                            // on to the current list of selectors to add\r\n                            mergeElementsOnToSelectors(currentElements, newSelectors);\r\n                            var nestedPaths = [];\r\n                            var replaced = void 0;\r\n                            var replacedNewSelectors = [];\r\n                            replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\r\n                            hadParentSelector = hadParentSelector || replaced;\r\n                            // the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\r\n                            for (k = 0; k < nestedPaths.length; k++) {\r\n                                var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\r\n                                addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\r\n                            }\r\n                            newSelectors = replacedNewSelectors;\r\n                            currentElements = [];\r\n                        }\r\n                        else {\r\n                            currentElements.push(el);\r\n                        }\r\n                    }\r\n                    else {\r\n                        hadParentSelector = true;\r\n                        // the new list of selectors to add\r\n                        selectorsMultiplied = [];\r\n                        // merge the current list of non parent selector elements\r\n                        // on to the current list of selectors to add\r\n                        mergeElementsOnToSelectors(currentElements, newSelectors);\r\n                        // loop through our current selectors\r\n                        for (j = 0; j < newSelectors.length; j++) {\r\n                            sel = newSelectors[j];\r\n                            // if we don't have any parent paths, the & might be in a mixin so that it can be used\r\n                            // whether there are parents or not\r\n                            if (context.length === 0) {\r\n                                // the combinator used on el should now be applied to the next element instead so that\r\n                                // it is not lost\r\n                                if (sel.length > 0) {\r\n                                    sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\r\n                                }\r\n                                selectorsMultiplied.push(sel);\r\n                            }\r\n                            else {\r\n                                // and the parent selectors\r\n                                for (k = 0; k < context.length; k++) {\r\n                                    // We need to put the current selectors\r\n                                    // then join the last selector's elements on to the parents selectors\r\n                                    var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\r\n                                    // add that to our new set of selectors\r\n                                    selectorsMultiplied.push(newSelectorPath);\r\n                                }\r\n                            }\r\n                        }\r\n                        // our new selectors has been multiplied, so reset the state\r\n                        newSelectors = selectorsMultiplied;\r\n                        currentElements = [];\r\n                    }\r\n                }\r\n                // if we have any elements left over (e.g. .a& .b == .b)\r\n                // add them on to all the current selectors\r\n                mergeElementsOnToSelectors(currentElements, newSelectors);\r\n                for (i = 0; i < newSelectors.length; i++) {\r\n                    length = newSelectors[i].length;\r\n                    if (length > 0) {\r\n                        paths.push(newSelectors[i]);\r\n                        lastSelector = newSelectors[i][length - 1];\r\n                        newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\r\n                    }\r\n                }\r\n                return hadParentSelector;\r\n            }\r\n            function deriveSelector(visibilityInfo, deriveFrom) {\r\n                var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\r\n                newSelector.copyVisibilityInfo(visibilityInfo);\r\n                return newSelector;\r\n            }\r\n            // joinSelector code follows\r\n            var i, newPaths, hadParentSelector;\r\n            newPaths = [];\r\n            hadParentSelector = replaceParentSelector(newPaths, context, selector);\r\n            if (!hadParentSelector) {\r\n                if (context.length > 0) {\r\n                    newPaths = [];\r\n                    for (i = 0; i < context.length; i++) {\r\n                        var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\r\n                        concatenated.push(selector);\r\n                        newPaths.push(concatenated);\r\n                    }\r\n                }\r\n                else {\r\n                    newPaths = [[selector]];\r\n                }\r\n            }\r\n            for (i = 0; i < newPaths.length; i++) {\r\n                paths.push(newPaths[i]);\r\n            }\r\n        }\r\n    });\n\n    var AtRule = function (name, value, rules, index, currentFileInfo, debugInfo, isRooted, visibilityInfo) {\r\n        var i;\r\n        this.name = name;\r\n        this.value = (value instanceof Node) ? value : (value ? new Anonymous(value) : value);\r\n        if (rules) {\r\n            if (Array.isArray(rules)) {\r\n                this.rules = rules;\r\n            }\r\n            else {\r\n                this.rules = [rules];\r\n                this.rules[0].selectors = (new Selector([], null, null, index, currentFileInfo)).createEmptySelectors();\r\n            }\r\n            for (i = 0; i < this.rules.length; i++) {\r\n                this.rules[i].allowImports = true;\r\n            }\r\n            this.setParent(this.rules, this);\r\n        }\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.debugInfo = debugInfo;\r\n        this.isRooted = isRooted || false;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.allowRoot = true;\r\n    };\r\n    AtRule.prototype = Object.assign(new Node(), {\r\n        type: 'AtRule',\r\n        accept: function (visitor) {\r\n            var value = this.value, rules = this.rules;\r\n            if (rules) {\r\n                this.rules = visitor.visitArray(rules);\r\n            }\r\n            if (value) {\r\n                this.value = visitor.visit(value);\r\n            }\r\n        },\r\n        isRulesetLike: function () {\r\n            return this.rules || !this.isCharset();\r\n        },\r\n        isCharset: function () {\r\n            return '@charset' === this.name;\r\n        },\r\n        genCSS: function (context, output) {\r\n            var value = this.value, rules = this.rules;\r\n            output.add(this.name, this.fileInfo(), this.getIndex());\r\n            if (value) {\r\n                output.add(' ');\r\n                value.genCSS(context, output);\r\n            }\r\n            if (rules) {\r\n                this.outputRuleset(context, output, rules);\r\n            }\r\n            else {\r\n                output.add(';');\r\n            }\r\n        },\r\n        eval: function (context) {\r\n            var mediaPathBackup, mediaBlocksBackup, value = this.value, rules = this.rules;\r\n            // media stored inside other atrule should not bubble over it\r\n            // backpup media bubbling information\r\n            mediaPathBackup = context.mediaPath;\r\n            mediaBlocksBackup = context.mediaBlocks;\r\n            // deleted media bubbling information\r\n            context.mediaPath = [];\r\n            context.mediaBlocks = [];\r\n            if (value) {\r\n                value = value.eval(context);\r\n            }\r\n            if (rules) {\r\n                // assuming that there is only one rule at this point - that is how parser constructs the rule\r\n                rules = [rules[0].eval(context)];\r\n                rules[0].root = true;\r\n            }\r\n            // restore media bubbling information\r\n            context.mediaPath = mediaPathBackup;\r\n            context.mediaBlocks = mediaBlocksBackup;\r\n            return new AtRule(this.name, value, rules, this.getIndex(), this.fileInfo(), this.debugInfo, this.isRooted, this.visibilityInfo());\r\n        },\r\n        variable: function (name) {\r\n            if (this.rules) {\r\n                // assuming that there is only one rule at this point - that is how parser constructs the rule\r\n                return Ruleset.prototype.variable.call(this.rules[0], name);\r\n            }\r\n        },\r\n        find: function () {\r\n            if (this.rules) {\r\n                // assuming that there is only one rule at this point - that is how parser constructs the rule\r\n                return Ruleset.prototype.find.apply(this.rules[0], arguments);\r\n            }\r\n        },\r\n        rulesets: function () {\r\n            if (this.rules) {\r\n                // assuming that there is only one rule at this point - that is how parser constructs the rule\r\n                return Ruleset.prototype.rulesets.apply(this.rules[0]);\r\n            }\r\n        },\r\n        outputRuleset: function (context, output, rules) {\r\n            var ruleCnt = rules.length;\r\n            var i;\r\n            context.tabLevel = (context.tabLevel | 0) + 1;\r\n            // Compressed\r\n            if (context.compress) {\r\n                output.add('{');\r\n                for (i = 0; i < ruleCnt; i++) {\r\n                    rules[i].genCSS(context, output);\r\n                }\r\n                output.add('}');\r\n                context.tabLevel--;\r\n                return;\r\n            }\r\n            // Non-compressed\r\n            var tabSetStr = \"\\n\" + Array(context.tabLevel).join('  '), tabRuleStr = tabSetStr + \"  \";\r\n            if (!ruleCnt) {\r\n                output.add(\" {\" + tabSetStr + \"}\");\r\n            }\r\n            else {\r\n                output.add(\" {\" + tabRuleStr);\r\n                rules[0].genCSS(context, output);\r\n                for (i = 1; i < ruleCnt; i++) {\r\n                    output.add(tabRuleStr);\r\n                    rules[i].genCSS(context, output);\r\n                }\r\n                output.add(tabSetStr + \"}\");\r\n            }\r\n            context.tabLevel--;\r\n        }\r\n    });\n\n    var DetachedRuleset = function (ruleset, frames) {\r\n        this.ruleset = ruleset;\r\n        this.frames = frames;\r\n        this.setParent(this.ruleset, this);\r\n    };\r\n    DetachedRuleset.prototype = Object.assign(new Node(), {\r\n        type: 'DetachedRuleset',\r\n        evalFirst: true,\r\n        accept: function (visitor) {\r\n            this.ruleset = visitor.visit(this.ruleset);\r\n        },\r\n        eval: function (context) {\r\n            var frames = this.frames || copyArray(context.frames);\r\n            return new DetachedRuleset(this.ruleset, frames);\r\n        },\r\n        callEval: function (context) {\r\n            return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);\r\n        }\r\n    });\n\n    var Unit = function (numerator, denominator, backupUnit) {\r\n        this.numerator = numerator ? copyArray(numerator).sort() : [];\r\n        this.denominator = denominator ? copyArray(denominator).sort() : [];\r\n        if (backupUnit) {\r\n            this.backupUnit = backupUnit;\r\n        }\r\n        else if (numerator && numerator.length) {\r\n            this.backupUnit = numerator[0];\r\n        }\r\n    };\r\n    Unit.prototype = Object.assign(new Node(), {\r\n        type: 'Unit',\r\n        clone: function () {\r\n            return new Unit(copyArray(this.numerator), copyArray(this.denominator), this.backupUnit);\r\n        },\r\n        genCSS: function (context, output) {\r\n            // Dimension checks the unit is singular and throws an error if in strict math mode.\r\n            var strictUnits = context && context.strictUnits;\r\n            if (this.numerator.length === 1) {\r\n                output.add(this.numerator[0]); // the ideal situation\r\n            }\r\n            else if (!strictUnits && this.backupUnit) {\r\n                output.add(this.backupUnit);\r\n            }\r\n            else if (!strictUnits && this.denominator.length) {\r\n                output.add(this.denominator[0]);\r\n            }\r\n        },\r\n        toString: function () {\r\n            var i, returnStr = this.numerator.join('*');\r\n            for (i = 0; i < this.denominator.length; i++) {\r\n                returnStr += \"/\" + this.denominator[i];\r\n            }\r\n            return returnStr;\r\n        },\r\n        compare: function (other) {\r\n            return this.is(other.toString()) ? 0 : undefined;\r\n        },\r\n        is: function (unitString) {\r\n            return this.toString().toUpperCase() === unitString.toUpperCase();\r\n        },\r\n        isLength: function () {\r\n            return RegExp('^(px|em|ex|ch|rem|in|cm|mm|pc|pt|ex|vw|vh|vmin|vmax)$', 'gi').test(this.toCSS());\r\n        },\r\n        isEmpty: function () {\r\n            return this.numerator.length === 0 && this.denominator.length === 0;\r\n        },\r\n        isSingular: function () {\r\n            return this.numerator.length <= 1 && this.denominator.length === 0;\r\n        },\r\n        map: function (callback) {\r\n            var i;\r\n            for (i = 0; i < this.numerator.length; i++) {\r\n                this.numerator[i] = callback(this.numerator[i], false);\r\n            }\r\n            for (i = 0; i < this.denominator.length; i++) {\r\n                this.denominator[i] = callback(this.denominator[i], true);\r\n            }\r\n        },\r\n        usedUnits: function () {\r\n            var group;\r\n            var result = {};\r\n            var mapUnit;\r\n            var groupName;\r\n            mapUnit = function (atomicUnit) {\r\n                /* jshint loopfunc:true */\r\n                if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\r\n                    result[groupName] = atomicUnit;\r\n                }\r\n                return atomicUnit;\r\n            };\r\n            for (groupName in unitConversions) {\r\n                if (unitConversions.hasOwnProperty(groupName)) {\r\n                    group = unitConversions[groupName];\r\n                    this.map(mapUnit);\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        cancel: function () {\r\n            var counter = {};\r\n            var atomicUnit;\r\n            var i;\r\n            for (i = 0; i < this.numerator.length; i++) {\r\n                atomicUnit = this.numerator[i];\r\n                counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\r\n            }\r\n            for (i = 0; i < this.denominator.length; i++) {\r\n                atomicUnit = this.denominator[i];\r\n                counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\r\n            }\r\n            this.numerator = [];\r\n            this.denominator = [];\r\n            for (atomicUnit in counter) {\r\n                if (counter.hasOwnProperty(atomicUnit)) {\r\n                    var count = counter[atomicUnit];\r\n                    if (count > 0) {\r\n                        for (i = 0; i < count; i++) {\r\n                            this.numerator.push(atomicUnit);\r\n                        }\r\n                    }\r\n                    else if (count < 0) {\r\n                        for (i = 0; i < -count; i++) {\r\n                            this.denominator.push(atomicUnit);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.numerator.sort();\r\n            this.denominator.sort();\r\n        }\r\n    });\n\n    //\r\n    // A number with a unit\r\n    //\r\n    var Dimension = function (value, unit) {\r\n        this.value = parseFloat(value);\r\n        if (isNaN(this.value)) {\r\n            throw new Error('Dimension is not a number.');\r\n        }\r\n        this.unit = (unit && unit instanceof Unit) ? unit :\r\n            new Unit(unit ? [unit] : undefined);\r\n        this.setParent(this.unit, this);\r\n    };\r\n    Dimension.prototype = Object.assign(new Node(), {\r\n        type: 'Dimension',\r\n        accept: function (visitor) {\r\n            this.unit = visitor.visit(this.unit);\r\n        },\r\n        eval: function (context) {\r\n            return this;\r\n        },\r\n        toColor: function () {\r\n            return new Color([this.value, this.value, this.value]);\r\n        },\r\n        genCSS: function (context, output) {\r\n            if ((context && context.strictUnits) && !this.unit.isSingular()) {\r\n                throw new Error(\"Multiple units in dimension. Correct the units or use the unit function. Bad unit: \" + this.unit.toString());\r\n            }\r\n            var value = this.fround(context, this.value);\r\n            var strValue = String(value);\r\n            if (value !== 0 && value < 0.000001 && value > -0.000001) {\r\n                // would be output 1e-6 etc.\r\n                strValue = value.toFixed(20).replace(/0+$/, '');\r\n            }\r\n            if (context && context.compress) {\r\n                // Zero values doesn't need a unit\r\n                if (value === 0 && this.unit.isLength()) {\r\n                    output.add(strValue);\r\n                    return;\r\n                }\r\n                // Float values doesn't need a leading zero\r\n                if (value > 0 && value < 1) {\r\n                    strValue = (strValue).substr(1);\r\n                }\r\n            }\r\n            output.add(strValue);\r\n            this.unit.genCSS(context, output);\r\n        },\r\n        // In an operation between two Dimensions,\r\n        // we default to the first Dimension's unit,\r\n        // so `1px + 2` will yield `3px`.\r\n        operate: function (context, op, other) {\r\n            /* jshint noempty:false */\r\n            var value = this._operate(context, op, this.value, other.value);\r\n            var unit = this.unit.clone();\r\n            if (op === '+' || op === '-') {\r\n                if (unit.numerator.length === 0 && unit.denominator.length === 0) {\r\n                    unit = other.unit.clone();\r\n                    if (this.unit.backupUnit) {\r\n                        unit.backupUnit = this.unit.backupUnit;\r\n                    }\r\n                }\r\n                else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) ;\r\n                else {\r\n                    other = other.convertTo(this.unit.usedUnits());\r\n                    if (context.strictUnits && other.unit.toString() !== unit.toString()) {\r\n                        throw new Error(\"Incompatible units. Change the units or use the unit function. \"\r\n                            + (\"Bad units: '\" + unit.toString() + \"' and '\" + other.unit.toString() + \"'.\"));\r\n                    }\r\n                    value = this._operate(context, op, this.value, other.value);\r\n                }\r\n            }\r\n            else if (op === '*') {\r\n                unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\r\n                unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\r\n                unit.cancel();\r\n            }\r\n            else if (op === '/') {\r\n                unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\r\n                unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\r\n                unit.cancel();\r\n            }\r\n            return new Dimension(value, unit);\r\n        },\r\n        compare: function (other) {\r\n            var a, b;\r\n            if (!(other instanceof Dimension)) {\r\n                return undefined;\r\n            }\r\n            if (this.unit.isEmpty() || other.unit.isEmpty()) {\r\n                a = this;\r\n                b = other;\r\n            }\r\n            else {\r\n                a = this.unify();\r\n                b = other.unify();\r\n                if (a.unit.compare(b.unit) !== 0) {\r\n                    return undefined;\r\n                }\r\n            }\r\n            return Node.numericCompare(a.value, b.value);\r\n        },\r\n        unify: function () {\r\n            return this.convertTo({ length: 'px', duration: 's', angle: 'rad' });\r\n        },\r\n        convertTo: function (conversions) {\r\n            var value = this.value;\r\n            var unit = this.unit.clone();\r\n            var i;\r\n            var groupName;\r\n            var group;\r\n            var targetUnit;\r\n            var derivedConversions = {};\r\n            var applyUnit;\r\n            if (typeof conversions === 'string') {\r\n                for (i in unitConversions) {\r\n                    if (unitConversions[i].hasOwnProperty(conversions)) {\r\n                        derivedConversions = {};\r\n                        derivedConversions[i] = conversions;\r\n                    }\r\n                }\r\n                conversions = derivedConversions;\r\n            }\r\n            applyUnit = function (atomicUnit, denominator) {\r\n                /* jshint loopfunc:true */\r\n                if (group.hasOwnProperty(atomicUnit)) {\r\n                    if (denominator) {\r\n                        value = value / (group[atomicUnit] / group[targetUnit]);\r\n                    }\r\n                    else {\r\n                        value = value * (group[atomicUnit] / group[targetUnit]);\r\n                    }\r\n                    return targetUnit;\r\n                }\r\n                return atomicUnit;\r\n            };\r\n            for (groupName in conversions) {\r\n                if (conversions.hasOwnProperty(groupName)) {\r\n                    targetUnit = conversions[groupName];\r\n                    group = unitConversions[groupName];\r\n                    unit.map(applyUnit);\r\n                }\r\n            }\r\n            unit.cancel();\r\n            return new Dimension(value, unit);\r\n        }\r\n    });\n\n    var MATH$1 = Math$1;\r\n    var Operation = function (op, operands, isSpaced) {\r\n        this.op = op.trim();\r\n        this.operands = operands;\r\n        this.isSpaced = isSpaced;\r\n    };\r\n    Operation.prototype = Object.assign(new Node(), {\r\n        type: 'Operation',\r\n        accept: function (visitor) {\r\n            this.operands = visitor.visitArray(this.operands);\r\n        },\r\n        eval: function (context) {\r\n            var a = this.operands[0].eval(context), b = this.operands[1].eval(context), op;\r\n            if (context.isMathOn(this.op)) {\r\n                op = this.op === './' ? '/' : this.op;\r\n                if (a instanceof Dimension && b instanceof Color) {\r\n                    a = a.toColor();\r\n                }\r\n                if (b instanceof Dimension && a instanceof Color) {\r\n                    b = b.toColor();\r\n                }\r\n                if (!a.operate || !b.operate) {\r\n                    if ((a instanceof Operation || b instanceof Operation)\r\n                        && a.op === '/' && context.math === MATH$1.PARENS_DIVISION) {\r\n                        return new Operation(this.op, [a, b], this.isSpaced);\r\n                    }\r\n                    throw { type: 'Operation',\r\n                        message: 'Operation on an invalid type' };\r\n                }\r\n                return a.operate(context, op, b);\r\n            }\r\n            else {\r\n                return new Operation(this.op, [a, b], this.isSpaced);\r\n            }\r\n        },\r\n        genCSS: function (context, output) {\r\n            this.operands[0].genCSS(context, output);\r\n            if (this.isSpaced) {\r\n                output.add(' ');\r\n            }\r\n            output.add(this.op);\r\n            if (this.isSpaced) {\r\n                output.add(' ');\r\n            }\r\n            this.operands[1].genCSS(context, output);\r\n        }\r\n    });\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n\r\n    function __spreadArrays$1() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    }\n\n    var Expression = function (value, noSpacing) {\r\n        this.value = value;\r\n        this.noSpacing = noSpacing;\r\n        if (!value) {\r\n            throw new Error('Expression requires an array parameter');\r\n        }\r\n    };\r\n    Expression.prototype = Object.assign(new Node(), {\r\n        type: 'Expression',\r\n        accept: function (visitor) {\r\n            this.value = visitor.visitArray(this.value);\r\n        },\r\n        eval: function (context) {\r\n            var returnValue;\r\n            var mathOn = context.isMathOn();\r\n            var inParenthesis = this.parens;\r\n            var doubleParen = false;\r\n            if (inParenthesis) {\r\n                context.inParenthesis();\r\n            }\r\n            if (this.value.length > 1) {\r\n                returnValue = new Expression(this.value.map(function (e) {\r\n                    if (!e.eval) {\r\n                        return e;\r\n                    }\r\n                    return e.eval(context);\r\n                }), this.noSpacing);\r\n            }\r\n            else if (this.value.length === 1) {\r\n                if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\r\n                    doubleParen = true;\r\n                }\r\n                returnValue = this.value[0].eval(context);\r\n            }\r\n            else {\r\n                returnValue = this;\r\n            }\r\n            if (inParenthesis) {\r\n                context.outOfParenthesis();\r\n            }\r\n            if (this.parens && this.parensInOp && !mathOn && !doubleParen\r\n                && (!(returnValue instanceof Dimension))) {\r\n                returnValue = new Paren(returnValue);\r\n            }\r\n            return returnValue;\r\n        },\r\n        genCSS: function (context, output) {\r\n            for (var i = 0; i < this.value.length; i++) {\r\n                this.value[i].genCSS(context, output);\r\n                if (!this.noSpacing && i + 1 < this.value.length) {\r\n                    output.add(' ');\r\n                }\r\n            }\r\n        },\r\n        throwAwayComments: function () {\r\n            this.value = this.value.filter(function (v) {\r\n                return !(v instanceof Comment);\r\n            });\r\n        }\r\n    });\n\n    var functionCaller = /** @class */ (function () {\r\n        function functionCaller(name, context, index, currentFileInfo) {\r\n            this.name = name.toLowerCase();\r\n            this.index = index;\r\n            this.context = context;\r\n            this.currentFileInfo = currentFileInfo;\r\n            this.func = context.frames[0].functionRegistry.get(this.name);\r\n        }\r\n        functionCaller.prototype.isValid = function () {\r\n            return Boolean(this.func);\r\n        };\r\n        functionCaller.prototype.call = function (args) {\r\n            var _this = this;\r\n            if (!(Array.isArray(args))) {\r\n                args = [args];\r\n            }\r\n            var evalArgs = this.func.evalArgs;\r\n            if (evalArgs !== false) {\r\n                args = args.map(function (a) { return a.eval(_this.context); });\r\n            }\r\n            var commentFilter = function (item) { return !(item.type === 'Comment'); };\r\n            // This code is terrible and should be replaced as per this issue...\r\n            // https://github.com/less/less.js/issues/2477\r\n            args = args\r\n                .filter(commentFilter)\r\n                .map(function (item) {\r\n                if (item.type === 'Expression') {\r\n                    var subNodes = item.value.filter(commentFilter);\r\n                    if (subNodes.length === 1) {\r\n                        return subNodes[0];\r\n                    }\r\n                    else {\r\n                        return new Expression(subNodes);\r\n                    }\r\n                }\r\n                return item;\r\n            });\r\n            if (evalArgs === false) {\r\n                return this.func.apply(this, __spreadArrays$1([this.context], args));\r\n            }\r\n            return this.func.apply(this, args);\r\n        };\r\n        return functionCaller;\r\n    }());\n\n    //\r\n    // A function call node.\r\n    //\r\n    var Call = function (name, args, index, currentFileInfo) {\r\n        this.name = name;\r\n        this.args = args;\r\n        this.calc = name === 'calc';\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n    };\r\n    Call.prototype = Object.assign(new Node(), {\r\n        type: 'Call',\r\n        accept: function (visitor) {\r\n            if (this.args) {\r\n                this.args = visitor.visitArray(this.args);\r\n            }\r\n        },\r\n        //\r\n        // When evaluating a function call,\r\n        // we either find the function in the functionRegistry,\r\n        // in which case we call it, passing the  evaluated arguments,\r\n        // if this returns null or we cannot find the function, we\r\n        // simply print it out as it appeared originally [2].\r\n        //\r\n        // The reason why we evaluate the arguments, is in the case where\r\n        // we try to pass a variable to a function, like: `saturate(@color)`.\r\n        // The function should receive the value, not the variable.\r\n        //\r\n        eval: function (context) {\r\n            var _this = this;\r\n            /**\r\n             * Turn off math for calc(), and switch back on for evaluating nested functions\r\n             */\r\n            var currentMathContext = context.mathOn;\r\n            context.mathOn = !this.calc;\r\n            if (this.calc || context.inCalc) {\r\n                context.enterCalc();\r\n            }\r\n            var exitCalc = function () {\r\n                if (_this.calc || context.inCalc) {\r\n                    context.exitCalc();\r\n                }\r\n                context.mathOn = currentMathContext;\r\n            };\r\n            var result;\r\n            var funcCaller = new functionCaller(this.name, context, this.getIndex(), this.fileInfo());\r\n            if (funcCaller.isValid()) {\r\n                try {\r\n                    result = funcCaller.call(this.args);\r\n                    exitCalc();\r\n                }\r\n                catch (e) {\r\n                    if (e.hasOwnProperty('line') && e.hasOwnProperty('column')) {\r\n                        throw e;\r\n                    }\r\n                    throw {\r\n                        type: e.type || 'Runtime',\r\n                        message: \"Error evaluating function `\" + this.name + \"`\" + (e.message ? \": \" + e.message : ''),\r\n                        index: this.getIndex(),\r\n                        filename: this.fileInfo().filename,\r\n                        line: e.lineNumber,\r\n                        column: e.columnNumber\r\n                    };\r\n                }\r\n            }\r\n            if (result !== null && result !== undefined) {\r\n                // Results that that are not nodes are cast as Anonymous nodes\r\n                // Falsy values or booleans are returned as empty nodes\r\n                if (!(result instanceof Node)) {\r\n                    if (!result || result === true) {\r\n                        result = new Anonymous(null);\r\n                    }\r\n                    else {\r\n                        result = new Anonymous(result.toString());\r\n                    }\r\n                }\r\n                result._index = this._index;\r\n                result._fileInfo = this._fileInfo;\r\n                return result;\r\n            }\r\n            var args = this.args.map(function (a) { return a.eval(context); });\r\n            exitCalc();\r\n            return new Call(this.name, args, this.getIndex(), this.fileInfo());\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add(this.name + \"(\", this.fileInfo(), this.getIndex());\r\n            for (var i = 0; i < this.args.length; i++) {\r\n                this.args[i].genCSS(context, output);\r\n                if (i + 1 < this.args.length) {\r\n                    output.add(', ');\r\n                }\r\n            }\r\n            output.add(')');\r\n        }\r\n    });\n\n    var Variable = function (name, index, currentFileInfo) {\r\n        this.name = name;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n    };\r\n    Variable.prototype = Object.assign(new Node(), {\r\n        type: 'Variable',\r\n        eval: function (context) {\r\n            var variable, name = this.name;\r\n            if (name.indexOf('@@') === 0) {\r\n                name = \"@\" + new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value;\r\n            }\r\n            if (this.evaluating) {\r\n                throw { type: 'Name', message: \"Recursive variable definition for \" + name, filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n            this.evaluating = true;\r\n            variable = this.find(context.frames, function (frame) {\r\n                var v = frame.variable(name);\r\n                if (v) {\r\n                    if (v.important) {\r\n                        var importantScope = context.importantScope[context.importantScope.length - 1];\r\n                        importantScope.important = v.important;\r\n                    }\r\n                    // If in calc, wrap vars in a function call to cascade evaluate args first\r\n                    if (context.inCalc) {\r\n                        return (new Call('_SELF', [v.value])).eval(context);\r\n                    }\r\n                    else {\r\n                        return v.value.eval(context);\r\n                    }\r\n                }\r\n            });\r\n            if (variable) {\r\n                this.evaluating = false;\r\n                return variable;\r\n            }\r\n            else {\r\n                throw { type: 'Name', message: \"variable \" + name + \" is undefined\", filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n        },\r\n        find: function (obj, fun) {\r\n            for (var i = 0, r = void 0; i < obj.length; i++) {\r\n                r = fun.call(obj, obj[i]);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    });\n\n    var Property = function (name, index, currentFileInfo) {\r\n        this.name = name;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n    };\r\n    Property.prototype = Object.assign(new Node(), {\r\n        type: 'Property',\r\n        eval: function (context) {\r\n            var property;\r\n            var name = this.name;\r\n            // TODO: shorten this reference\r\n            var mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\r\n            if (this.evaluating) {\r\n                throw { type: 'Name', message: \"Recursive property reference for \" + name, filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n            this.evaluating = true;\r\n            property = this.find(context.frames, function (frame) {\r\n                var v;\r\n                var vArr = frame.property(name);\r\n                if (vArr) {\r\n                    for (var i = 0; i < vArr.length; i++) {\r\n                        v = vArr[i];\r\n                        vArr[i] = new Declaration(v.name, v.value, v.important, v.merge, v.index, v.currentFileInfo, v.inline, v.variable);\r\n                    }\r\n                    mergeRules(vArr);\r\n                    v = vArr[vArr.length - 1];\r\n                    if (v.important) {\r\n                        var importantScope = context.importantScope[context.importantScope.length - 1];\r\n                        importantScope.important = v.important;\r\n                    }\r\n                    v = v.value.eval(context);\r\n                    return v;\r\n                }\r\n            });\r\n            if (property) {\r\n                this.evaluating = false;\r\n                return property;\r\n            }\r\n            else {\r\n                throw { type: 'Name', message: \"Property '\" + name + \"' is undefined\", filename: this.currentFileInfo.filename,\r\n                    index: this.index };\r\n            }\r\n        },\r\n        find: function (obj, fun) {\r\n            for (var i = 0, r = void 0; i < obj.length; i++) {\r\n                r = fun.call(obj, obj[i]);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    });\n\n    var Attribute = function (key, op, value) {\r\n        this.key = key;\r\n        this.op = op;\r\n        this.value = value;\r\n    };\r\n    Attribute.prototype = Object.assign(new Node(), {\r\n        type: 'Attribute',\r\n        eval: function (context) {\r\n            return new Attribute(this.key.eval ? this.key.eval(context) : this.key, this.op, (this.value && this.value.eval) ? this.value.eval(context) : this.value);\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add(this.toCSS(context));\r\n        },\r\n        toCSS: function (context) {\r\n            var value = this.key.toCSS ? this.key.toCSS(context) : this.key;\r\n            if (this.op) {\r\n                value += this.op;\r\n                value += (this.value.toCSS ? this.value.toCSS(context) : this.value);\r\n            }\r\n            return \"[\" + value + \"]\";\r\n        }\r\n    });\n\n    var Quoted = function (str, content, escaped, index, currentFileInfo) {\r\n        this.escaped = (escaped == null) ? true : escaped;\r\n        this.value = content || '';\r\n        this.quote = str.charAt(0);\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.variableRegex = /@\\{([\\w-]+)\\}/g;\r\n        this.propRegex = /\\$\\{([\\w-]+)\\}/g;\r\n        this.allowRoot = escaped;\r\n    };\r\n    Quoted.prototype = Object.assign(new Node(), {\r\n        type: 'Quoted',\r\n        genCSS: function (context, output) {\r\n            if (!this.escaped) {\r\n                output.add(this.quote, this.fileInfo(), this.getIndex());\r\n            }\r\n            output.add(this.value);\r\n            if (!this.escaped) {\r\n                output.add(this.quote);\r\n            }\r\n        },\r\n        containsVariables: function () {\r\n            return this.value.match(this.variableRegex);\r\n        },\r\n        eval: function (context) {\r\n            var that = this;\r\n            var value = this.value;\r\n            var variableReplacement = function (_, name) {\r\n                var v = new Variable(\"@\" + name, that.getIndex(), that.fileInfo()).eval(context, true);\r\n                return (v instanceof Quoted) ? v.value : v.toCSS();\r\n            };\r\n            var propertyReplacement = function (_, name) {\r\n                var v = new Property(\"$\" + name, that.getIndex(), that.fileInfo()).eval(context, true);\r\n                return (v instanceof Quoted) ? v.value : v.toCSS();\r\n            };\r\n            function iterativeReplace(value, regexp, replacementFnc) {\r\n                var evaluatedValue = value;\r\n                do {\r\n                    value = evaluatedValue.toString();\r\n                    evaluatedValue = value.replace(regexp, replacementFnc);\r\n                } while (value !== evaluatedValue);\r\n                return evaluatedValue;\r\n            }\r\n            value = iterativeReplace(value, this.variableRegex, variableReplacement);\r\n            value = iterativeReplace(value, this.propRegex, propertyReplacement);\r\n            return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\r\n        },\r\n        compare: function (other) {\r\n            // when comparing quoted strings allow the quote to differ\r\n            if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\r\n                return Node.numericCompare(this.value, other.value);\r\n            }\r\n            else {\r\n                return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\r\n            }\r\n        }\r\n    });\n\n    function escapePath(path) {\r\n        return path.replace(/[\\(\\)'\"\\s]/g, function (match) { return \"\\\\\" + match; });\r\n    }\r\n    var URL = function (val, index, currentFileInfo, isEvald) {\r\n        this.value = val;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.isEvald = isEvald;\r\n    };\r\n    URL.prototype = Object.assign(new Node(), {\r\n        type: 'Url',\r\n        accept: function (visitor) {\r\n            this.value = visitor.visit(this.value);\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add('url(');\r\n            this.value.genCSS(context, output);\r\n            output.add(')');\r\n        },\r\n        eval: function (context) {\r\n            var val = this.value.eval(context);\r\n            var rootpath;\r\n            if (!this.isEvald) {\r\n                // Add the rootpath if the URL requires a rewrite\r\n                rootpath = this.fileInfo() && this.fileInfo().rootpath;\r\n                if (typeof rootpath === 'string' &&\r\n                    typeof val.value === 'string' &&\r\n                    context.pathRequiresRewrite(val.value)) {\r\n                    if (!val.quote) {\r\n                        rootpath = escapePath(rootpath);\r\n                    }\r\n                    val.value = context.rewritePath(val.value, rootpath);\r\n                }\r\n                else {\r\n                    val.value = context.normalizePath(val.value);\r\n                }\r\n                // Add url args if enabled\r\n                if (context.urlArgs) {\r\n                    if (!val.value.match(/^\\s*data:/)) {\r\n                        var delimiter = val.value.indexOf('?') === -1 ? '?' : '&';\r\n                        var urlArgs = delimiter + context.urlArgs;\r\n                        if (val.value.indexOf('#') !== -1) {\r\n                            val.value = val.value.replace('#', urlArgs + \"#\");\r\n                        }\r\n                        else {\r\n                            val.value += urlArgs;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return new URL(val, this.getIndex(), this.fileInfo(), true);\r\n        }\r\n    });\n\n    var Media = function (value, features, index, currentFileInfo, visibilityInfo) {\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        var selectors = (new Selector([], null, null, this._index, this._fileInfo)).createEmptySelectors();\r\n        this.features = new Value(features);\r\n        this.rules = [new Ruleset(selectors, value)];\r\n        this.rules[0].allowImports = true;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.allowRoot = true;\r\n        this.setParent(selectors, this);\r\n        this.setParent(this.features, this);\r\n        this.setParent(this.rules, this);\r\n    };\r\n    Media.prototype = Object.assign(new AtRule(), {\r\n        type: 'Media',\r\n        isRulesetLike: function () {\r\n            return true;\r\n        },\r\n        accept: function (visitor) {\r\n            if (this.features) {\r\n                this.features = visitor.visit(this.features);\r\n            }\r\n            if (this.rules) {\r\n                this.rules = visitor.visitArray(this.rules);\r\n            }\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add('@media ', this._fileInfo, this._index);\r\n            this.features.genCSS(context, output);\r\n            this.outputRuleset(context, output, this.rules);\r\n        },\r\n        eval: function (context) {\r\n            if (!context.mediaBlocks) {\r\n                context.mediaBlocks = [];\r\n                context.mediaPath = [];\r\n            }\r\n            var media = new Media(null, [], this._index, this._fileInfo, this.visibilityInfo());\r\n            if (this.debugInfo) {\r\n                this.rules[0].debugInfo = this.debugInfo;\r\n                media.debugInfo = this.debugInfo;\r\n            }\r\n            media.features = this.features.eval(context);\r\n            context.mediaPath.push(media);\r\n            context.mediaBlocks.push(media);\r\n            this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\r\n            context.frames.unshift(this.rules[0]);\r\n            media.rules = [this.rules[0].eval(context)];\r\n            context.frames.shift();\r\n            context.mediaPath.pop();\r\n            return context.mediaPath.length === 0 ? media.evalTop(context) :\r\n                media.evalNested(context);\r\n        },\r\n        evalTop: function (context) {\r\n            var result = this;\r\n            // Render all dependent Media blocks.\r\n            if (context.mediaBlocks.length > 1) {\r\n                var selectors = (new Selector([], null, null, this.getIndex(), this.fileInfo())).createEmptySelectors();\r\n                result = new Ruleset(selectors, context.mediaBlocks);\r\n                result.multiMedia = true;\r\n                result.copyVisibilityInfo(this.visibilityInfo());\r\n                this.setParent(result, this);\r\n            }\r\n            delete context.mediaBlocks;\r\n            delete context.mediaPath;\r\n            return result;\r\n        },\r\n        evalNested: function (context) {\r\n            var i;\r\n            var value;\r\n            var path = context.mediaPath.concat([this]);\r\n            // Extract the media-query conditions separated with `,` (OR).\r\n            for (i = 0; i < path.length; i++) {\r\n                value = path[i].features instanceof Value ?\r\n                    path[i].features.value : path[i].features;\r\n                path[i] = Array.isArray(value) ? value : [value];\r\n            }\r\n            // Trace all permutations to generate the resulting media-query.\r\n            //\r\n            // (a, b and c) with nested (d, e) ->\r\n            //    a and d\r\n            //    a and e\r\n            //    b and c and d\r\n            //    b and c and e\r\n            this.features = new Value(this.permute(path).map(function (path) {\r\n                path = path.map(function (fragment) { return fragment.toCSS ? fragment : new Anonymous(fragment); });\r\n                for (i = path.length - 1; i > 0; i--) {\r\n                    path.splice(i, 0, new Anonymous('and'));\r\n                }\r\n                return new Expression(path);\r\n            }));\r\n            this.setParent(this.features, this);\r\n            // Fake a tree-node that doesn't output anything.\r\n            return new Ruleset([], []);\r\n        },\r\n        permute: function (arr) {\r\n            if (arr.length === 0) {\r\n                return [];\r\n            }\r\n            else if (arr.length === 1) {\r\n                return arr[0];\r\n            }\r\n            else {\r\n                var result = [];\r\n                var rest = this.permute(arr.slice(1));\r\n                for (var i = 0; i < rest.length; i++) {\r\n                    for (var j = 0; j < arr[0].length; j++) {\r\n                        result.push([arr[0][j]].concat(rest[i]));\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n        },\r\n        bubbleSelectors: function (selectors) {\r\n            if (!selectors) {\r\n                return;\r\n            }\r\n            this.rules = [new Ruleset(copyArray(selectors), [this.rules[0]])];\r\n            this.setParent(this.rules, this);\r\n        }\r\n    });\n\n    //\r\n    // CSS @import node\r\n    //\r\n    // The general strategy here is that we don't want to wait\r\n    // for the parsing to be completed, before we start importing\r\n    // the file. That's because in the context of a browser,\r\n    // most of the time will be spent waiting for the server to respond.\r\n    //\r\n    // On creation, we push the import path to our import queue, though\r\n    // `import,push`, we also pass it a callback, which it'll call once\r\n    // the file has been fetched, and parsed.\r\n    //\r\n    var Import = function (path, features, options, index, currentFileInfo, visibilityInfo) {\r\n        this.options = options;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.path = path;\r\n        this.features = features;\r\n        this.allowRoot = true;\r\n        if (this.options.less !== undefined || this.options.inline) {\r\n            this.css = !this.options.less || this.options.inline;\r\n        }\r\n        else {\r\n            var pathValue = this.getPath();\r\n            if (pathValue && /[#\\.\\&\\?]css([\\?;].*)?$/.test(pathValue)) {\r\n                this.css = true;\r\n            }\r\n        }\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.setParent(this.features, this);\r\n        this.setParent(this.path, this);\r\n    };\r\n    Import.prototype = Object.assign(new Node(), {\r\n        type: 'Import',\r\n        accept: function (visitor) {\r\n            if (this.features) {\r\n                this.features = visitor.visit(this.features);\r\n            }\r\n            this.path = visitor.visit(this.path);\r\n            if (!this.options.isPlugin && !this.options.inline && this.root) {\r\n                this.root = visitor.visit(this.root);\r\n            }\r\n        },\r\n        genCSS: function (context, output) {\r\n            if (this.css && this.path._fileInfo.reference === undefined) {\r\n                output.add('@import ', this._fileInfo, this._index);\r\n                this.path.genCSS(context, output);\r\n                if (this.features) {\r\n                    output.add(' ');\r\n                    this.features.genCSS(context, output);\r\n                }\r\n                output.add(';');\r\n            }\r\n        },\r\n        getPath: function () {\r\n            return (this.path instanceof URL) ?\r\n                this.path.value.value : this.path.value;\r\n        },\r\n        isVariableImport: function () {\r\n            var path = this.path;\r\n            if (path instanceof URL) {\r\n                path = path.value;\r\n            }\r\n            if (path instanceof Quoted) {\r\n                return path.containsVariables();\r\n            }\r\n            return true;\r\n        },\r\n        evalForImport: function (context) {\r\n            var path = this.path;\r\n            if (path instanceof URL) {\r\n                path = path.value;\r\n            }\r\n            return new Import(path.eval(context), this.features, this.options, this._index, this._fileInfo, this.visibilityInfo());\r\n        },\r\n        evalPath: function (context) {\r\n            var path = this.path.eval(context);\r\n            var fileInfo = this._fileInfo;\r\n            if (!(path instanceof URL)) {\r\n                // Add the rootpath if the URL requires a rewrite\r\n                var pathValue = path.value;\r\n                if (fileInfo &&\r\n                    pathValue &&\r\n                    context.pathRequiresRewrite(pathValue)) {\r\n                    path.value = context.rewritePath(pathValue, fileInfo.rootpath);\r\n                }\r\n                else {\r\n                    path.value = context.normalizePath(path.value);\r\n                }\r\n            }\r\n            return path;\r\n        },\r\n        eval: function (context) {\r\n            var result = this.doEval(context);\r\n            if (this.options.reference || this.blocksVisibility()) {\r\n                if (result.length || result.length === 0) {\r\n                    result.forEach(function (node) {\r\n                        node.addVisibilityBlock();\r\n                    });\r\n                }\r\n                else {\r\n                    result.addVisibilityBlock();\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        doEval: function (context) {\r\n            var ruleset;\r\n            var registry;\r\n            var features = this.features && this.features.eval(context);\r\n            if (this.options.isPlugin) {\r\n                if (this.root && this.root.eval) {\r\n                    try {\r\n                        this.root.eval(context);\r\n                    }\r\n                    catch (e) {\r\n                        e.message = 'Plugin error during evaluation';\r\n                        throw new LessError(e, this.root.imports, this.root.filename);\r\n                    }\r\n                }\r\n                registry = context.frames[0] && context.frames[0].functionRegistry;\r\n                if (registry && this.root && this.root.functions) {\r\n                    registry.addMultiple(this.root.functions);\r\n                }\r\n                return [];\r\n            }\r\n            if (this.skip) {\r\n                if (typeof this.skip === 'function') {\r\n                    this.skip = this.skip();\r\n                }\r\n                if (this.skip) {\r\n                    return [];\r\n                }\r\n            }\r\n            if (this.options.inline) {\r\n                var contents = new Anonymous(this.root, 0, {\r\n                    filename: this.importedFilename,\r\n                    reference: this.path._fileInfo && this.path._fileInfo.reference\r\n                }, true, true);\r\n                return this.features ? new Media([contents], this.features.value) : [contents];\r\n            }\r\n            else if (this.css) {\r\n                var newImport = new Import(this.evalPath(context), features, this.options, this._index);\r\n                if (!newImport.css && this.error) {\r\n                    throw this.error;\r\n                }\r\n                return newImport;\r\n            }\r\n            else if (this.root) {\r\n                ruleset = new Ruleset(null, copyArray(this.root.rules));\r\n                ruleset.evalImports(context);\r\n                return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        }\r\n    });\n\n    var JsEvalNode = function () { };\r\n    JsEvalNode.prototype = Object.assign(new Node(), {\r\n        evaluateJavaScript: function (expression, context) {\r\n            var result;\r\n            var that = this;\r\n            var evalContext = {};\r\n            if (!context.javascriptEnabled) {\r\n                throw { message: 'Inline JavaScript is not enabled. Is it set in your options?',\r\n                    filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n            expression = expression.replace(/@\\{([\\w-]+)\\}/g, function (_, name) {\r\n                return that.jsify(new Variable(\"@\" + name, that.getIndex(), that.fileInfo()).eval(context));\r\n            });\r\n            try {\r\n                expression = new Function(\"return (\" + expression + \")\");\r\n            }\r\n            catch (e) {\r\n                throw { message: \"JavaScript evaluation error: \" + e.message + \" from `\" + expression + \"`\", filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n            var variables = context.frames[0].variables();\r\n            for (var k in variables) {\r\n                if (variables.hasOwnProperty(k)) {\r\n                    /* jshint loopfunc:true */\r\n                    evalContext[k.slice(1)] = {\r\n                        value: variables[k].value,\r\n                        toJS: function () {\r\n                            return this.value.eval(context).toCSS();\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n            try {\r\n                result = expression.call(evalContext);\r\n            }\r\n            catch (e) {\r\n                throw { message: \"JavaScript evaluation error: '\" + e.name + \": \" + e.message.replace(/[\"]/g, '\\'') + \"'\", filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n            return result;\r\n        },\r\n        jsify: function (obj) {\r\n            if (Array.isArray(obj.value) && (obj.value.length > 1)) {\r\n                return \"[\" + obj.value.map(function (v) { return v.toCSS(); }).join(', ') + \"]\";\r\n            }\r\n            else {\r\n                return obj.toCSS();\r\n            }\r\n        }\r\n    });\n\n    var JavaScript = function (string, escaped, index, currentFileInfo) {\r\n        this.escaped = escaped;\r\n        this.expression = string;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n    };\r\n    JavaScript.prototype = Object.assign(new JsEvalNode(), {\r\n        type: 'JavaScript',\r\n        eval: function (context) {\r\n            var result = this.evaluateJavaScript(this.expression, context);\r\n            var type = typeof result;\r\n            if (type === 'number' && !isNaN(result)) {\r\n                return new Dimension(result);\r\n            }\r\n            else if (type === 'string') {\r\n                return new Quoted(\"\\\"\" + result + \"\\\"\", result, this.escaped, this._index);\r\n            }\r\n            else if (Array.isArray(result)) {\r\n                return new Anonymous(result.join(', '));\r\n            }\r\n            else {\r\n                return new Anonymous(result);\r\n            }\r\n        }\r\n    });\n\n    var Assignment = function (key, val) {\r\n        this.key = key;\r\n        this.value = val;\r\n    };\r\n    Assignment.prototype = Object.assign(new Node(), {\r\n        type: 'Assignment',\r\n        accept: function (visitor) {\r\n            this.value = visitor.visit(this.value);\r\n        },\r\n        eval: function (context) {\r\n            if (this.value.eval) {\r\n                return new Assignment(this.key, this.value.eval(context));\r\n            }\r\n            return this;\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add(this.key + \"=\");\r\n            if (this.value.genCSS) {\r\n                this.value.genCSS(context, output);\r\n            }\r\n            else {\r\n                output.add(this.value);\r\n            }\r\n        }\r\n    });\n\n    var Condition = function (op, l, r, i, negate) {\r\n        this.op = op.trim();\r\n        this.lvalue = l;\r\n        this.rvalue = r;\r\n        this._index = i;\r\n        this.negate = negate;\r\n    };\r\n    Condition.prototype = Object.assign(new Node(), {\r\n        type: 'Condition',\r\n        accept: function (visitor) {\r\n            this.lvalue = visitor.visit(this.lvalue);\r\n            this.rvalue = visitor.visit(this.rvalue);\r\n        },\r\n        eval: function (context) {\r\n            var result = (function (op, a, b) {\r\n                switch (op) {\r\n                    case 'and': return a && b;\r\n                    case 'or': return a || b;\r\n                    default:\r\n                        switch (Node.compare(a, b)) {\r\n                            case -1:\r\n                                return op === '<' || op === '=<' || op === '<=';\r\n                            case 0:\r\n                                return op === '=' || op === '>=' || op === '=<' || op === '<=';\r\n                            case 1:\r\n                                return op === '>' || op === '>=';\r\n                            default:\r\n                                return false;\r\n                        }\r\n                }\r\n            })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\r\n            return this.negate ? !result : result;\r\n        }\r\n    });\n\n    var UnicodeDescriptor = function (value) {\r\n        this.value = value;\r\n    };\r\n    UnicodeDescriptor.prototype = Object.assign(new Node(), {\r\n        type: 'UnicodeDescriptor'\r\n    });\n\n    var Negative = function (node) {\r\n        this.value = node;\r\n    };\r\n    Negative.prototype = Object.assign(new Node(), {\r\n        type: 'Negative',\r\n        genCSS: function (context, output) {\r\n            output.add('-');\r\n            this.value.genCSS(context, output);\r\n        },\r\n        eval: function (context) {\r\n            if (context.isMathOn()) {\r\n                return (new Operation('*', [new Dimension(-1), this.value])).eval(context);\r\n            }\r\n            return new Negative(this.value.eval(context));\r\n        }\r\n    });\n\n    var Extend = function (selector, option, index, currentFileInfo, visibilityInfo) {\r\n        this.selector = selector;\r\n        this.option = option;\r\n        this.object_id = Extend.next_id++;\r\n        this.parent_ids = [this.object_id];\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.allowRoot = true;\r\n        switch (option) {\r\n            case 'all':\r\n                this.allowBefore = true;\r\n                this.allowAfter = true;\r\n                break;\r\n            default:\r\n                this.allowBefore = false;\r\n                this.allowAfter = false;\r\n                break;\r\n        }\r\n        this.setParent(this.selector, this);\r\n    };\r\n    Extend.prototype = Object.assign(new Node(), {\r\n        type: 'Extend',\r\n        accept: function (visitor) {\r\n            this.selector = visitor.visit(this.selector);\r\n        },\r\n        eval: function (context) {\r\n            return new Extend(this.selector.eval(context), this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\r\n        },\r\n        clone: function (context) {\r\n            return new Extend(this.selector, this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\r\n        },\r\n        // it concatenates (joins) all selectors in selector array\r\n        findSelfSelectors: function (selectors) {\r\n            var selfElements = [], i, selectorElements;\r\n            for (i = 0; i < selectors.length; i++) {\r\n                selectorElements = selectors[i].elements;\r\n                // duplicate the logic in genCSS function inside the selector node.\r\n                // future TODO - move both logics into the selector joiner visitor\r\n                if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {\r\n                    selectorElements[0].combinator.value = ' ';\r\n                }\r\n                selfElements = selfElements.concat(selectors[i].elements);\r\n            }\r\n            this.selfSelectors = [new Selector(selfElements)];\r\n            this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\r\n        }\r\n    });\r\n    Extend.next_id = 0;\n\n    var VariableCall = function (variable, index, currentFileInfo) {\r\n        this.variable = variable;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.allowRoot = true;\r\n    };\r\n    VariableCall.prototype = Object.assign(new Node(), {\r\n        type: 'VariableCall',\r\n        eval: function (context) {\r\n            var rules;\r\n            var detachedRuleset = new Variable(this.variable, this.getIndex(), this.fileInfo()).eval(context);\r\n            var error = new LessError({ message: \"Could not evaluate variable call \" + this.variable });\r\n            if (!detachedRuleset.ruleset) {\r\n                if (detachedRuleset.rules) {\r\n                    rules = detachedRuleset;\r\n                }\r\n                else if (Array.isArray(detachedRuleset)) {\r\n                    rules = new Ruleset('', detachedRuleset);\r\n                }\r\n                else if (Array.isArray(detachedRuleset.value)) {\r\n                    rules = new Ruleset('', detachedRuleset.value);\r\n                }\r\n                else {\r\n                    throw error;\r\n                }\r\n                detachedRuleset = new DetachedRuleset(rules);\r\n            }\r\n            if (detachedRuleset.ruleset) {\r\n                return detachedRuleset.callEval(context);\r\n            }\r\n            throw error;\r\n        }\r\n    });\n\n    var NamespaceValue = function (ruleCall, lookups, index, fileInfo) {\r\n        this.value = ruleCall;\r\n        this.lookups = lookups;\r\n        this._index = index;\r\n        this._fileInfo = fileInfo;\r\n    };\r\n    NamespaceValue.prototype = Object.assign(new Node(), {\r\n        type: 'NamespaceValue',\r\n        eval: function (context) {\r\n            var i, name, rules = this.value.eval(context);\r\n            for (i = 0; i < this.lookups.length; i++) {\r\n                name = this.lookups[i];\r\n                /**\r\n                 * Eval'd DRs return rulesets.\r\n                 * Eval'd mixins return rules, so let's make a ruleset if we need it.\r\n                 * We need to do this because of late parsing of values\r\n                 */\r\n                if (Array.isArray(rules)) {\r\n                    rules = new Ruleset([new Selector()], rules);\r\n                }\r\n                if (name === '') {\r\n                    rules = rules.lastDeclaration();\r\n                }\r\n                else if (name.charAt(0) === '@') {\r\n                    if (name.charAt(1) === '@') {\r\n                        name = \"@\" + new Variable(name.substr(1)).eval(context).value;\r\n                    }\r\n                    if (rules.variables) {\r\n                        rules = rules.variable(name);\r\n                    }\r\n                    if (!rules) {\r\n                        throw { type: 'Name', message: \"variable \" + name + \" not found\", filename: this.fileInfo().filename,\r\n                            index: this.getIndex() };\r\n                    }\r\n                }\r\n                else {\r\n                    if (name.substring(0, 2) === '$@') {\r\n                        name = \"$\" + new Variable(name.substr(1)).eval(context).value;\r\n                    }\r\n                    else {\r\n                        name = name.charAt(0) === '$' ? name : \"$\" + name;\r\n                    }\r\n                    if (rules.properties) {\r\n                        rules = rules.property(name);\r\n                    }\r\n                    if (!rules) {\r\n                        throw { type: 'Name', message: \"property \\\"\" + name.substr(1) + \"\\\" not found\", filename: this.fileInfo().filename,\r\n                            index: this.getIndex() };\r\n                    }\r\n                    // Properties are an array of values, since a ruleset can have multiple props.\r\n                    // We pick the last one (the \"cascaded\" value)\r\n                    rules = rules[rules.length - 1];\r\n                }\r\n                if (rules.value) {\r\n                    rules = rules.eval(context).value;\r\n                }\r\n                if (rules.ruleset) {\r\n                    rules = rules.ruleset.eval(context);\r\n                }\r\n            }\r\n            return rules;\r\n        }\r\n    });\n\n    var Definition = function (name, params, rules, condition, variadic, frames, visibilityInfo) {\r\n        this.name = name || 'anonymous mixin';\r\n        this.selectors = [new Selector([new Element(null, name, false, this._index, this._fileInfo)])];\r\n        this.params = params;\r\n        this.condition = condition;\r\n        this.variadic = variadic;\r\n        this.arity = params.length;\r\n        this.rules = rules;\r\n        this._lookups = {};\r\n        var optionalParameters = [];\r\n        this.required = params.reduce(function (count, p) {\r\n            if (!p.name || (p.name && !p.value)) {\r\n                return count + 1;\r\n            }\r\n            else {\r\n                optionalParameters.push(p.name);\r\n                return count;\r\n            }\r\n        }, 0);\r\n        this.optionalParameters = optionalParameters;\r\n        this.frames = frames;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.allowRoot = true;\r\n    };\r\n    Definition.prototype = Object.assign(new Ruleset(), {\r\n        type: 'MixinDefinition',\r\n        evalFirst: true,\r\n        accept: function (visitor) {\r\n            if (this.params && this.params.length) {\r\n                this.params = visitor.visitArray(this.params);\r\n            }\r\n            this.rules = visitor.visitArray(this.rules);\r\n            if (this.condition) {\r\n                this.condition = visitor.visit(this.condition);\r\n            }\r\n        },\r\n        evalParams: function (context, mixinEnv, args, evaldArguments) {\r\n            /* jshint boss:true */\r\n            var frame = new Ruleset(null, null);\r\n            var varargs;\r\n            var arg;\r\n            var params = copyArray(this.params);\r\n            var i;\r\n            var j;\r\n            var val;\r\n            var name;\r\n            var isNamedFound;\r\n            var argIndex;\r\n            var argsLength = 0;\r\n            if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\r\n                frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\r\n            }\r\n            mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\r\n            if (args) {\r\n                args = copyArray(args);\r\n                argsLength = args.length;\r\n                for (i = 0; i < argsLength; i++) {\r\n                    arg = args[i];\r\n                    if (name = (arg && arg.name)) {\r\n                        isNamedFound = false;\r\n                        for (j = 0; j < params.length; j++) {\r\n                            if (!evaldArguments[j] && name === params[j].name) {\r\n                                evaldArguments[j] = arg.value.eval(context);\r\n                                frame.prependRule(new Declaration(name, arg.value.eval(context)));\r\n                                isNamedFound = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isNamedFound) {\r\n                            args.splice(i, 1);\r\n                            i--;\r\n                            continue;\r\n                        }\r\n                        else {\r\n                            throw { type: 'Runtime', message: \"Named argument for \" + this.name + \" \" + args[i].name + \" not found\" };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            argIndex = 0;\r\n            for (i = 0; i < params.length; i++) {\r\n                if (evaldArguments[i]) {\r\n                    continue;\r\n                }\r\n                arg = args && args[argIndex];\r\n                if (name = params[i].name) {\r\n                    if (params[i].variadic) {\r\n                        varargs = [];\r\n                        for (j = argIndex; j < argsLength; j++) {\r\n                            varargs.push(args[j].value.eval(context));\r\n                        }\r\n                        frame.prependRule(new Declaration(name, new Expression(varargs).eval(context)));\r\n                    }\r\n                    else {\r\n                        val = arg && arg.value;\r\n                        if (val) {\r\n                            // This was a mixin call, pass in a detached ruleset of it's eval'd rules\r\n                            if (Array.isArray(val)) {\r\n                                val = new DetachedRuleset(new Ruleset('', val));\r\n                            }\r\n                            else {\r\n                                val = val.eval(context);\r\n                            }\r\n                        }\r\n                        else if (params[i].value) {\r\n                            val = params[i].value.eval(mixinEnv);\r\n                            frame.resetCache();\r\n                        }\r\n                        else {\r\n                            throw { type: 'Runtime', message: \"wrong number of arguments for \" + this.name + \" (\" + argsLength + \" for \" + this.arity + \")\" };\r\n                        }\r\n                        frame.prependRule(new Declaration(name, val));\r\n                        evaldArguments[i] = val;\r\n                    }\r\n                }\r\n                if (params[i].variadic && args) {\r\n                    for (j = argIndex; j < argsLength; j++) {\r\n                        evaldArguments[j] = args[j].value.eval(context);\r\n                    }\r\n                }\r\n                argIndex++;\r\n            }\r\n            return frame;\r\n        },\r\n        makeImportant: function () {\r\n            var rules = !this.rules ? this.rules : this.rules.map(function (r) {\r\n                if (r.makeImportant) {\r\n                    return r.makeImportant(true);\r\n                }\r\n                else {\r\n                    return r;\r\n                }\r\n            });\r\n            var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\r\n            return result;\r\n        },\r\n        eval: function (context) {\r\n            return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || copyArray(context.frames));\r\n        },\r\n        evalCall: function (context, args, important) {\r\n            var _arguments = [];\r\n            var mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames;\r\n            var frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments);\r\n            var rules;\r\n            var ruleset;\r\n            frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context)));\r\n            rules = copyArray(this.rules);\r\n            ruleset = new Ruleset(null, rules);\r\n            ruleset.originalRuleset = this;\r\n            ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));\r\n            if (important) {\r\n                ruleset = ruleset.makeImportant();\r\n            }\r\n            return ruleset;\r\n        },\r\n        matchCondition: function (args, context) {\r\n            if (this.condition && !this.condition.eval(new contexts.Eval(context, [this.evalParams(context, /* the parameter variables */ new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])]\r\n                .concat(this.frames || []) // the parent namespace/mixin frames\r\n                .concat(context.frames)))) { // the current environment frames\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        matchArgs: function (args, context) {\r\n            var allArgsCnt = (args && args.length) || 0;\r\n            var len;\r\n            var optionalParameters = this.optionalParameters;\r\n            var requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {\r\n                if (optionalParameters.indexOf(p.name) < 0) {\r\n                    return count + 1;\r\n                }\r\n                else {\r\n                    return count;\r\n                }\r\n            }, 0);\r\n            if (!this.variadic) {\r\n                if (requiredArgsCnt < this.required) {\r\n                    return false;\r\n                }\r\n                if (allArgsCnt > this.params.length) {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (requiredArgsCnt < (this.required - 1)) {\r\n                    return false;\r\n                }\r\n            }\r\n            // check patterns\r\n            len = Math.min(requiredArgsCnt, this.arity);\r\n            for (var i = 0; i < len; i++) {\r\n                if (!this.params[i].name && !this.params[i].variadic) {\r\n                    if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    });\n\n    var MixinCall = function (elements, args, index, currentFileInfo, important) {\r\n        this.selector = new Selector(elements);\r\n        this.arguments = args || [];\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.important = important;\r\n        this.allowRoot = true;\r\n        this.setParent(this.selector, this);\r\n    };\r\n    MixinCall.prototype = Object.assign(new Node(), {\r\n        type: 'MixinCall',\r\n        accept: function (visitor) {\r\n            if (this.selector) {\r\n                this.selector = visitor.visit(this.selector);\r\n            }\r\n            if (this.arguments.length) {\r\n                this.arguments = visitor.visitArray(this.arguments);\r\n            }\r\n        },\r\n        eval: function (context) {\r\n            var mixins;\r\n            var mixin;\r\n            var mixinPath;\r\n            var args = [];\r\n            var arg;\r\n            var argValue;\r\n            var rules = [];\r\n            var match = false;\r\n            var i;\r\n            var m;\r\n            var f;\r\n            var isRecursive;\r\n            var isOneFound;\r\n            var candidates = [];\r\n            var candidate;\r\n            var conditionResult = [];\r\n            var defaultResult;\r\n            var defFalseEitherCase = -1;\r\n            var defNone = 0;\r\n            var defTrue = 1;\r\n            var defFalse = 2;\r\n            var count;\r\n            var originalRuleset;\r\n            var noArgumentsFilter;\r\n            this.selector = this.selector.eval(context);\r\n            function calcDefGroup(mixin, mixinPath) {\r\n                var f, p, namespace;\r\n                for (f = 0; f < 2; f++) {\r\n                    conditionResult[f] = true;\r\n                    defaultFunc.value(f);\r\n                    for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\r\n                        namespace = mixinPath[p];\r\n                        if (namespace.matchCondition) {\r\n                            conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);\r\n                        }\r\n                    }\r\n                    if (mixin.matchCondition) {\r\n                        conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);\r\n                    }\r\n                }\r\n                if (conditionResult[0] || conditionResult[1]) {\r\n                    if (conditionResult[0] != conditionResult[1]) {\r\n                        return conditionResult[1] ?\r\n                            defTrue : defFalse;\r\n                    }\r\n                    return defNone;\r\n                }\r\n                return defFalseEitherCase;\r\n            }\r\n            for (i = 0; i < this.arguments.length; i++) {\r\n                arg = this.arguments[i];\r\n                argValue = arg.value.eval(context);\r\n                if (arg.expand && Array.isArray(argValue.value)) {\r\n                    argValue = argValue.value;\r\n                    for (m = 0; m < argValue.length; m++) {\r\n                        args.push({ value: argValue[m] });\r\n                    }\r\n                }\r\n                else {\r\n                    args.push({ name: arg.name, value: argValue });\r\n                }\r\n            }\r\n            noArgumentsFilter = function (rule) { return rule.matchArgs(null, context); };\r\n            for (i = 0; i < context.frames.length; i++) {\r\n                if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {\r\n                    isOneFound = true;\r\n                    // To make `default()` function independent of definition order we have two \"subpasses\" here.\r\n                    // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\r\n                    // and build candidate list with corresponding flags. Then, when we know all possible matches,\r\n                    // we make a final decision.\r\n                    for (m = 0; m < mixins.length; m++) {\r\n                        mixin = mixins[m].rule;\r\n                        mixinPath = mixins[m].path;\r\n                        isRecursive = false;\r\n                        for (f = 0; f < context.frames.length; f++) {\r\n                            if ((!(mixin instanceof Definition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {\r\n                                isRecursive = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isRecursive) {\r\n                            continue;\r\n                        }\r\n                        if (mixin.matchArgs(args, context)) {\r\n                            candidate = { mixin: mixin, group: calcDefGroup(mixin, mixinPath) };\r\n                            if (candidate.group !== defFalseEitherCase) {\r\n                                candidates.push(candidate);\r\n                            }\r\n                            match = true;\r\n                        }\r\n                    }\r\n                    defaultFunc.reset();\r\n                    count = [0, 0, 0];\r\n                    for (m = 0; m < candidates.length; m++) {\r\n                        count[candidates[m].group]++;\r\n                    }\r\n                    if (count[defNone] > 0) {\r\n                        defaultResult = defFalse;\r\n                    }\r\n                    else {\r\n                        defaultResult = defTrue;\r\n                        if ((count[defTrue] + count[defFalse]) > 1) {\r\n                            throw { type: 'Runtime', message: \"Ambiguous use of `default()` found when matching for `\" + this.format(args) + \"`\", index: this.getIndex(), filename: this.fileInfo().filename };\r\n                        }\r\n                    }\r\n                    for (m = 0; m < candidates.length; m++) {\r\n                        candidate = candidates[m].group;\r\n                        if ((candidate === defNone) || (candidate === defaultResult)) {\r\n                            try {\r\n                                mixin = candidates[m].mixin;\r\n                                if (!(mixin instanceof Definition)) {\r\n                                    originalRuleset = mixin.originalRuleset || mixin;\r\n                                    mixin = new Definition('', [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());\r\n                                    mixin.originalRuleset = originalRuleset;\r\n                                }\r\n                                var newRules = mixin.evalCall(context, args, this.important).rules;\r\n                                this._setVisibilityToReplacement(newRules);\r\n                                Array.prototype.push.apply(rules, newRules);\r\n                            }\r\n                            catch (e) {\r\n                                throw { message: e.message, index: this.getIndex(), filename: this.fileInfo().filename, stack: e.stack };\r\n                            }\r\n                        }\r\n                    }\r\n                    if (match) {\r\n                        return rules;\r\n                    }\r\n                }\r\n            }\r\n            if (isOneFound) {\r\n                throw { type: 'Runtime', message: \"No matching definition was found for `\" + this.format(args) + \"`\", index: this.getIndex(), filename: this.fileInfo().filename };\r\n            }\r\n            else {\r\n                throw { type: 'Name', message: this.selector.toCSS().trim() + \" is undefined\", index: this.getIndex(), filename: this.fileInfo().filename };\r\n            }\r\n        },\r\n        _setVisibilityToReplacement: function (replacement) {\r\n            var i, rule;\r\n            if (this.blocksVisibility()) {\r\n                for (i = 0; i < replacement.length; i++) {\r\n                    rule = replacement[i];\r\n                    rule.addVisibilityBlock();\r\n                }\r\n            }\r\n        },\r\n        format: function (args) {\r\n            return this.selector.toCSS().trim() + \"(\" + (args ? args.map(function (a) {\r\n                var argValue = '';\r\n                if (a.name) {\r\n                    argValue += a.name + \":\";\r\n                }\r\n                if (a.value.toCSS) {\r\n                    argValue += a.value.toCSS();\r\n                }\r\n                else {\r\n                    argValue += '???';\r\n                }\r\n                return argValue;\r\n            }).join(', ') : '') + \")\";\r\n        }\r\n    });\n\n    var tree = {\r\n        Node: Node, Color: Color, AtRule: AtRule, DetachedRuleset: DetachedRuleset, Operation: Operation,\r\n        Dimension: Dimension, Unit: Unit, Keyword: Keyword, Variable: Variable, Property: Property,\r\n        Ruleset: Ruleset, Element: Element, Attribute: Attribute, Combinator: Combinator, Selector: Selector,\r\n        Quoted: Quoted, Expression: Expression, Declaration: Declaration, Call: Call, URL: URL, Import: Import,\r\n        Comment: Comment, Anonymous: Anonymous, Value: Value, JavaScript: JavaScript, Assignment: Assignment,\r\n        Condition: Condition, Paren: Paren, Media: Media, UnicodeDescriptor: UnicodeDescriptor, Negative: Negative,\r\n        Extend: Extend, VariableCall: VariableCall, NamespaceValue: NamespaceValue,\r\n        mixin: {\r\n            Call: MixinCall,\r\n            Definition: Definition\r\n        }\r\n    };\n\n    var AbstractFileManager = /** @class */ (function () {\r\n        function AbstractFileManager() {\r\n        }\r\n        AbstractFileManager.prototype.getPath = function (filename) {\r\n            var j = filename.lastIndexOf('?');\r\n            if (j > 0) {\r\n                filename = filename.slice(0, j);\r\n            }\r\n            j = filename.lastIndexOf('/');\r\n            if (j < 0) {\r\n                j = filename.lastIndexOf('\\\\');\r\n            }\r\n            if (j < 0) {\r\n                return '';\r\n            }\r\n            return filename.slice(0, j + 1);\r\n        };\r\n        AbstractFileManager.prototype.tryAppendExtension = function (path, ext) {\r\n            return /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext;\r\n        };\r\n        AbstractFileManager.prototype.tryAppendLessExtension = function (path) {\r\n            return this.tryAppendExtension(path, '.less');\r\n        };\r\n        AbstractFileManager.prototype.supportsSync = function () {\r\n            return false;\r\n        };\r\n        AbstractFileManager.prototype.alwaysMakePathsAbsolute = function () {\r\n            return false;\r\n        };\r\n        AbstractFileManager.prototype.isPathAbsolute = function (filename) {\r\n            return (/^(?:[a-z-]+:|\\/|\\\\|#)/i).test(filename);\r\n        };\r\n        // TODO: pull out / replace?\r\n        AbstractFileManager.prototype.join = function (basePath, laterPath) {\r\n            if (!basePath) {\r\n                return laterPath;\r\n            }\r\n            return basePath + laterPath;\r\n        };\r\n        AbstractFileManager.prototype.pathDiff = function (url, baseUrl) {\r\n            // diff between two paths to create a relative path\r\n            var urlParts = this.extractUrlParts(url);\r\n            var baseUrlParts = this.extractUrlParts(baseUrl);\r\n            var i;\r\n            var max;\r\n            var urlDirectories;\r\n            var baseUrlDirectories;\r\n            var diff = '';\r\n            if (urlParts.hostPart !== baseUrlParts.hostPart) {\r\n                return '';\r\n            }\r\n            max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);\r\n            for (i = 0; i < max; i++) {\r\n                if (baseUrlParts.directories[i] !== urlParts.directories[i]) {\r\n                    break;\r\n                }\r\n            }\r\n            baseUrlDirectories = baseUrlParts.directories.slice(i);\r\n            urlDirectories = urlParts.directories.slice(i);\r\n            for (i = 0; i < baseUrlDirectories.length - 1; i++) {\r\n                diff += '../';\r\n            }\r\n            for (i = 0; i < urlDirectories.length - 1; i++) {\r\n                diff += urlDirectories[i] + \"/\";\r\n            }\r\n            return diff;\r\n        };\r\n        // helper function, not part of API\r\n        AbstractFileManager.prototype.extractUrlParts = function (url, baseUrl) {\r\n            // urlParts[1] = protocol://hostname/ OR /\r\n            // urlParts[2] = / if path relative to host base\r\n            // urlParts[3] = directories\r\n            // urlParts[4] = filename\r\n            // urlParts[5] = parameters\r\n            var urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i;\r\n            var urlParts = url.match(urlPartsRegex);\r\n            var returner = {};\r\n            var rawDirectories = [];\r\n            var directories = [];\r\n            var i;\r\n            var baseUrlParts;\r\n            if (!urlParts) {\r\n                throw new Error(\"Could not parse sheet href - '\" + url + \"'\");\r\n            }\r\n            // Stylesheets in IE don't always return the full path\r\n            if (baseUrl && (!urlParts[1] || urlParts[2])) {\r\n                baseUrlParts = baseUrl.match(urlPartsRegex);\r\n                if (!baseUrlParts) {\r\n                    throw new Error(\"Could not parse page url - '\" + baseUrl + \"'\");\r\n                }\r\n                urlParts[1] = urlParts[1] || baseUrlParts[1] || '';\r\n                if (!urlParts[2]) {\r\n                    urlParts[3] = baseUrlParts[3] + urlParts[3];\r\n                }\r\n            }\r\n            if (urlParts[3]) {\r\n                rawDirectories = urlParts[3].replace(/\\\\/g, '/').split('/');\r\n                // collapse '..' and skip '.'\r\n                for (i = 0; i < rawDirectories.length; i++) {\r\n                    if (rawDirectories[i] === '..') {\r\n                        directories.pop();\r\n                    }\r\n                    else if (rawDirectories[i] !== '.') {\r\n                        directories.push(rawDirectories[i]);\r\n                    }\r\n                }\r\n            }\r\n            returner.hostPart = urlParts[1];\r\n            returner.directories = directories;\r\n            returner.rawPath = (urlParts[1] || '') + rawDirectories.join('/');\r\n            returner.path = (urlParts[1] || '') + directories.join('/');\r\n            returner.filename = urlParts[4];\r\n            returner.fileUrl = returner.path + (urlParts[4] || '');\r\n            returner.url = returner.fileUrl + (urlParts[5] || '');\r\n            return returner;\r\n        };\r\n        return AbstractFileManager;\r\n    }());\n\n    var AbstractPluginLoader = /** @class */ (function () {\r\n        function AbstractPluginLoader() {\r\n            // Implemented by Node.js plugin loader\r\n            this.require = function () {\r\n                return null;\r\n            };\r\n        }\r\n        AbstractPluginLoader.prototype.evalPlugin = function (contents, context, imports, pluginOptions, fileInfo) {\r\n            var loader, registry, pluginObj, localModule, pluginManager, filename, result;\r\n            pluginManager = context.pluginManager;\r\n            if (fileInfo) {\r\n                if (typeof fileInfo === 'string') {\r\n                    filename = fileInfo;\r\n                }\r\n                else {\r\n                    filename = fileInfo.filename;\r\n                }\r\n            }\r\n            var shortname = (new this.less.FileManager()).extractUrlParts(filename).filename;\r\n            if (filename) {\r\n                pluginObj = pluginManager.get(filename);\r\n                if (pluginObj) {\r\n                    result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\r\n                    if (result) {\r\n                        return result;\r\n                    }\r\n                    try {\r\n                        if (pluginObj.use) {\r\n                            pluginObj.use.call(this.context, pluginObj);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        e.message = e.message || 'Error during @plugin call';\r\n                        return new LessError(e, imports, filename);\r\n                    }\r\n                    return pluginObj;\r\n                }\r\n            }\r\n            localModule = {\r\n                exports: {},\r\n                pluginManager: pluginManager,\r\n                fileInfo: fileInfo\r\n            };\r\n            registry = functionRegistry.create();\r\n            var registerPlugin = function (obj) {\r\n                pluginObj = obj;\r\n            };\r\n            try {\r\n                loader = new Function('module', 'require', 'registerPlugin', 'functions', 'tree', 'less', 'fileInfo', contents);\r\n                loader(localModule, this.require(filename), registerPlugin, registry, this.less.tree, this.less, fileInfo);\r\n            }\r\n            catch (e) {\r\n                return new LessError(e, imports, filename);\r\n            }\r\n            if (!pluginObj) {\r\n                pluginObj = localModule.exports;\r\n            }\r\n            pluginObj = this.validatePlugin(pluginObj, filename, shortname);\r\n            if (pluginObj instanceof LessError) {\r\n                return pluginObj;\r\n            }\r\n            if (pluginObj) {\r\n                pluginObj.imports = imports;\r\n                pluginObj.filename = filename;\r\n                // For < 3.x (or unspecified minVersion) - setOptions() before install()\r\n                if (!pluginObj.minVersion || this.compareVersion('3.0.0', pluginObj.minVersion) < 0) {\r\n                    result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\r\n                    if (result) {\r\n                        return result;\r\n                    }\r\n                }\r\n                // Run on first load\r\n                pluginManager.addPlugin(pluginObj, fileInfo.filename, registry);\r\n                pluginObj.functions = registry.getLocalFunctions();\r\n                // Need to call setOptions again because the pluginObj might have functions\r\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n                // Run every @plugin call\r\n                try {\r\n                    if (pluginObj.use) {\r\n                        pluginObj.use.call(this.context, pluginObj);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    e.message = e.message || 'Error during @plugin call';\r\n                    return new LessError(e, imports, filename);\r\n                }\r\n            }\r\n            else {\r\n                return new LessError({ message: 'Not a valid plugin' }, imports, filename);\r\n            }\r\n            return pluginObj;\r\n        };\r\n        AbstractPluginLoader.prototype.trySetOptions = function (plugin, filename, name, options) {\r\n            if (options && !plugin.setOptions) {\r\n                return new LessError({\r\n                    message: \"Options have been provided but the plugin \" + name + \" does not support any options.\"\r\n                });\r\n            }\r\n            try {\r\n                plugin.setOptions && plugin.setOptions(options);\r\n            }\r\n            catch (e) {\r\n                return new LessError(e);\r\n            }\r\n        };\r\n        AbstractPluginLoader.prototype.validatePlugin = function (plugin, filename, name) {\r\n            if (plugin) {\r\n                // support plugins being a function\r\n                // so that the plugin can be more usable programmatically\r\n                if (typeof plugin === 'function') {\r\n                    plugin = new plugin();\r\n                }\r\n                if (plugin.minVersion) {\r\n                    if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {\r\n                        return new LessError({\r\n                            message: \"Plugin \" + name + \" requires version \" + this.versionToString(plugin.minVersion)\r\n                        });\r\n                    }\r\n                }\r\n                return plugin;\r\n            }\r\n            return null;\r\n        };\r\n        AbstractPluginLoader.prototype.compareVersion = function (aVersion, bVersion) {\r\n            if (typeof aVersion === 'string') {\r\n                aVersion = aVersion.match(/^(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\r\n                aVersion.shift();\r\n            }\r\n            for (var i = 0; i < aVersion.length; i++) {\r\n                if (aVersion[i] !== bVersion[i]) {\r\n                    return parseInt(aVersion[i]) > parseInt(bVersion[i]) ? -1 : 1;\r\n                }\r\n            }\r\n            return 0;\r\n        };\r\n        AbstractPluginLoader.prototype.versionToString = function (version) {\r\n            var versionString = '';\r\n            for (var i = 0; i < version.length; i++) {\r\n                versionString += (versionString ? '.' : '') + version[i];\r\n            }\r\n            return versionString;\r\n        };\r\n        AbstractPluginLoader.prototype.printUsage = function (plugins) {\r\n            for (var i = 0; i < plugins.length; i++) {\r\n                var plugin = plugins[i];\r\n                if (plugin.printUsage) {\r\n                    plugin.printUsage();\r\n                }\r\n            }\r\n        };\r\n        return AbstractPluginLoader;\r\n    }());\n\n    var _visitArgs = { visitDeeper: true };\r\n    var _hasIndexed = false;\r\n    function _noop(node) {\r\n        return node;\r\n    }\r\n    function indexNodeTypes(parent, ticker) {\r\n        // add .typeIndex to tree node types for lookup table\r\n        var key, child;\r\n        for (key in parent) {\r\n            /* eslint guard-for-in: 0 */\r\n            child = parent[key];\r\n            switch (typeof child) {\r\n                case 'function':\r\n                    // ignore bound functions directly on tree which do not have a prototype\r\n                    // or aren't nodes\r\n                    if (child.prototype && child.prototype.type) {\r\n                        child.prototype.typeIndex = ticker++;\r\n                    }\r\n                    break;\r\n                case 'object':\r\n                    ticker = indexNodeTypes(child, ticker);\r\n                    break;\r\n            }\r\n        }\r\n        return ticker;\r\n    }\r\n    var Visitor = /** @class */ (function () {\r\n        function Visitor(implementation) {\r\n            this._implementation = implementation;\r\n            this._visitInCache = {};\r\n            this._visitOutCache = {};\r\n            if (!_hasIndexed) {\r\n                indexNodeTypes(tree, 1);\r\n                _hasIndexed = true;\r\n            }\r\n        }\r\n        Visitor.prototype.visit = function (node) {\r\n            if (!node) {\r\n                return node;\r\n            }\r\n            var nodeTypeIndex = node.typeIndex;\r\n            if (!nodeTypeIndex) {\r\n                // MixinCall args aren't a node type?\r\n                if (node.value && node.value.typeIndex) {\r\n                    this.visit(node.value);\r\n                }\r\n                return node;\r\n            }\r\n            var impl = this._implementation;\r\n            var func = this._visitInCache[nodeTypeIndex];\r\n            var funcOut = this._visitOutCache[nodeTypeIndex];\r\n            var visitArgs = _visitArgs;\r\n            var fnName;\r\n            visitArgs.visitDeeper = true;\r\n            if (!func) {\r\n                fnName = \"visit\" + node.type;\r\n                func = impl[fnName] || _noop;\r\n                funcOut = impl[fnName + \"Out\"] || _noop;\r\n                this._visitInCache[nodeTypeIndex] = func;\r\n                this._visitOutCache[nodeTypeIndex] = funcOut;\r\n            }\r\n            if (func !== _noop) {\r\n                var newNode = func.call(impl, node, visitArgs);\r\n                if (node && impl.isReplacing) {\r\n                    node = newNode;\r\n                }\r\n            }\r\n            if (visitArgs.visitDeeper && node) {\r\n                if (node.length) {\r\n                    for (var i = 0, cnt = node.length; i < cnt; i++) {\r\n                        if (node[i].accept) {\r\n                            node[i].accept(this);\r\n                        }\r\n                    }\r\n                }\r\n                else if (node.accept) {\r\n                    node.accept(this);\r\n                }\r\n            }\r\n            if (funcOut != _noop) {\r\n                funcOut.call(impl, node);\r\n            }\r\n            return node;\r\n        };\r\n        Visitor.prototype.visitArray = function (nodes, nonReplacing) {\r\n            if (!nodes) {\r\n                return nodes;\r\n            }\r\n            var cnt = nodes.length;\r\n            var i;\r\n            // Non-replacing\r\n            if (nonReplacing || !this._implementation.isReplacing) {\r\n                for (i = 0; i < cnt; i++) {\r\n                    this.visit(nodes[i]);\r\n                }\r\n                return nodes;\r\n            }\r\n            // Replacing\r\n            var out = [];\r\n            for (i = 0; i < cnt; i++) {\r\n                var evald = this.visit(nodes[i]);\r\n                if (evald === undefined) {\r\n                    continue;\r\n                }\r\n                if (!evald.splice) {\r\n                    out.push(evald);\r\n                }\r\n                else if (evald.length) {\r\n                    this.flatten(evald, out);\r\n                }\r\n            }\r\n            return out;\r\n        };\r\n        Visitor.prototype.flatten = function (arr, out) {\r\n            if (!out) {\r\n                out = [];\r\n            }\r\n            var cnt, i, item, nestedCnt, j, nestedItem;\r\n            for (i = 0, cnt = arr.length; i < cnt; i++) {\r\n                item = arr[i];\r\n                if (item === undefined) {\r\n                    continue;\r\n                }\r\n                if (!item.splice) {\r\n                    out.push(item);\r\n                    continue;\r\n                }\r\n                for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\r\n                    nestedItem = item[j];\r\n                    if (nestedItem === undefined) {\r\n                        continue;\r\n                    }\r\n                    if (!nestedItem.splice) {\r\n                        out.push(nestedItem);\r\n                    }\r\n                    else if (nestedItem.length) {\r\n                        this.flatten(nestedItem, out);\r\n                    }\r\n                }\r\n            }\r\n            return out;\r\n        };\r\n        return Visitor;\r\n    }());\n\n    var ImportSequencer = /** @class */ (function () {\r\n        function ImportSequencer(onSequencerEmpty) {\r\n            this.imports = [];\r\n            this.variableImports = [];\r\n            this._onSequencerEmpty = onSequencerEmpty;\r\n            this._currentDepth = 0;\r\n        }\r\n        ImportSequencer.prototype.addImport = function (callback) {\r\n            var importSequencer = this, importItem = {\r\n                callback: callback,\r\n                args: null,\r\n                isReady: false\r\n            };\r\n            this.imports.push(importItem);\r\n            return function () {\r\n                importItem.args = Array.prototype.slice.call(arguments, 0);\r\n                importItem.isReady = true;\r\n                importSequencer.tryRun();\r\n            };\r\n        };\r\n        ImportSequencer.prototype.addVariableImport = function (callback) {\r\n            this.variableImports.push(callback);\r\n        };\r\n        ImportSequencer.prototype.tryRun = function () {\r\n            this._currentDepth++;\r\n            try {\r\n                while (true) {\r\n                    while (this.imports.length > 0) {\r\n                        var importItem = this.imports[0];\r\n                        if (!importItem.isReady) {\r\n                            return;\r\n                        }\r\n                        this.imports = this.imports.slice(1);\r\n                        importItem.callback.apply(null, importItem.args);\r\n                    }\r\n                    if (this.variableImports.length === 0) {\r\n                        break;\r\n                    }\r\n                    var variableImport = this.variableImports[0];\r\n                    this.variableImports = this.variableImports.slice(1);\r\n                    variableImport();\r\n                }\r\n            }\r\n            finally {\r\n                this._currentDepth--;\r\n            }\r\n            if (this._currentDepth === 0 && this._onSequencerEmpty) {\r\n                this._onSequencerEmpty();\r\n            }\r\n        };\r\n        return ImportSequencer;\r\n    }());\n\n    var ImportVisitor = function (importer, finish) {\r\n        this._visitor = new Visitor(this);\r\n        this._importer = importer;\r\n        this._finish = finish;\r\n        this.context = new contexts.Eval();\r\n        this.importCount = 0;\r\n        this.onceFileDetectionMap = {};\r\n        this.recursionDetector = {};\r\n        this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));\r\n    };\r\n    ImportVisitor.prototype = {\r\n        isReplacing: false,\r\n        run: function (root) {\r\n            try {\r\n                // process the contents\r\n                this._visitor.visit(root);\r\n            }\r\n            catch (e) {\r\n                this.error = e;\r\n            }\r\n            this.isFinished = true;\r\n            this._sequencer.tryRun();\r\n        },\r\n        _onSequencerEmpty: function () {\r\n            if (!this.isFinished) {\r\n                return;\r\n            }\r\n            this._finish(this.error);\r\n        },\r\n        visitImport: function (importNode, visitArgs) {\r\n            var inlineCSS = importNode.options.inline;\r\n            if (!importNode.css || inlineCSS) {\r\n                var context = new contexts.Eval(this.context, copyArray(this.context.frames));\r\n                var importParent = context.frames[0];\r\n                this.importCount++;\r\n                if (importNode.isVariableImport()) {\r\n                    this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));\r\n                }\r\n                else {\r\n                    this.processImportNode(importNode, context, importParent);\r\n                }\r\n            }\r\n            visitArgs.visitDeeper = false;\r\n        },\r\n        processImportNode: function (importNode, context, importParent) {\r\n            var evaldImportNode;\r\n            var inlineCSS = importNode.options.inline;\r\n            try {\r\n                evaldImportNode = importNode.evalForImport(context);\r\n            }\r\n            catch (e) {\r\n                if (!e.filename) {\r\n                    e.index = importNode.getIndex();\r\n                    e.filename = importNode.fileInfo().filename;\r\n                }\r\n                // attempt to eval properly and treat as css\r\n                importNode.css = true;\r\n                // if that fails, this error will be thrown\r\n                importNode.error = e;\r\n            }\r\n            if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\r\n                if (evaldImportNode.options.multiple) {\r\n                    context.importMultiple = true;\r\n                }\r\n                // try appending if we haven't determined if it is css or not\r\n                var tryAppendLessExtension = evaldImportNode.css === undefined;\r\n                for (var i = 0; i < importParent.rules.length; i++) {\r\n                    if (importParent.rules[i] === importNode) {\r\n                        importParent.rules[i] = evaldImportNode;\r\n                        break;\r\n                    }\r\n                }\r\n                var onImported = this.onImported.bind(this, evaldImportNode, context), sequencedOnImported = this._sequencer.addImport(onImported);\r\n                this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.fileInfo(), evaldImportNode.options, sequencedOnImported);\r\n            }\r\n            else {\r\n                this.importCount--;\r\n                if (this.isFinished) {\r\n                    this._sequencer.tryRun();\r\n                }\r\n            }\r\n        },\r\n        onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {\r\n            if (e) {\r\n                if (!e.filename) {\r\n                    e.index = importNode.getIndex();\r\n                    e.filename = importNode.fileInfo().filename;\r\n                }\r\n                this.error = e;\r\n            }\r\n            var importVisitor = this, inlineCSS = importNode.options.inline, isPlugin = importNode.options.isPlugin, isOptional = importNode.options.optional, duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;\r\n            if (!context.importMultiple) {\r\n                if (duplicateImport) {\r\n                    importNode.skip = true;\r\n                }\r\n                else {\r\n                    importNode.skip = function () {\r\n                        if (fullPath in importVisitor.onceFileDetectionMap) {\r\n                            return true;\r\n                        }\r\n                        importVisitor.onceFileDetectionMap[fullPath] = true;\r\n                        return false;\r\n                    };\r\n                }\r\n            }\r\n            if (!fullPath && isOptional) {\r\n                importNode.skip = true;\r\n            }\r\n            if (root) {\r\n                importNode.root = root;\r\n                importNode.importedFilename = fullPath;\r\n                if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {\r\n                    importVisitor.recursionDetector[fullPath] = true;\r\n                    var oldContext = this.context;\r\n                    this.context = context;\r\n                    try {\r\n                        this._visitor.visit(root);\r\n                    }\r\n                    catch (e) {\r\n                        this.error = e;\r\n                    }\r\n                    this.context = oldContext;\r\n                }\r\n            }\r\n            importVisitor.importCount--;\r\n            if (importVisitor.isFinished) {\r\n                importVisitor._sequencer.tryRun();\r\n            }\r\n        },\r\n        visitDeclaration: function (declNode, visitArgs) {\r\n            if (declNode.value.type === 'DetachedRuleset') {\r\n                this.context.frames.unshift(declNode);\r\n            }\r\n            else {\r\n                visitArgs.visitDeeper = false;\r\n            }\r\n        },\r\n        visitDeclarationOut: function (declNode) {\r\n            if (declNode.value.type === 'DetachedRuleset') {\r\n                this.context.frames.shift();\r\n            }\r\n        },\r\n        visitAtRule: function (atRuleNode, visitArgs) {\r\n            this.context.frames.unshift(atRuleNode);\r\n        },\r\n        visitAtRuleOut: function (atRuleNode) {\r\n            this.context.frames.shift();\r\n        },\r\n        visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\r\n            this.context.frames.unshift(mixinDefinitionNode);\r\n        },\r\n        visitMixinDefinitionOut: function (mixinDefinitionNode) {\r\n            this.context.frames.shift();\r\n        },\r\n        visitRuleset: function (rulesetNode, visitArgs) {\r\n            this.context.frames.unshift(rulesetNode);\r\n        },\r\n        visitRulesetOut: function (rulesetNode) {\r\n            this.context.frames.shift();\r\n        },\r\n        visitMedia: function (mediaNode, visitArgs) {\r\n            this.context.frames.unshift(mediaNode.rules[0]);\r\n        },\r\n        visitMediaOut: function (mediaNode) {\r\n            this.context.frames.shift();\r\n        }\r\n    };\n\n    var SetTreeVisibilityVisitor = /** @class */ (function () {\r\n        function SetTreeVisibilityVisitor(visible) {\r\n            this.visible = visible;\r\n        }\r\n        SetTreeVisibilityVisitor.prototype.run = function (root) {\r\n            this.visit(root);\r\n        };\r\n        SetTreeVisibilityVisitor.prototype.visitArray = function (nodes) {\r\n            if (!nodes) {\r\n                return nodes;\r\n            }\r\n            var cnt = nodes.length;\r\n            var i;\r\n            for (i = 0; i < cnt; i++) {\r\n                this.visit(nodes[i]);\r\n            }\r\n            return nodes;\r\n        };\r\n        SetTreeVisibilityVisitor.prototype.visit = function (node) {\r\n            if (!node) {\r\n                return node;\r\n            }\r\n            if (node.constructor === Array) {\r\n                return this.visitArray(node);\r\n            }\r\n            if (!node.blocksVisibility || node.blocksVisibility()) {\r\n                return node;\r\n            }\r\n            if (this.visible) {\r\n                node.ensureVisibility();\r\n            }\r\n            else {\r\n                node.ensureInvisibility();\r\n            }\r\n            node.accept(this);\r\n            return node;\r\n        };\r\n        return SetTreeVisibilityVisitor;\r\n    }());\n\n    /* jshint loopfunc:true */\r\n    var ExtendFinderVisitor = /** @class */ (function () {\r\n        function ExtendFinderVisitor() {\r\n            this._visitor = new Visitor(this);\r\n            this.contexts = [];\r\n            this.allExtendsStack = [[]];\r\n        }\r\n        ExtendFinderVisitor.prototype.run = function (root) {\r\n            root = this._visitor.visit(root);\r\n            root.allExtends = this.allExtendsStack[0];\r\n            return root;\r\n        };\r\n        ExtendFinderVisitor.prototype.visitDeclaration = function (declNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        ExtendFinderVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        ExtendFinderVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\r\n            if (rulesetNode.root) {\r\n                return;\r\n            }\r\n            var i;\r\n            var j;\r\n            var extend;\r\n            var allSelectorsExtendList = [];\r\n            var extendList;\r\n            // get &:extend(.a); rules which apply to all selectors in this ruleset\r\n            var rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;\r\n            for (i = 0; i < ruleCnt; i++) {\r\n                if (rulesetNode.rules[i] instanceof tree.Extend) {\r\n                    allSelectorsExtendList.push(rules[i]);\r\n                    rulesetNode.extendOnEveryPath = true;\r\n                }\r\n            }\r\n            // now find every selector and apply the extends that apply to all extends\r\n            // and the ones which apply to an individual extend\r\n            var paths = rulesetNode.paths;\r\n            for (i = 0; i < paths.length; i++) {\r\n                var selectorPath = paths[i], selector = selectorPath[selectorPath.length - 1], selExtendList = selector.extendList;\r\n                extendList = selExtendList ? copyArray(selExtendList).concat(allSelectorsExtendList)\r\n                    : allSelectorsExtendList;\r\n                if (extendList) {\r\n                    extendList = extendList.map(function (allSelectorsExtend) {\r\n                        return allSelectorsExtend.clone();\r\n                    });\r\n                }\r\n                for (j = 0; j < extendList.length; j++) {\r\n                    this.foundExtends = true;\r\n                    extend = extendList[j];\r\n                    extend.findSelfSelectors(selectorPath);\r\n                    extend.ruleset = rulesetNode;\r\n                    if (j === 0) {\r\n                        extend.firstExtendOnThisSelectorPath = true;\r\n                    }\r\n                    this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\r\n                }\r\n            }\r\n            this.contexts.push(rulesetNode.selectors);\r\n        };\r\n        ExtendFinderVisitor.prototype.visitRulesetOut = function (rulesetNode) {\r\n            if (!rulesetNode.root) {\r\n                this.contexts.length = this.contexts.length - 1;\r\n            }\r\n        };\r\n        ExtendFinderVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\r\n            mediaNode.allExtends = [];\r\n            this.allExtendsStack.push(mediaNode.allExtends);\r\n        };\r\n        ExtendFinderVisitor.prototype.visitMediaOut = function (mediaNode) {\r\n            this.allExtendsStack.length = this.allExtendsStack.length - 1;\r\n        };\r\n        ExtendFinderVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\r\n            atRuleNode.allExtends = [];\r\n            this.allExtendsStack.push(atRuleNode.allExtends);\r\n        };\r\n        ExtendFinderVisitor.prototype.visitAtRuleOut = function (atRuleNode) {\r\n            this.allExtendsStack.length = this.allExtendsStack.length - 1;\r\n        };\r\n        return ExtendFinderVisitor;\r\n    }());\r\n    var ProcessExtendsVisitor = /** @class */ (function () {\r\n        function ProcessExtendsVisitor() {\r\n            this._visitor = new Visitor(this);\r\n        }\r\n        ProcessExtendsVisitor.prototype.run = function (root) {\r\n            var extendFinder = new ExtendFinderVisitor();\r\n            this.extendIndices = {};\r\n            extendFinder.run(root);\r\n            if (!extendFinder.foundExtends) {\r\n                return root;\r\n            }\r\n            root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\r\n            this.allExtendsStack = [root.allExtends];\r\n            var newRoot = this._visitor.visit(root);\r\n            this.checkExtendsForNonMatched(root.allExtends);\r\n            return newRoot;\r\n        };\r\n        ProcessExtendsVisitor.prototype.checkExtendsForNonMatched = function (extendList) {\r\n            var indices = this.extendIndices;\r\n            extendList.filter(function (extend) {\r\n                return !extend.hasFoundMatches && extend.parent_ids.length == 1;\r\n            }).forEach(function (extend) {\r\n                var selector = '_unknown_';\r\n                try {\r\n                    selector = extend.selector.toCSS({});\r\n                }\r\n                catch (_) { }\r\n                if (!indices[extend.index + \" \" + selector]) {\r\n                    indices[extend.index + \" \" + selector] = true;\r\n                    logger.warn(\"extend '\" + selector + \"' has no matches\");\r\n                }\r\n            });\r\n        };\r\n        ProcessExtendsVisitor.prototype.doExtendChaining = function (extendsList, extendsListTarget, iterationCount) {\r\n            //\r\n            // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\r\n            // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\r\n            // this means this new extend can then go and alter other extends\r\n            //\r\n            // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\r\n            // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\r\n            // processed if we look at each selector at a time, as is done in visitRuleset\r\n            var extendIndex;\r\n            var targetExtendIndex;\r\n            var matches;\r\n            var extendsToAdd = [];\r\n            var newSelector;\r\n            var extendVisitor = this;\r\n            var selectorPath;\r\n            var extend;\r\n            var targetExtend;\r\n            var newExtend;\r\n            iterationCount = iterationCount || 0;\r\n            // loop through comparing every extend with every target extend.\r\n            // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\r\n            // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\r\n            // and the second is the target.\r\n            // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\r\n            // case when processing media queries\r\n            for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\r\n                for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\r\n                    extend = extendsList[extendIndex];\r\n                    targetExtend = extendsListTarget[targetExtendIndex];\r\n                    // look for circular references\r\n                    if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {\r\n                        continue;\r\n                    }\r\n                    // find a match in the target extends self selector (the bit before :extend)\r\n                    selectorPath = [targetExtend.selfSelectors[0]];\r\n                    matches = extendVisitor.findMatch(extend, selectorPath);\r\n                    if (matches.length) {\r\n                        extend.hasFoundMatches = true;\r\n                        // we found a match, so for each self selector..\r\n                        extend.selfSelectors.forEach(function (selfSelector) {\r\n                            var info = targetExtend.visibilityInfo();\r\n                            // process the extend as usual\r\n                            newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\r\n                            // but now we create a new extend from it\r\n                            newExtend = new (tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\r\n                            newExtend.selfSelectors = newSelector;\r\n                            // add the extend onto the list of extends for that selector\r\n                            newSelector[newSelector.length - 1].extendList = [newExtend];\r\n                            // record that we need to add it.\r\n                            extendsToAdd.push(newExtend);\r\n                            newExtend.ruleset = targetExtend.ruleset;\r\n                            // remember its parents for circular references\r\n                            newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\r\n                            // only process the selector once.. if we have :extend(.a,.b) then multiple\r\n                            // extends will look at the same selector path, so when extending\r\n                            // we know that any others will be duplicates in terms of what is added to the css\r\n                            if (targetExtend.firstExtendOnThisSelectorPath) {\r\n                                newExtend.firstExtendOnThisSelectorPath = true;\r\n                                targetExtend.ruleset.paths.push(newSelector);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            if (extendsToAdd.length) {\r\n                // try to detect circular references to stop a stack overflow.\r\n                // may no longer be needed.\r\n                this.extendChainCount++;\r\n                if (iterationCount > 100) {\r\n                    var selectorOne = '{unable to calculate}';\r\n                    var selectorTwo = '{unable to calculate}';\r\n                    try {\r\n                        selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\r\n                        selectorTwo = extendsToAdd[0].selector.toCSS();\r\n                    }\r\n                    catch (e) { }\r\n                    throw { message: \"extend circular reference detected. One of the circular extends is currently:\" + selectorOne + \":extend(\" + selectorTwo + \")\" };\r\n                }\r\n                // now process the new extends on the existing rules so that we can handle a extending b extending c extending\r\n                // d extending e...\r\n                return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\r\n            }\r\n            else {\r\n                return extendsToAdd;\r\n            }\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitDeclaration = function (ruleNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitSelector = function (selectorNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\r\n            if (rulesetNode.root) {\r\n                return;\r\n            }\r\n            var matches;\r\n            var pathIndex;\r\n            var extendIndex;\r\n            var allExtends = this.allExtendsStack[this.allExtendsStack.length - 1];\r\n            var selectorsToAdd = [];\r\n            var extendVisitor = this;\r\n            var selectorPath;\r\n            // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\r\n            for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\r\n                for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\r\n                    selectorPath = rulesetNode.paths[pathIndex];\r\n                    // extending extends happens initially, before the main pass\r\n                    if (rulesetNode.extendOnEveryPath) {\r\n                        continue;\r\n                    }\r\n                    var extendList = selectorPath[selectorPath.length - 1].extendList;\r\n                    if (extendList && extendList.length) {\r\n                        continue;\r\n                    }\r\n                    matches = this.findMatch(allExtends[extendIndex], selectorPath);\r\n                    if (matches.length) {\r\n                        allExtends[extendIndex].hasFoundMatches = true;\r\n                        allExtends[extendIndex].selfSelectors.forEach(function (selfSelector) {\r\n                            var extendedSelectors;\r\n                            extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\r\n                            selectorsToAdd.push(extendedSelectors);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\r\n        };\r\n        ProcessExtendsVisitor.prototype.findMatch = function (extend, haystackSelectorPath) {\r\n            //\r\n            // look through the haystack selector path to try and find the needle - extend.selector\r\n            // returns an array of selector matches that can then be replaced\r\n            //\r\n            var haystackSelectorIndex;\r\n            var hackstackSelector;\r\n            var hackstackElementIndex;\r\n            var haystackElement;\r\n            var targetCombinator;\r\n            var i;\r\n            var extendVisitor = this;\r\n            var needleElements = extend.selector.elements;\r\n            var potentialMatches = [];\r\n            var potentialMatch;\r\n            var matches = [];\r\n            // loop through the haystack elements\r\n            for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\r\n                hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\r\n                for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\r\n                    haystackElement = hackstackSelector.elements[hackstackElementIndex];\r\n                    // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\r\n                    if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\r\n                        potentialMatches.push({ pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\r\n                            initialCombinator: haystackElement.combinator });\r\n                    }\r\n                    for (i = 0; i < potentialMatches.length; i++) {\r\n                        potentialMatch = potentialMatches[i];\r\n                        // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\r\n                        // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\r\n                        // work out what the resulting combinator will be\r\n                        targetCombinator = haystackElement.combinator.value;\r\n                        if (targetCombinator === '' && hackstackElementIndex === 0) {\r\n                            targetCombinator = ' ';\r\n                        }\r\n                        // if we don't match, null our match to indicate failure\r\n                        if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\r\n                            (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\r\n                            potentialMatch = null;\r\n                        }\r\n                        else {\r\n                            potentialMatch.matched++;\r\n                        }\r\n                        // if we are still valid and have finished, test whether we have elements after and whether these are allowed\r\n                        if (potentialMatch) {\r\n                            potentialMatch.finished = potentialMatch.matched === needleElements.length;\r\n                            if (potentialMatch.finished &&\r\n                                (!extend.allowAfter &&\r\n                                    (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\r\n                                potentialMatch = null;\r\n                            }\r\n                        }\r\n                        // if null we remove, if not, we are still valid, so either push as a valid match or continue\r\n                        if (potentialMatch) {\r\n                            if (potentialMatch.finished) {\r\n                                potentialMatch.length = needleElements.length;\r\n                                potentialMatch.endPathIndex = haystackSelectorIndex;\r\n                                potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\r\n                                potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\r\n                                matches.push(potentialMatch);\r\n                            }\r\n                        }\r\n                        else {\r\n                            potentialMatches.splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return matches;\r\n        };\r\n        ProcessExtendsVisitor.prototype.isElementValuesEqual = function (elementValue1, elementValue2) {\r\n            if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\r\n                return elementValue1 === elementValue2;\r\n            }\r\n            if (elementValue1 instanceof tree.Attribute) {\r\n                if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\r\n                    return false;\r\n                }\r\n                if (!elementValue1.value || !elementValue2.value) {\r\n                    if (elementValue1.value || elementValue2.value) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                elementValue1 = elementValue1.value.value || elementValue1.value;\r\n                elementValue2 = elementValue2.value.value || elementValue2.value;\r\n                return elementValue1 === elementValue2;\r\n            }\r\n            elementValue1 = elementValue1.value;\r\n            elementValue2 = elementValue2.value;\r\n            if (elementValue1 instanceof tree.Selector) {\r\n                if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\r\n                    return false;\r\n                }\r\n                for (var i = 0; i < elementValue1.elements.length; i++) {\r\n                    if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\r\n                        if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        ProcessExtendsVisitor.prototype.extendSelector = function (matches, selectorPath, replacementSelector, isVisible) {\r\n            // for a set of matches, replace each match with the replacement selector\r\n            var currentSelectorPathIndex = 0, currentSelectorPathElementIndex = 0, path = [], matchIndex, selector, firstElement, match, newElements;\r\n            for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\r\n                match = matches[matchIndex];\r\n                selector = selectorPath[match.pathIndex];\r\n                firstElement = new tree.Element(match.initialCombinator, replacementSelector.elements[0].value, replacementSelector.elements[0].isVariable, replacementSelector.elements[0].getIndex(), replacementSelector.elements[0].fileInfo());\r\n                if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\r\n                    path[path.length - 1].elements = path[path.length - 1]\r\n                        .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\r\n                    currentSelectorPathElementIndex = 0;\r\n                    currentSelectorPathIndex++;\r\n                }\r\n                newElements = selector.elements\r\n                    .slice(currentSelectorPathElementIndex, match.index)\r\n                    .concat([firstElement])\r\n                    .concat(replacementSelector.elements.slice(1));\r\n                if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\r\n                    path[path.length - 1].elements =\r\n                        path[path.length - 1].elements.concat(newElements);\r\n                }\r\n                else {\r\n                    path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\r\n                    path.push(new tree.Selector(newElements));\r\n                }\r\n                currentSelectorPathIndex = match.endPathIndex;\r\n                currentSelectorPathElementIndex = match.endPathElementIndex;\r\n                if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\r\n                    currentSelectorPathElementIndex = 0;\r\n                    currentSelectorPathIndex++;\r\n                }\r\n            }\r\n            if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\r\n                path[path.length - 1].elements = path[path.length - 1]\r\n                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\r\n                currentSelectorPathIndex++;\r\n            }\r\n            path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\r\n            path = path.map(function (currentValue) {\r\n                // we can re-use elements here, because the visibility property matters only for selectors\r\n                var derived = currentValue.createDerived(currentValue.elements);\r\n                if (isVisible) {\r\n                    derived.ensureVisibility();\r\n                }\r\n                else {\r\n                    derived.ensureInvisibility();\r\n                }\r\n                return derived;\r\n            });\r\n            return path;\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\r\n            var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\r\n            newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\r\n            this.allExtendsStack.push(newAllExtends);\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitMediaOut = function (mediaNode) {\r\n            var lastIndex = this.allExtendsStack.length - 1;\r\n            this.allExtendsStack.length = lastIndex;\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\r\n            var newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\r\n            newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\r\n            this.allExtendsStack.push(newAllExtends);\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitAtRuleOut = function (atRuleNode) {\r\n            var lastIndex = this.allExtendsStack.length - 1;\r\n            this.allExtendsStack.length = lastIndex;\r\n        };\r\n        return ProcessExtendsVisitor;\r\n    }());\n\n    var JoinSelectorVisitor = /** @class */ (function () {\r\n        function JoinSelectorVisitor() {\r\n            this.contexts = [[]];\r\n            this._visitor = new Visitor(this);\r\n        }\r\n        JoinSelectorVisitor.prototype.run = function (root) {\r\n            return this._visitor.visit(root);\r\n        };\r\n        JoinSelectorVisitor.prototype.visitDeclaration = function (declNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        JoinSelectorVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        JoinSelectorVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\r\n            var context = this.contexts[this.contexts.length - 1];\r\n            var paths = [];\r\n            var selectors;\r\n            this.contexts.push(paths);\r\n            if (!rulesetNode.root) {\r\n                selectors = rulesetNode.selectors;\r\n                if (selectors) {\r\n                    selectors = selectors.filter(function (selector) { return selector.getIsOutput(); });\r\n                    rulesetNode.selectors = selectors.length ? selectors : (selectors = null);\r\n                    if (selectors) {\r\n                        rulesetNode.joinSelectors(paths, context, selectors);\r\n                    }\r\n                }\r\n                if (!selectors) {\r\n                    rulesetNode.rules = null;\r\n                }\r\n                rulesetNode.paths = paths;\r\n            }\r\n        };\r\n        JoinSelectorVisitor.prototype.visitRulesetOut = function (rulesetNode) {\r\n            this.contexts.length = this.contexts.length - 1;\r\n        };\r\n        JoinSelectorVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\r\n            var context = this.contexts[this.contexts.length - 1];\r\n            mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);\r\n        };\r\n        JoinSelectorVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\r\n            var context = this.contexts[this.contexts.length - 1];\r\n            if (atRuleNode.rules && atRuleNode.rules.length) {\r\n                atRuleNode.rules[0].root = (atRuleNode.isRooted || context.length === 0 || null);\r\n            }\r\n        };\r\n        return JoinSelectorVisitor;\r\n    }());\n\n    var CSSVisitorUtils = /** @class */ (function () {\r\n        function CSSVisitorUtils(context) {\r\n            this._visitor = new Visitor(this);\r\n            this._context = context;\r\n        }\r\n        CSSVisitorUtils.prototype.containsSilentNonBlockedChild = function (bodyRules) {\r\n            var rule;\r\n            if (!bodyRules) {\r\n                return false;\r\n            }\r\n            for (var r = 0; r < bodyRules.length; r++) {\r\n                rule = bodyRules[r];\r\n                if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\r\n                    // the atrule contains something that was referenced (likely by extend)\r\n                    // therefore it needs to be shown in output too\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        CSSVisitorUtils.prototype.keepOnlyVisibleChilds = function (owner) {\r\n            if (owner && owner.rules) {\r\n                owner.rules = owner.rules.filter(function (thing) { return thing.isVisible(); });\r\n            }\r\n        };\r\n        CSSVisitorUtils.prototype.isEmpty = function (owner) {\r\n            return (owner && owner.rules)\r\n                ? (owner.rules.length === 0) : true;\r\n        };\r\n        CSSVisitorUtils.prototype.hasVisibleSelector = function (rulesetNode) {\r\n            return (rulesetNode && rulesetNode.paths)\r\n                ? (rulesetNode.paths.length > 0) : false;\r\n        };\r\n        CSSVisitorUtils.prototype.resolveVisibility = function (node, originalRules) {\r\n            if (!node.blocksVisibility()) {\r\n                if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\r\n                    return;\r\n                }\r\n                return node;\r\n            }\r\n            var compiledRulesBody = node.rules[0];\r\n            this.keepOnlyVisibleChilds(compiledRulesBody);\r\n            if (this.isEmpty(compiledRulesBody)) {\r\n                return;\r\n            }\r\n            node.ensureVisibility();\r\n            node.removeVisibilityBlock();\r\n            return node;\r\n        };\r\n        CSSVisitorUtils.prototype.isVisibleRuleset = function (rulesetNode) {\r\n            if (rulesetNode.firstRoot) {\r\n                return true;\r\n            }\r\n            if (this.isEmpty(rulesetNode)) {\r\n                return false;\r\n            }\r\n            if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        return CSSVisitorUtils;\r\n    }());\r\n    var ToCSSVisitor = function (context) {\r\n        this._visitor = new Visitor(this);\r\n        this._context = context;\r\n        this.utils = new CSSVisitorUtils(context);\r\n    };\r\n    ToCSSVisitor.prototype = {\r\n        isReplacing: true,\r\n        run: function (root) {\r\n            return this._visitor.visit(root);\r\n        },\r\n        visitDeclaration: function (declNode, visitArgs) {\r\n            if (declNode.blocksVisibility() || declNode.variable) {\r\n                return;\r\n            }\r\n            return declNode;\r\n        },\r\n        visitMixinDefinition: function (mixinNode, visitArgs) {\r\n            // mixin definitions do not get eval'd - this means they keep state\r\n            // so we have to clear that state here so it isn't used if toCSS is called twice\r\n            mixinNode.frames = [];\r\n        },\r\n        visitExtend: function (extendNode, visitArgs) {\r\n        },\r\n        visitComment: function (commentNode, visitArgs) {\r\n            if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\r\n                return;\r\n            }\r\n            return commentNode;\r\n        },\r\n        visitMedia: function (mediaNode, visitArgs) {\r\n            var originalRules = mediaNode.rules[0].rules;\r\n            mediaNode.accept(this._visitor);\r\n            visitArgs.visitDeeper = false;\r\n            return this.utils.resolveVisibility(mediaNode, originalRules);\r\n        },\r\n        visitImport: function (importNode, visitArgs) {\r\n            if (importNode.blocksVisibility()) {\r\n                return;\r\n            }\r\n            return importNode;\r\n        },\r\n        visitAtRule: function (atRuleNode, visitArgs) {\r\n            if (atRuleNode.rules && atRuleNode.rules.length) {\r\n                return this.visitAtRuleWithBody(atRuleNode, visitArgs);\r\n            }\r\n            else {\r\n                return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\r\n            }\r\n        },\r\n        visitAnonymous: function (anonymousNode, visitArgs) {\r\n            if (!anonymousNode.blocksVisibility()) {\r\n                anonymousNode.accept(this._visitor);\r\n                return anonymousNode;\r\n            }\r\n        },\r\n        visitAtRuleWithBody: function (atRuleNode, visitArgs) {\r\n            // if there is only one nested ruleset and that one has no path, then it is\r\n            // just fake ruleset\r\n            function hasFakeRuleset(atRuleNode) {\r\n                var bodyRules = atRuleNode.rules;\r\n                return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\r\n            }\r\n            function getBodyRules(atRuleNode) {\r\n                var nodeRules = atRuleNode.rules;\r\n                if (hasFakeRuleset(atRuleNode)) {\r\n                    return nodeRules[0].rules;\r\n                }\r\n                return nodeRules;\r\n            }\r\n            // it is still true that it is only one ruleset in array\r\n            // this is last such moment\r\n            // process childs\r\n            var originalRules = getBodyRules(atRuleNode);\r\n            atRuleNode.accept(this._visitor);\r\n            visitArgs.visitDeeper = false;\r\n            if (!this.utils.isEmpty(atRuleNode)) {\r\n                this._mergeRules(atRuleNode.rules[0].rules);\r\n            }\r\n            return this.utils.resolveVisibility(atRuleNode, originalRules);\r\n        },\r\n        visitAtRuleWithoutBody: function (atRuleNode, visitArgs) {\r\n            if (atRuleNode.blocksVisibility()) {\r\n                return;\r\n            }\r\n            if (atRuleNode.name === '@charset') {\r\n                // Only output the debug info together with subsequent @charset definitions\r\n                // a comment (or @media statement) before the actual @charset atrule would\r\n                // be considered illegal css as it has to be on the first line\r\n                if (this.charset) {\r\n                    if (atRuleNode.debugInfo) {\r\n                        var comment = new tree.Comment(\"/* \" + atRuleNode.toCSS(this._context).replace(/\\n/g, '') + \" */\\n\");\r\n                        comment.debugInfo = atRuleNode.debugInfo;\r\n                        return this._visitor.visit(comment);\r\n                    }\r\n                    return;\r\n                }\r\n                this.charset = true;\r\n            }\r\n            return atRuleNode;\r\n        },\r\n        checkValidNodes: function (rules, isRoot) {\r\n            if (!rules) {\r\n                return;\r\n            }\r\n            for (var i = 0; i < rules.length; i++) {\r\n                var ruleNode = rules[i];\r\n                if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\r\n                    throw { message: 'Properties must be inside selector blocks. They cannot be in the root',\r\n                        index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename };\r\n                }\r\n                if (ruleNode instanceof tree.Call) {\r\n                    throw { message: \"Function '\" + ruleNode.name + \"' did not return a root node\", index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename };\r\n                }\r\n                if (ruleNode.type && !ruleNode.allowRoot) {\r\n                    throw { message: ruleNode.type + \" node returned by a function is not valid here\", index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename };\r\n                }\r\n            }\r\n        },\r\n        visitRuleset: function (rulesetNode, visitArgs) {\r\n            // at this point rulesets are nested into each other\r\n            var rule;\r\n            var rulesets = [];\r\n            this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\r\n            if (!rulesetNode.root) {\r\n                // remove invisible paths\r\n                this._compileRulesetPaths(rulesetNode);\r\n                // remove rulesets from this ruleset body and compile them separately\r\n                var nodeRules = rulesetNode.rules;\r\n                var nodeRuleCnt = nodeRules ? nodeRules.length : 0;\r\n                for (var i = 0; i < nodeRuleCnt;) {\r\n                    rule = nodeRules[i];\r\n                    if (rule && rule.rules) {\r\n                        // visit because we are moving them out from being a child\r\n                        rulesets.push(this._visitor.visit(rule));\r\n                        nodeRules.splice(i, 1);\r\n                        nodeRuleCnt--;\r\n                        continue;\r\n                    }\r\n                    i++;\r\n                }\r\n                // accept the visitor to remove rules and refactor itself\r\n                // then we can decide nogw whether we want it or not\r\n                // compile body\r\n                if (nodeRuleCnt > 0) {\r\n                    rulesetNode.accept(this._visitor);\r\n                }\r\n                else {\r\n                    rulesetNode.rules = null;\r\n                }\r\n                visitArgs.visitDeeper = false;\r\n            }\r\n            else { // if (! rulesetNode.root) {\r\n                rulesetNode.accept(this._visitor);\r\n                visitArgs.visitDeeper = false;\r\n            }\r\n            if (rulesetNode.rules) {\r\n                this._mergeRules(rulesetNode.rules);\r\n                this._removeDuplicateRules(rulesetNode.rules);\r\n            }\r\n            // now decide whether we keep the ruleset\r\n            if (this.utils.isVisibleRuleset(rulesetNode)) {\r\n                rulesetNode.ensureVisibility();\r\n                rulesets.splice(0, 0, rulesetNode);\r\n            }\r\n            if (rulesets.length === 1) {\r\n                return rulesets[0];\r\n            }\r\n            return rulesets;\r\n        },\r\n        _compileRulesetPaths: function (rulesetNode) {\r\n            if (rulesetNode.paths) {\r\n                rulesetNode.paths = rulesetNode.paths\r\n                    .filter(function (p) {\r\n                    var i;\r\n                    if (p[0].elements[0].combinator.value === ' ') {\r\n                        p[0].elements[0].combinator = new (tree.Combinator)('');\r\n                    }\r\n                    for (i = 0; i < p.length; i++) {\r\n                        if (p[i].isVisible() && p[i].getIsOutput()) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n        },\r\n        _removeDuplicateRules: function (rules) {\r\n            if (!rules) {\r\n                return;\r\n            }\r\n            // remove duplicates\r\n            var ruleCache = {};\r\n            var ruleList;\r\n            var rule;\r\n            var i;\r\n            for (i = rules.length - 1; i >= 0; i--) {\r\n                rule = rules[i];\r\n                if (rule instanceof tree.Declaration) {\r\n                    if (!ruleCache[rule.name]) {\r\n                        ruleCache[rule.name] = rule;\r\n                    }\r\n                    else {\r\n                        ruleList = ruleCache[rule.name];\r\n                        if (ruleList instanceof tree.Declaration) {\r\n                            ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\r\n                        }\r\n                        var ruleCSS = rule.toCSS(this._context);\r\n                        if (ruleList.indexOf(ruleCSS) !== -1) {\r\n                            rules.splice(i, 1);\r\n                        }\r\n                        else {\r\n                            ruleList.push(ruleCSS);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        _mergeRules: function (rules) {\r\n            if (!rules) {\r\n                return;\r\n            }\r\n            var groups = {};\r\n            var groupsArr = [];\r\n            for (var i = 0; i < rules.length; i++) {\r\n                var rule = rules[i];\r\n                if (rule.merge) {\r\n                    var key = rule.name;\r\n                    groups[key] ? rules.splice(i--, 1) :\r\n                        groupsArr.push(groups[key] = []);\r\n                    groups[key].push(rule);\r\n                }\r\n            }\r\n            groupsArr.forEach(function (group) {\r\n                if (group.length > 0) {\r\n                    var result_1 = group[0];\r\n                    var space_1 = [];\r\n                    var comma_1 = [new tree.Expression(space_1)];\r\n                    group.forEach(function (rule) {\r\n                        if ((rule.merge === '+') && (space_1.length > 0)) {\r\n                            comma_1.push(new tree.Expression(space_1 = []));\r\n                        }\r\n                        space_1.push(rule.value);\r\n                        result_1.important = result_1.important || rule.important;\r\n                    });\r\n                    result_1.value = new tree.Value(comma_1);\r\n                }\r\n            });\r\n        }\r\n    };\n\n    var visitors = {\r\n        Visitor: Visitor,\r\n        ImportVisitor: ImportVisitor,\r\n        MarkVisibleSelectorsVisitor: SetTreeVisibilityVisitor,\r\n        ExtendVisitor: ProcessExtendsVisitor,\r\n        JoinSelectorVisitor: JoinSelectorVisitor,\r\n        ToCSSVisitor: ToCSSVisitor\r\n    };\n\n    // Split the input into chunks.\r\n    function chunker (input, fail) {\r\n        var len = input.length;\r\n        var level = 0;\r\n        var parenLevel = 0;\r\n        var lastOpening;\r\n        var lastOpeningParen;\r\n        var lastMultiComment;\r\n        var lastMultiCommentEndBrace;\r\n        var chunks = [];\r\n        var emitFrom = 0;\r\n        var chunkerCurrentIndex;\r\n        var currentChunkStartIndex;\r\n        var cc;\r\n        var cc2;\r\n        var matched;\r\n        function emitChunk(force) {\r\n            var len = chunkerCurrentIndex - emitFrom;\r\n            if (((len < 512) && !force) || !len) {\r\n                return;\r\n            }\r\n            chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\r\n            emitFrom = chunkerCurrentIndex + 1;\r\n        }\r\n        for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\r\n            cc = input.charCodeAt(chunkerCurrentIndex);\r\n            if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\r\n                // a-z or whitespace\r\n                continue;\r\n            }\r\n            switch (cc) {\r\n                case 40: // (\r\n                    parenLevel++;\r\n                    lastOpeningParen = chunkerCurrentIndex;\r\n                    continue;\r\n                case 41: // )\r\n                    if (--parenLevel < 0) {\r\n                        return fail('missing opening `(`', chunkerCurrentIndex);\r\n                    }\r\n                    continue;\r\n                case 59: // ;\r\n                    if (!parenLevel) {\r\n                        emitChunk();\r\n                    }\r\n                    continue;\r\n                case 123: // {\r\n                    level++;\r\n                    lastOpening = chunkerCurrentIndex;\r\n                    continue;\r\n                case 125: // }\r\n                    if (--level < 0) {\r\n                        return fail('missing opening `{`', chunkerCurrentIndex);\r\n                    }\r\n                    if (!level && !parenLevel) {\r\n                        emitChunk();\r\n                    }\r\n                    continue;\r\n                case 92: // \\\r\n                    if (chunkerCurrentIndex < len - 1) {\r\n                        chunkerCurrentIndex++;\r\n                        continue;\r\n                    }\r\n                    return fail('unescaped `\\\\`', chunkerCurrentIndex);\r\n                case 34:\r\n                case 39:\r\n                case 96: // \", ' and `\r\n                    matched = 0;\r\n                    currentChunkStartIndex = chunkerCurrentIndex;\r\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\r\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\r\n                        if (cc2 > 96) {\r\n                            continue;\r\n                        }\r\n                        if (cc2 == cc) {\r\n                            matched = 1;\r\n                            break;\r\n                        }\r\n                        if (cc2 == 92) { // \\\r\n                            if (chunkerCurrentIndex == len - 1) {\r\n                                return fail('unescaped `\\\\`', chunkerCurrentIndex);\r\n                            }\r\n                            chunkerCurrentIndex++;\r\n                        }\r\n                    }\r\n                    if (matched) {\r\n                        continue;\r\n                    }\r\n                    return fail(\"unmatched `\" + String.fromCharCode(cc) + \"`\", currentChunkStartIndex);\r\n                case 47: // /, check for comment\r\n                    if (parenLevel || (chunkerCurrentIndex == len - 1)) {\r\n                        continue;\r\n                    }\r\n                    cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\r\n                    if (cc2 == 47) {\r\n                        // //, find lnfeed\r\n                        for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\r\n                            cc2 = input.charCodeAt(chunkerCurrentIndex);\r\n                            if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (cc2 == 42) {\r\n                        // /*, find */\r\n                        lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\r\n                        for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\r\n                            cc2 = input.charCodeAt(chunkerCurrentIndex);\r\n                            if (cc2 == 125) {\r\n                                lastMultiCommentEndBrace = chunkerCurrentIndex;\r\n                            }\r\n                            if (cc2 != 42) {\r\n                                continue;\r\n                            }\r\n                            if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (chunkerCurrentIndex == len - 1) {\r\n                            return fail('missing closing `*/`', currentChunkStartIndex);\r\n                        }\r\n                        chunkerCurrentIndex++;\r\n                    }\r\n                    continue;\r\n                case 42: // *, check for unmatched */\r\n                    if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\r\n                        return fail('unmatched `/*`', chunkerCurrentIndex);\r\n                    }\r\n                    continue;\r\n            }\r\n        }\r\n        if (level !== 0) {\r\n            if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\r\n                return fail('missing closing `}` or `*/`', lastOpening);\r\n            }\r\n            else {\r\n                return fail('missing closing `}`', lastOpening);\r\n            }\r\n        }\r\n        else if (parenLevel !== 0) {\r\n            return fail('missing closing `)`', lastOpeningParen);\r\n        }\r\n        emitChunk(true);\r\n        return chunks;\r\n    }\n\n    var getParserInput = (function () {\r\n        var // Less input string\r\n        input;\r\n        var // current chunk\r\n        j;\r\n        var // holds state for backtracking\r\n        saveStack = [];\r\n        var // furthest index the parser has gone to\r\n        furthest;\r\n        var // if this is furthest we got to, this is the probably cause\r\n        furthestPossibleErrorMessage;\r\n        var // chunkified input\r\n        chunks;\r\n        var // current chunk\r\n        current;\r\n        var // index of current chunk, in `input`\r\n        currentPos;\r\n        var parserInput = {};\r\n        var CHARCODE_SPACE = 32;\r\n        var CHARCODE_TAB = 9;\r\n        var CHARCODE_LF = 10;\r\n        var CHARCODE_CR = 13;\r\n        var CHARCODE_PLUS = 43;\r\n        var CHARCODE_COMMA = 44;\r\n        var CHARCODE_FORWARD_SLASH = 47;\r\n        var CHARCODE_9 = 57;\r\n        function skipWhitespace(length) {\r\n            var oldi = parserInput.i;\r\n            var oldj = j;\r\n            var curr = parserInput.i - currentPos;\r\n            var endIndex = parserInput.i + current.length - curr;\r\n            var mem = (parserInput.i += length);\r\n            var inp = input;\r\n            var c;\r\n            var nextChar;\r\n            var comment;\r\n            for (; parserInput.i < endIndex; parserInput.i++) {\r\n                c = inp.charCodeAt(parserInput.i);\r\n                if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\r\n                    nextChar = inp.charAt(parserInput.i + 1);\r\n                    if (nextChar === '/') {\r\n                        comment = { index: parserInput.i, isLineComment: true };\r\n                        var nextNewLine = inp.indexOf('\\n', parserInput.i + 2);\r\n                        if (nextNewLine < 0) {\r\n                            nextNewLine = endIndex;\r\n                        }\r\n                        parserInput.i = nextNewLine;\r\n                        comment.text = inp.substr(comment.index, parserInput.i - comment.index);\r\n                        parserInput.commentStore.push(comment);\r\n                        continue;\r\n                    }\r\n                    else if (nextChar === '*') {\r\n                        var nextStarSlash = inp.indexOf('*/', parserInput.i + 2);\r\n                        if (nextStarSlash >= 0) {\r\n                            comment = {\r\n                                index: parserInput.i,\r\n                                text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),\r\n                                isLineComment: false\r\n                            };\r\n                            parserInput.i += comment.text.length - 1;\r\n                            parserInput.commentStore.push(comment);\r\n                            continue;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {\r\n                    break;\r\n                }\r\n            }\r\n            current = current.slice(length + parserInput.i - mem + curr);\r\n            currentPos = parserInput.i;\r\n            if (!current.length) {\r\n                if (j < chunks.length - 1) {\r\n                    current = chunks[++j];\r\n                    skipWhitespace(0); // skip space at the beginning of a chunk\r\n                    return true; // things changed\r\n                }\r\n                parserInput.finished = true;\r\n            }\r\n            return oldi !== parserInput.i || oldj !== j;\r\n        }\r\n        parserInput.save = function () {\r\n            currentPos = parserInput.i;\r\n            saveStack.push({ current: current, i: parserInput.i, j: j });\r\n        };\r\n        parserInput.restore = function (possibleErrorMessage) {\r\n            if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {\r\n                furthest = parserInput.i;\r\n                furthestPossibleErrorMessage = possibleErrorMessage;\r\n            }\r\n            var state = saveStack.pop();\r\n            current = state.current;\r\n            currentPos = parserInput.i = state.i;\r\n            j = state.j;\r\n        };\r\n        parserInput.forget = function () {\r\n            saveStack.pop();\r\n        };\r\n        parserInput.isWhitespace = function (offset) {\r\n            var pos = parserInput.i + (offset || 0);\r\n            var code = input.charCodeAt(pos);\r\n            return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);\r\n        };\r\n        // Specialization of $(tok)\r\n        parserInput.$re = function (tok) {\r\n            if (parserInput.i > currentPos) {\r\n                current = current.slice(parserInput.i - currentPos);\r\n                currentPos = parserInput.i;\r\n            }\r\n            var m = tok.exec(current);\r\n            if (!m) {\r\n                return null;\r\n            }\r\n            skipWhitespace(m[0].length);\r\n            if (typeof m === 'string') {\r\n                return m;\r\n            }\r\n            return m.length === 1 ? m[0] : m;\r\n        };\r\n        parserInput.$char = function (tok) {\r\n            if (input.charAt(parserInput.i) !== tok) {\r\n                return null;\r\n            }\r\n            skipWhitespace(1);\r\n            return tok;\r\n        };\r\n        parserInput.$str = function (tok) {\r\n            var tokLength = tok.length;\r\n            // https://jsperf.com/string-startswith/21\r\n            for (var i = 0; i < tokLength; i++) {\r\n                if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\r\n                    return null;\r\n                }\r\n            }\r\n            skipWhitespace(tokLength);\r\n            return tok;\r\n        };\r\n        parserInput.$quoted = function (loc) {\r\n            var pos = loc || parserInput.i;\r\n            var startChar = input.charAt(pos);\r\n            if (startChar !== '\\'' && startChar !== '\"') {\r\n                return;\r\n            }\r\n            var length = input.length;\r\n            var currentPosition = pos;\r\n            for (var i = 1; i + currentPosition < length; i++) {\r\n                var nextChar = input.charAt(i + currentPosition);\r\n                switch (nextChar) {\r\n                    case '\\\\':\r\n                        i++;\r\n                        continue;\r\n                    case '\\r':\r\n                    case '\\n':\r\n                        break;\r\n                    case startChar:\r\n                        var str = input.substr(currentPosition, i + 1);\r\n                        if (!loc && loc !== 0) {\r\n                            skipWhitespace(i + 1);\r\n                            return str;\r\n                        }\r\n                        return [startChar, str];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Permissive parsing. Ignores everything except matching {} [] () and quotes\r\n         * until matching token (outside of blocks)\r\n         */\r\n        parserInput.$parseUntil = function (tok) {\r\n            var quote = '';\r\n            var returnVal = null;\r\n            var inComment = false;\r\n            var blockDepth = 0;\r\n            var blockStack = [];\r\n            var parseGroups = [];\r\n            var length = input.length;\r\n            var startPos = parserInput.i;\r\n            var lastPos = parserInput.i;\r\n            var i = parserInput.i;\r\n            var loop = true;\r\n            var testChar;\r\n            if (typeof tok === 'string') {\r\n                testChar = function (char) { return char === tok; };\r\n            }\r\n            else {\r\n                testChar = function (char) { return tok.test(char); };\r\n            }\r\n            do {\r\n                var nextChar = input.charAt(i);\r\n                if (blockDepth === 0 && testChar(nextChar)) {\r\n                    returnVal = input.substr(lastPos, i - lastPos);\r\n                    if (returnVal) {\r\n                        parseGroups.push(returnVal);\r\n                    }\r\n                    else {\r\n                        parseGroups.push(' ');\r\n                    }\r\n                    returnVal = parseGroups;\r\n                    skipWhitespace(i - startPos);\r\n                    loop = false;\r\n                }\r\n                else {\r\n                    if (inComment) {\r\n                        if (nextChar === '*' &&\r\n                            input.charAt(i + 1) === '/') {\r\n                            i++;\r\n                            blockDepth--;\r\n                            inComment = false;\r\n                        }\r\n                        i++;\r\n                        continue;\r\n                    }\r\n                    switch (nextChar) {\r\n                        case '\\\\':\r\n                            i++;\r\n                            nextChar = input.charAt(i);\r\n                            parseGroups.push(input.substr(lastPos, i - lastPos + 1));\r\n                            lastPos = i + 1;\r\n                            break;\r\n                        case '/':\r\n                            if (input.charAt(i + 1) === '*') {\r\n                                i++;\r\n                                inComment = true;\r\n                                blockDepth++;\r\n                            }\r\n                            break;\r\n                        case '\\'':\r\n                        case '\"':\r\n                            quote = parserInput.$quoted(i);\r\n                            if (quote) {\r\n                                parseGroups.push(input.substr(lastPos, i - lastPos), quote);\r\n                                i += quote[1].length - 1;\r\n                                lastPos = i + 1;\r\n                            }\r\n                            else {\r\n                                skipWhitespace(i - startPos);\r\n                                returnVal = nextChar;\r\n                                loop = false;\r\n                            }\r\n                            break;\r\n                        case '{':\r\n                            blockStack.push('}');\r\n                            blockDepth++;\r\n                            break;\r\n                        case '(':\r\n                            blockStack.push(')');\r\n                            blockDepth++;\r\n                            break;\r\n                        case '[':\r\n                            blockStack.push(']');\r\n                            blockDepth++;\r\n                            break;\r\n                        case '}':\r\n                        case ')':\r\n                        case ']':\r\n                            var expected = blockStack.pop();\r\n                            if (nextChar === expected) {\r\n                                blockDepth--;\r\n                            }\r\n                            else {\r\n                                // move the parser to the error and return expected\r\n                                skipWhitespace(i - startPos);\r\n                                returnVal = expected;\r\n                                loop = false;\r\n                            }\r\n                    }\r\n                    i++;\r\n                    if (i > length) {\r\n                        loop = false;\r\n                    }\r\n                }\r\n            } while (loop);\r\n            return returnVal ? returnVal : null;\r\n        };\r\n        parserInput.autoCommentAbsorb = true;\r\n        parserInput.commentStore = [];\r\n        parserInput.finished = false;\r\n        // Same as $(), but don't change the state of the parser,\r\n        // just return the match.\r\n        parserInput.peek = function (tok) {\r\n            if (typeof tok === 'string') {\r\n                // https://jsperf.com/string-startswith/21\r\n                for (var i = 0; i < tok.length; i++) {\r\n                    if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            else {\r\n                return tok.test(current);\r\n            }\r\n        };\r\n        // Specialization of peek()\r\n        // TODO remove or change some currentChar calls to peekChar\r\n        parserInput.peekChar = function (tok) { return input.charAt(parserInput.i) === tok; };\r\n        parserInput.currentChar = function () { return input.charAt(parserInput.i); };\r\n        parserInput.prevChar = function () { return input.charAt(parserInput.i - 1); };\r\n        parserInput.getInput = function () { return input; };\r\n        parserInput.peekNotNumeric = function () {\r\n            var c = input.charCodeAt(parserInput.i);\r\n            // Is the first char of the dimension 0-9, '.', '+' or '-'\r\n            return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;\r\n        };\r\n        parserInput.start = function (str, chunkInput, failFunction) {\r\n            input = str;\r\n            parserInput.i = j = currentPos = furthest = 0;\r\n            // chunking apparently makes things quicker (but my tests indicate\r\n            // it might actually make things slower in node at least)\r\n            // and it is a non-perfect parse - it can't recognise\r\n            // unquoted urls, meaning it can't distinguish comments\r\n            // meaning comments with quotes or {}() in them get 'counted'\r\n            // and then lead to parse errors.\r\n            // In addition if the chunking chunks in the wrong place we might\r\n            // not be able to parse a parser statement in one go\r\n            // this is officially deprecated but can be switched on via an option\r\n            // in the case it causes too much performance issues.\r\n            if (chunkInput) {\r\n                chunks = chunker(str, failFunction);\r\n            }\r\n            else {\r\n                chunks = [str];\r\n            }\r\n            current = chunks[0];\r\n            skipWhitespace(0);\r\n        };\r\n        parserInput.end = function () {\r\n            var message;\r\n            var isFinished = parserInput.i >= input.length;\r\n            if (parserInput.i < furthest) {\r\n                message = furthestPossibleErrorMessage;\r\n                parserInput.i = furthest;\r\n            }\r\n            return {\r\n                isFinished: isFinished,\r\n                furthest: parserInput.i,\r\n                furthestPossibleErrorMessage: message,\r\n                furthestReachedEnd: parserInput.i >= input.length - 1,\r\n                furthestChar: input[parserInput.i]\r\n            };\r\n        };\r\n        return parserInput;\r\n    });\n\n    //\r\n    // less.js - parser\r\n    //\r\n    //    A relatively straight-forward predictive parser.\r\n    //    There is no tokenization/lexing stage, the input is parsed\r\n    //    in one sweep.\r\n    //\r\n    //    To make the parser fast enough to run in the browser, several\r\n    //    optimization had to be made:\r\n    //\r\n    //    - Matching and slicing on a huge input is often cause of slowdowns.\r\n    //      The solution is to chunkify the input into smaller strings.\r\n    //      The chunks are stored in the `chunks` var,\r\n    //      `j` holds the current chunk index, and `currentPos` holds\r\n    //      the index of the current chunk in relation to `input`.\r\n    //      This gives us an almost 4x speed-up.\r\n    //\r\n    //    - In many cases, we don't need to match individual tokens;\r\n    //      for example, if a value doesn't hold any variables, operations\r\n    //      or dynamic references, the parser can effectively 'skip' it,\r\n    //      treating it as a literal.\r\n    //      An example would be '1px solid #000' - which evaluates to itself,\r\n    //      we don't need to know what the individual components are.\r\n    //      The drawback, of course is that you don't get the benefits of\r\n    //      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\r\n    //      and a smaller speed-up in the code-gen.\r\n    //\r\n    //\r\n    //    Token matching is done with the `$` function, which either takes\r\n    //    a terminal string or regexp, or a non-terminal function to call.\r\n    //    It also takes care of moving all the indices forwards.\r\n    //\r\n    var Parser = function Parser(context, imports, fileInfo) {\r\n        var parsers;\r\n        var parserInput = getParserInput();\r\n        function error(msg, type) {\r\n            throw new LessError({\r\n                index: parserInput.i,\r\n                filename: fileInfo.filename,\r\n                type: type || 'Syntax',\r\n                message: msg\r\n            }, imports);\r\n        }\r\n        function expect(arg, msg) {\r\n            // some older browsers return typeof 'function' for RegExp\r\n            var result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);\r\n            if (result) {\r\n                return result;\r\n            }\r\n            error(msg || (typeof arg === 'string'\r\n                ? \"expected '\" + arg + \"' got '\" + parserInput.currentChar() + \"'\"\r\n                : 'unexpected token'));\r\n        }\r\n        // Specialization of expect()\r\n        function expectChar(arg, msg) {\r\n            if (parserInput.$char(arg)) {\r\n                return arg;\r\n            }\r\n            error(msg || \"expected '\" + arg + \"' got '\" + parserInput.currentChar() + \"'\");\r\n        }\r\n        function getDebugInfo(index) {\r\n            var filename = fileInfo.filename;\r\n            return {\r\n                lineNumber: getLocation(index, parserInput.getInput()).line + 1,\r\n                fileName: filename\r\n            };\r\n        }\r\n        /**\r\n         *  Used after initial parsing to create nodes on the fly\r\n         *\r\n         *  @param {String} str          - string to parse\r\n         *  @param {Array}  parseList    - array of parsers to run input through e.g. [\"value\", \"important\"]\r\n         *  @param {Number} currentIndex - start number to begin indexing\r\n         *  @param {Object} fileInfo     - fileInfo to attach to created nodes\r\n         */\r\n        function parseNode(str, parseList, currentIndex, fileInfo, callback) {\r\n            var result;\r\n            var returnNodes = [];\r\n            var parser = parserInput;\r\n            try {\r\n                parser.start(str, false, function fail(msg, index) {\r\n                    callback({\r\n                        message: msg,\r\n                        index: index + currentIndex\r\n                    });\r\n                });\r\n                for (var x = 0, p = void 0, i = void 0; (p = parseList[x]); x++) {\r\n                    i = parser.i;\r\n                    result = parsers[p]();\r\n                    if (result) {\r\n                        try {\r\n                            result._index = i + currentIndex;\r\n                            result._fileInfo = fileInfo;\r\n                        }\r\n                        catch (e) { }\r\n                        returnNodes.push(result);\r\n                    }\r\n                    else {\r\n                        returnNodes.push(null);\r\n                    }\r\n                }\r\n                var endInfo = parser.end();\r\n                if (endInfo.isFinished) {\r\n                    callback(null, returnNodes);\r\n                }\r\n                else {\r\n                    callback(true, null);\r\n                }\r\n            }\r\n            catch (e) {\r\n                throw new LessError({\r\n                    index: e.index + currentIndex,\r\n                    message: e.message\r\n                }, imports, fileInfo.filename);\r\n            }\r\n        }\r\n        //\r\n        // The Parser\r\n        //\r\n        return {\r\n            parserInput: parserInput,\r\n            imports: imports,\r\n            fileInfo: fileInfo,\r\n            parseNode: parseNode,\r\n            //\r\n            // Parse an input string into an abstract syntax tree,\r\n            // @param str A string containing 'less' markup\r\n            // @param callback call `callback` when done.\r\n            // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\r\n            //\r\n            parse: function (str, callback, additionalData) {\r\n                var root;\r\n                var error = null;\r\n                var globalVars;\r\n                var modifyVars;\r\n                var ignored;\r\n                var preText = '';\r\n                globalVars = (additionalData && additionalData.globalVars) ? Parser.serializeVars(additionalData.globalVars) + \"\\n\" : '';\r\n                modifyVars = (additionalData && additionalData.modifyVars) ? \"\\n\" + Parser.serializeVars(additionalData.modifyVars) : '';\r\n                if (context.pluginManager) {\r\n                    var preProcessors = context.pluginManager.getPreProcessors();\r\n                    for (var i = 0; i < preProcessors.length; i++) {\r\n                        str = preProcessors[i].process(str, { context: context, imports: imports, fileInfo: fileInfo });\r\n                    }\r\n                }\r\n                if (globalVars || (additionalData && additionalData.banner)) {\r\n                    preText = ((additionalData && additionalData.banner) ? additionalData.banner : '') + globalVars;\r\n                    ignored = imports.contentsIgnoredChars;\r\n                    ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;\r\n                    ignored[fileInfo.filename] += preText.length;\r\n                }\r\n                str = str.replace(/\\r\\n?/g, '\\n');\r\n                // Remove potential UTF Byte Order Mark\r\n                str = preText + str.replace(/^\\uFEFF/, '') + modifyVars;\r\n                imports.contents[fileInfo.filename] = str;\r\n                // Start with the primary rule.\r\n                // The whole syntax tree is held under a Ruleset node,\r\n                // with the `root` property set to true, so no `{}` are\r\n                // output. The callback is called when the input is parsed.\r\n                try {\r\n                    parserInput.start(str, context.chunkInput, function fail(msg, index) {\r\n                        throw new LessError({\r\n                            index: index,\r\n                            type: 'Parse',\r\n                            message: msg,\r\n                            filename: fileInfo.filename\r\n                        }, imports);\r\n                    });\r\n                    tree.Node.prototype.parse = this;\r\n                    root = new tree.Ruleset(null, this.parsers.primary());\r\n                    tree.Node.prototype.rootNode = root;\r\n                    root.root = true;\r\n                    root.firstRoot = true;\r\n                    root.functionRegistry = functionRegistry.inherit();\r\n                }\r\n                catch (e) {\r\n                    return callback(new LessError(e, imports, fileInfo.filename));\r\n                }\r\n                // If `i` is smaller than the `input.length - 1`,\r\n                // it means the parser wasn't able to parse the whole\r\n                // string, so we've got a parsing error.\r\n                //\r\n                // We try to extract a \\n delimited string,\r\n                // showing the line where the parse error occurred.\r\n                // We split it up into two parts (the part which parsed,\r\n                // and the part which didn't), so we can color them differently.\r\n                var endInfo = parserInput.end();\r\n                if (!endInfo.isFinished) {\r\n                    var message = endInfo.furthestPossibleErrorMessage;\r\n                    if (!message) {\r\n                        message = 'Unrecognised input';\r\n                        if (endInfo.furthestChar === '}') {\r\n                            message += '. Possibly missing opening \\'{\\'';\r\n                        }\r\n                        else if (endInfo.furthestChar === ')') {\r\n                            message += '. Possibly missing opening \\'(\\'';\r\n                        }\r\n                        else if (endInfo.furthestReachedEnd) {\r\n                            message += '. Possibly missing something';\r\n                        }\r\n                    }\r\n                    error = new LessError({\r\n                        type: 'Parse',\r\n                        message: message,\r\n                        index: endInfo.furthest,\r\n                        filename: fileInfo.filename\r\n                    }, imports);\r\n                }\r\n                var finish = function (e) {\r\n                    e = error || e || imports.error;\r\n                    if (e) {\r\n                        if (!(e instanceof LessError)) {\r\n                            e = new LessError(e, imports, fileInfo.filename);\r\n                        }\r\n                        return callback(e);\r\n                    }\r\n                    else {\r\n                        return callback(null, root);\r\n                    }\r\n                };\r\n                if (context.processImports !== false) {\r\n                    new visitors.ImportVisitor(imports, finish)\r\n                        .run(root);\r\n                }\r\n                else {\r\n                    return finish();\r\n                }\r\n            },\r\n            //\r\n            // Here in, the parsing rules/functions\r\n            //\r\n            // The basic structure of the syntax tree generated is as follows:\r\n            //\r\n            //   Ruleset ->  Declaration -> Value -> Expression -> Entity\r\n            //\r\n            // Here's some Less code:\r\n            //\r\n            //    .class {\r\n            //      color: #fff;\r\n            //      border: 1px solid #000;\r\n            //      width: @w + 4px;\r\n            //      > .child {...}\r\n            //    }\r\n            //\r\n            // And here's what the parse tree might look like:\r\n            //\r\n            //     Ruleset (Selector '.class', [\r\n            //         Declaration (\"color\",  Value ([Expression [Color #fff]]))\r\n            //         Declaration (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\r\n            //         Declaration (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\r\n            //         Ruleset (Selector [Element '>', '.child'], [...])\r\n            //     ])\r\n            //\r\n            //  In general, most rules will try to parse a token with the `$re()` function, and if the return\r\n            //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\r\n            //  first, before parsing, that's when we use `peek()`.\r\n            //\r\n            parsers: parsers = {\r\n                //\r\n                // The `primary` rule is the *entry* and *exit* point of the parser.\r\n                // The rules here can appear at any level of the parse tree.\r\n                //\r\n                // The recursive nature of the grammar is an interplay between the `block`\r\n                // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\r\n                // as represented by this simplified grammar:\r\n                //\r\n                //     primary  →  (ruleset | declaration)+\r\n                //     ruleset  →  selector+ block\r\n                //     block    →  '{' primary '}'\r\n                //\r\n                // Only at one point is the primary rule not called from the\r\n                // block rule: at the root level.\r\n                //\r\n                primary: function () {\r\n                    var mixin = this.mixin;\r\n                    var root = [];\r\n                    var node;\r\n                    while (true) {\r\n                        while (true) {\r\n                            node = this.comment();\r\n                            if (!node) {\r\n                                break;\r\n                            }\r\n                            root.push(node);\r\n                        }\r\n                        // always process comments before deciding if finished\r\n                        if (parserInput.finished) {\r\n                            break;\r\n                        }\r\n                        if (parserInput.peek('}')) {\r\n                            break;\r\n                        }\r\n                        node = this.extendRule();\r\n                        if (node) {\r\n                            root = root.concat(node);\r\n                            continue;\r\n                        }\r\n                        node = mixin.definition() || this.declaration() || mixin.call(false, false) ||\r\n                            this.ruleset() || this.variableCall() || this.entities.call() || this.atrule();\r\n                        if (node) {\r\n                            root.push(node);\r\n                        }\r\n                        else {\r\n                            var foundSemiColon = false;\r\n                            while (parserInput.$char(';')) {\r\n                                foundSemiColon = true;\r\n                            }\r\n                            if (!foundSemiColon) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    return root;\r\n                },\r\n                // comments are collected by the main parsing mechanism and then assigned to nodes\r\n                // where the current structure allows it\r\n                comment: function () {\r\n                    if (parserInput.commentStore.length) {\r\n                        var comment = parserInput.commentStore.shift();\r\n                        return new (tree.Comment)(comment.text, comment.isLineComment, comment.index, fileInfo);\r\n                    }\r\n                },\r\n                //\r\n                // Entities are tokens which can be found inside an Expression\r\n                //\r\n                entities: {\r\n                    mixinLookup: function () {\r\n                        return parsers.mixin.call(true, true);\r\n                    },\r\n                    //\r\n                    // A string, which supports escaping \" and '\r\n                    //\r\n                    //     \"milky way\" 'he\\'s the one!'\r\n                    //\r\n                    quoted: function (forceEscaped) {\r\n                        var str;\r\n                        var index = parserInput.i;\r\n                        var isEscaped = false;\r\n                        parserInput.save();\r\n                        if (parserInput.$char('~')) {\r\n                            isEscaped = true;\r\n                        }\r\n                        else if (forceEscaped) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        str = parserInput.$quoted();\r\n                        if (!str) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        parserInput.forget();\r\n                        return new (tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);\r\n                    },\r\n                    //\r\n                    // A catch-all word, such as:\r\n                    //\r\n                    //     black border-collapse\r\n                    //\r\n                    keyword: function () {\r\n                        var k = parserInput.$char('%') || parserInput.$re(/^\\[?(?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+\\]?/);\r\n                        if (k) {\r\n                            return tree.Color.fromKeyword(k) || new (tree.Keyword)(k);\r\n                        }\r\n                    },\r\n                    //\r\n                    // A function call\r\n                    //\r\n                    //     rgb(255, 0, 255)\r\n                    //\r\n                    // The arguments are parsed with the `entities.arguments` parser.\r\n                    //\r\n                    call: function () {\r\n                        var name;\r\n                        var args;\r\n                        var func;\r\n                        var index = parserInput.i;\r\n                        // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\r\n                        if (parserInput.peek(/^url\\(/i)) {\r\n                            return;\r\n                        }\r\n                        parserInput.save();\r\n                        name = parserInput.$re(/^([\\w-]+|%|~|progid:[\\w\\.]+)\\(/);\r\n                        if (!name) {\r\n                            parserInput.forget();\r\n                            return;\r\n                        }\r\n                        name = name[1];\r\n                        func = this.customFuncCall(name);\r\n                        if (func) {\r\n                            args = func.parse();\r\n                            if (args && func.stop) {\r\n                                parserInput.forget();\r\n                                return args;\r\n                            }\r\n                        }\r\n                        args = this.arguments(args);\r\n                        if (!parserInput.$char(')')) {\r\n                            parserInput.restore('Could not parse call arguments or missing \\')\\'');\r\n                            return;\r\n                        }\r\n                        parserInput.forget();\r\n                        return new (tree.Call)(name, args, index, fileInfo);\r\n                    },\r\n                    //\r\n                    // Parsing rules for functions with non-standard args, e.g.:\r\n                    //\r\n                    //     boolean(not(2 > 1))\r\n                    //\r\n                    //     This is a quick prototype, to be modified/improved when\r\n                    //     more custom-parsed funcs come (e.g. `selector(...)`)\r\n                    //\r\n                    customFuncCall: function (name) {\r\n                        /* Ideally the table is to be moved out of here for faster perf.,\r\n                           but it's quite tricky since it relies on all these `parsers`\r\n                           and `expect` available only here */\r\n                        return {\r\n                            alpha: f(parsers.ieAlpha, true),\r\n                            boolean: f(condition),\r\n                            'if': f(condition)\r\n                        }[name.toLowerCase()];\r\n                        function f(parse, stop) {\r\n                            return {\r\n                                parse: parse,\r\n                                stop: stop // when true - stop after parse() and return its result, \r\n                                // otherwise continue for plain args\r\n                            };\r\n                        }\r\n                        function condition() {\r\n                            return [expect(parsers.condition, 'expected condition')];\r\n                        }\r\n                    },\r\n                    arguments: function (prevArgs) {\r\n                        var argsComma = prevArgs || [];\r\n                        var argsSemiColon = [];\r\n                        var isSemiColonSeparated;\r\n                        var value;\r\n                        parserInput.save();\r\n                        while (true) {\r\n                            if (prevArgs) {\r\n                                prevArgs = false;\r\n                            }\r\n                            else {\r\n                                value = parsers.detachedRuleset() || this.assignment() || parsers.expression();\r\n                                if (!value) {\r\n                                    break;\r\n                                }\r\n                                if (value.value && value.value.length == 1) {\r\n                                    value = value.value[0];\r\n                                }\r\n                                argsComma.push(value);\r\n                            }\r\n                            if (parserInput.$char(',')) {\r\n                                continue;\r\n                            }\r\n                            if (parserInput.$char(';') || isSemiColonSeparated) {\r\n                                isSemiColonSeparated = true;\r\n                                value = (argsComma.length < 1) ? argsComma[0]\r\n                                    : new tree.Value(argsComma);\r\n                                argsSemiColon.push(value);\r\n                                argsComma = [];\r\n                            }\r\n                        }\r\n                        parserInput.forget();\r\n                        return isSemiColonSeparated ? argsSemiColon : argsComma;\r\n                    },\r\n                    literal: function () {\r\n                        return this.dimension() ||\r\n                            this.color() ||\r\n                            this.quoted() ||\r\n                            this.unicodeDescriptor();\r\n                    },\r\n                    // Assignments are argument entities for calls.\r\n                    // They are present in ie filter properties as shown below.\r\n                    //\r\n                    //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\r\n                    //\r\n                    assignment: function () {\r\n                        var key;\r\n                        var value;\r\n                        parserInput.save();\r\n                        key = parserInput.$re(/^\\w+(?=\\s?=)/i);\r\n                        if (!key) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        if (!parserInput.$char('=')) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        value = parsers.entity();\r\n                        if (value) {\r\n                            parserInput.forget();\r\n                            return new (tree.Assignment)(key, value);\r\n                        }\r\n                        else {\r\n                            parserInput.restore();\r\n                        }\r\n                    },\r\n                    //\r\n                    // Parse url() tokens\r\n                    //\r\n                    // We use a specific rule for urls, because they don't really behave like\r\n                    // standard function calls. The difference is that the argument doesn't have\r\n                    // to be enclosed within a string, so it can't be parsed as an Expression.\r\n                    //\r\n                    url: function () {\r\n                        var value;\r\n                        var index = parserInput.i;\r\n                        parserInput.autoCommentAbsorb = false;\r\n                        if (!parserInput.$str('url(')) {\r\n                            parserInput.autoCommentAbsorb = true;\r\n                            return;\r\n                        }\r\n                        value = this.quoted() || this.variable() || this.property() ||\r\n                            parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) || '';\r\n                        parserInput.autoCommentAbsorb = true;\r\n                        expectChar(')');\r\n                        return new (tree.URL)((value.value != null ||\r\n                            value instanceof tree.Variable ||\r\n                            value instanceof tree.Property) ?\r\n                            value : new (tree.Anonymous)(value, index), index, fileInfo);\r\n                    },\r\n                    //\r\n                    // A Variable entity, such as `@fink`, in\r\n                    //\r\n                    //     width: @fink + 2px\r\n                    //\r\n                    // We use a different parser for variable definitions,\r\n                    // see `parsers.variable`.\r\n                    //\r\n                    variable: function () {\r\n                        var ch;\r\n                        var name;\r\n                        var index = parserInput.i;\r\n                        parserInput.save();\r\n                        if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\\w-]+/))) {\r\n                            ch = parserInput.currentChar();\r\n                            if (ch === '(' || ch === '[' && !parserInput.prevChar().match(/^\\s/)) {\r\n                                // this may be a VariableCall lookup\r\n                                var result = parsers.variableCall(name);\r\n                                if (result) {\r\n                                    parserInput.forget();\r\n                                    return result;\r\n                                }\r\n                            }\r\n                            parserInput.forget();\r\n                            return new (tree.Variable)(name, index, fileInfo);\r\n                        }\r\n                        parserInput.restore();\r\n                    },\r\n                    // A variable entity using the protective {} e.g. @{var}\r\n                    variableCurly: function () {\r\n                        var curly;\r\n                        var index = parserInput.i;\r\n                        if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))) {\r\n                            return new (tree.Variable)(\"@\" + curly[1], index, fileInfo);\r\n                        }\r\n                    },\r\n                    //\r\n                    // A Property accessor, such as `$color`, in\r\n                    //\r\n                    //     background-color: $color\r\n                    //\r\n                    property: function () {\r\n                        var name;\r\n                        var index = parserInput.i;\r\n                        if (parserInput.currentChar() === '$' && (name = parserInput.$re(/^\\$[\\w-]+/))) {\r\n                            return new (tree.Property)(name, index, fileInfo);\r\n                        }\r\n                    },\r\n                    // A property entity useing the protective {} e.g. ${prop}\r\n                    propertyCurly: function () {\r\n                        var curly;\r\n                        var index = parserInput.i;\r\n                        if (parserInput.currentChar() === '$' && (curly = parserInput.$re(/^\\$\\{([\\w-]+)\\}/))) {\r\n                            return new (tree.Property)(\"$\" + curly[1], index, fileInfo);\r\n                        }\r\n                    },\r\n                    //\r\n                    // A Hexadecimal color\r\n                    //\r\n                    //     #4F3C2F\r\n                    //\r\n                    // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\r\n                    //\r\n                    color: function () {\r\n                        var rgb;\r\n                        parserInput.save();\r\n                        if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})([\\w.#\\[])?/))) {\r\n                            if (!rgb[2]) {\r\n                                parserInput.forget();\r\n                                return new (tree.Color)(rgb[1], undefined, rgb[0]);\r\n                            }\r\n                        }\r\n                        parserInput.restore();\r\n                    },\r\n                    colorKeyword: function () {\r\n                        parserInput.save();\r\n                        var autoCommentAbsorb = parserInput.autoCommentAbsorb;\r\n                        parserInput.autoCommentAbsorb = false;\r\n                        var k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);\r\n                        parserInput.autoCommentAbsorb = autoCommentAbsorb;\r\n                        if (!k) {\r\n                            parserInput.forget();\r\n                            return;\r\n                        }\r\n                        parserInput.restore();\r\n                        var color = tree.Color.fromKeyword(k);\r\n                        if (color) {\r\n                            parserInput.$str(k);\r\n                            return color;\r\n                        }\r\n                    },\r\n                    //\r\n                    // A Dimension, that is, a number and a unit\r\n                    //\r\n                    //     0.5em 95%\r\n                    //\r\n                    dimension: function () {\r\n                        if (parserInput.peekNotNumeric()) {\r\n                            return;\r\n                        }\r\n                        var value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i);\r\n                        if (value) {\r\n                            return new (tree.Dimension)(value[1], value[2]);\r\n                        }\r\n                    },\r\n                    //\r\n                    // A unicode descriptor, as is used in unicode-range\r\n                    //\r\n                    // U+0??  or U+00A1-00A9\r\n                    //\r\n                    unicodeDescriptor: function () {\r\n                        var ud;\r\n                        ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/);\r\n                        if (ud) {\r\n                            return new (tree.UnicodeDescriptor)(ud[0]);\r\n                        }\r\n                    },\r\n                    //\r\n                    // JavaScript code to be evaluated\r\n                    //\r\n                    //     `window.location.href`\r\n                    //\r\n                    javascript: function () {\r\n                        var js;\r\n                        var index = parserInput.i;\r\n                        parserInput.save();\r\n                        var escape = parserInput.$char('~');\r\n                        var jsQuote = parserInput.$char('`');\r\n                        if (!jsQuote) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        js = parserInput.$re(/^[^`]*`/);\r\n                        if (js) {\r\n                            parserInput.forget();\r\n                            return new (tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);\r\n                        }\r\n                        parserInput.restore('invalid javascript definition');\r\n                    }\r\n                },\r\n                //\r\n                // The variable part of a variable definition. Used in the `rule` parser\r\n                //\r\n                //     @fink:\r\n                //\r\n                variable: function () {\r\n                    var name;\r\n                    if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))) {\r\n                        return name[1];\r\n                    }\r\n                },\r\n                //\r\n                // Call a variable value to retrieve a detached ruleset\r\n                // or a value from a detached ruleset's rules.\r\n                //\r\n                //     @fink();\r\n                //     @fink;\r\n                //     color: @fink[@color];\r\n                //\r\n                variableCall: function (parsedName) {\r\n                    var lookups;\r\n                    var i = parserInput.i;\r\n                    var inValue = !!parsedName;\r\n                    var name = parsedName;\r\n                    parserInput.save();\r\n                    if (name || (parserInput.currentChar() === '@'\r\n                        && (name = parserInput.$re(/^(@[\\w-]+)(\\(\\s*\\))?/)))) {\r\n                        lookups = this.mixin.ruleLookups();\r\n                        if (!lookups && ((inValue && parserInput.$str('()') !== '()') || (name[2] !== '()'))) {\r\n                            parserInput.restore('Missing \\'[...]\\' lookup in variable call');\r\n                            return;\r\n                        }\r\n                        if (!inValue) {\r\n                            name = name[1];\r\n                        }\r\n                        var call = new tree.VariableCall(name, i, fileInfo);\r\n                        if (!inValue && parsers.end()) {\r\n                            parserInput.forget();\r\n                            return call;\r\n                        }\r\n                        else {\r\n                            parserInput.forget();\r\n                            return new tree.NamespaceValue(call, lookups, i, fileInfo);\r\n                        }\r\n                    }\r\n                    parserInput.restore();\r\n                },\r\n                //\r\n                // extend syntax - used to extend selectors\r\n                //\r\n                extend: function (isRule) {\r\n                    var elements;\r\n                    var e;\r\n                    var index = parserInput.i;\r\n                    var option;\r\n                    var extendList;\r\n                    var extend;\r\n                    if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\r\n                        return;\r\n                    }\r\n                    do {\r\n                        option = null;\r\n                        elements = null;\r\n                        while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\r\n                            e = this.element();\r\n                            if (!e) {\r\n                                break;\r\n                            }\r\n                            if (elements) {\r\n                                elements.push(e);\r\n                            }\r\n                            else {\r\n                                elements = [e];\r\n                            }\r\n                        }\r\n                        option = option && option[1];\r\n                        if (!elements) {\r\n                            error('Missing target selector for :extend().');\r\n                        }\r\n                        extend = new (tree.Extend)(new (tree.Selector)(elements), option, index, fileInfo);\r\n                        if (extendList) {\r\n                            extendList.push(extend);\r\n                        }\r\n                        else {\r\n                            extendList = [extend];\r\n                        }\r\n                    } while (parserInput.$char(','));\r\n                    expect(/^\\)/);\r\n                    if (isRule) {\r\n                        expect(/^;/);\r\n                    }\r\n                    return extendList;\r\n                },\r\n                //\r\n                // extendRule - used in a rule to extend all the parent selectors\r\n                //\r\n                extendRule: function () {\r\n                    return this.extend(true);\r\n                },\r\n                //\r\n                // Mixins\r\n                //\r\n                mixin: {\r\n                    //\r\n                    // A Mixin call, with an optional argument list\r\n                    //\r\n                    //     #mixins > .square(#fff);\r\n                    //     #mixins.square(#fff);\r\n                    //     .rounded(4px, black);\r\n                    //     .button;\r\n                    //\r\n                    // We can lookup / return a value using the lookup syntax:\r\n                    //\r\n                    //     color: #mixin.square(#fff)[@color];\r\n                    //\r\n                    // The `while` loop is there because mixins can be\r\n                    // namespaced, but we only support the child and descendant\r\n                    // selector for now.\r\n                    //\r\n                    call: function (inValue, getLookup) {\r\n                        var s = parserInput.currentChar();\r\n                        var important = false;\r\n                        var lookups;\r\n                        var index = parserInput.i;\r\n                        var elements;\r\n                        var args;\r\n                        var hasParens;\r\n                        if (s !== '.' && s !== '#') {\r\n                            return;\r\n                        }\r\n                        parserInput.save(); // stop us absorbing part of an invalid selector\r\n                        elements = this.elements();\r\n                        if (elements) {\r\n                            if (parserInput.$char('(')) {\r\n                                args = this.args(true).args;\r\n                                expectChar(')');\r\n                                hasParens = true;\r\n                            }\r\n                            if (getLookup !== false) {\r\n                                lookups = this.ruleLookups();\r\n                            }\r\n                            if (getLookup === true && !lookups) {\r\n                                parserInput.restore();\r\n                                return;\r\n                            }\r\n                            if (inValue && !lookups && !hasParens) {\r\n                                // This isn't a valid in-value mixin call\r\n                                parserInput.restore();\r\n                                return;\r\n                            }\r\n                            if (!inValue && parsers.important()) {\r\n                                important = true;\r\n                            }\r\n                            if (inValue || parsers.end()) {\r\n                                parserInput.forget();\r\n                                var mixin = new (tree.mixin.Call)(elements, args, index, fileInfo, !lookups && important);\r\n                                if (lookups) {\r\n                                    return new tree.NamespaceValue(mixin, lookups);\r\n                                }\r\n                                else {\r\n                                    return mixin;\r\n                                }\r\n                            }\r\n                        }\r\n                        parserInput.restore();\r\n                    },\r\n                    /**\r\n                     * Matching elements for mixins\r\n                     * (Start with . or # and can have > )\r\n                     */\r\n                    elements: function () {\r\n                        var elements;\r\n                        var e;\r\n                        var c;\r\n                        var elem;\r\n                        var elemIndex;\r\n                        var re = /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/;\r\n                        while (true) {\r\n                            elemIndex = parserInput.i;\r\n                            e = parserInput.$re(re);\r\n                            if (!e) {\r\n                                break;\r\n                            }\r\n                            elem = new (tree.Element)(c, e, false, elemIndex, fileInfo);\r\n                            if (elements) {\r\n                                elements.push(elem);\r\n                            }\r\n                            else {\r\n                                elements = [elem];\r\n                            }\r\n                            c = parserInput.$char('>');\r\n                        }\r\n                        return elements;\r\n                    },\r\n                    args: function (isCall) {\r\n                        var entities = parsers.entities;\r\n                        var returner = { args: null, variadic: false };\r\n                        var expressions = [];\r\n                        var argsSemiColon = [];\r\n                        var argsComma = [];\r\n                        var isSemiColonSeparated;\r\n                        var expressionContainsNamed;\r\n                        var name;\r\n                        var nameLoop;\r\n                        var value;\r\n                        var arg;\r\n                        var expand;\r\n                        var hasSep = true;\r\n                        parserInput.save();\r\n                        while (true) {\r\n                            if (isCall) {\r\n                                arg = parsers.detachedRuleset() || parsers.expression();\r\n                            }\r\n                            else {\r\n                                parserInput.commentStore.length = 0;\r\n                                if (parserInput.$str('...')) {\r\n                                    returner.variadic = true;\r\n                                    if (parserInput.$char(';') && !isSemiColonSeparated) {\r\n                                        isSemiColonSeparated = true;\r\n                                    }\r\n                                    (isSemiColonSeparated ? argsSemiColon : argsComma)\r\n                                        .push({ variadic: true });\r\n                                    break;\r\n                                }\r\n                                arg = entities.variable() || entities.property() || entities.literal() || entities.keyword() || this.call(true);\r\n                            }\r\n                            if (!arg || !hasSep) {\r\n                                break;\r\n                            }\r\n                            nameLoop = null;\r\n                            if (arg.throwAwayComments) {\r\n                                arg.throwAwayComments();\r\n                            }\r\n                            value = arg;\r\n                            var val = null;\r\n                            if (isCall) {\r\n                                // Variable\r\n                                if (arg.value && arg.value.length == 1) {\r\n                                    val = arg.value[0];\r\n                                }\r\n                            }\r\n                            else {\r\n                                val = arg;\r\n                            }\r\n                            if (val && (val instanceof tree.Variable || val instanceof tree.Property)) {\r\n                                if (parserInput.$char(':')) {\r\n                                    if (expressions.length > 0) {\r\n                                        if (isSemiColonSeparated) {\r\n                                            error('Cannot mix ; and , as delimiter types');\r\n                                        }\r\n                                        expressionContainsNamed = true;\r\n                                    }\r\n                                    value = parsers.detachedRuleset() || parsers.expression();\r\n                                    if (!value) {\r\n                                        if (isCall) {\r\n                                            error('could not understand value for named argument');\r\n                                        }\r\n                                        else {\r\n                                            parserInput.restore();\r\n                                            returner.args = [];\r\n                                            return returner;\r\n                                        }\r\n                                    }\r\n                                    nameLoop = (name = val.name);\r\n                                }\r\n                                else if (parserInput.$str('...')) {\r\n                                    if (!isCall) {\r\n                                        returner.variadic = true;\r\n                                        if (parserInput.$char(';') && !isSemiColonSeparated) {\r\n                                            isSemiColonSeparated = true;\r\n                                        }\r\n                                        (isSemiColonSeparated ? argsSemiColon : argsComma)\r\n                                            .push({ name: arg.name, variadic: true });\r\n                                        break;\r\n                                    }\r\n                                    else {\r\n                                        expand = true;\r\n                                    }\r\n                                }\r\n                                else if (!isCall) {\r\n                                    name = nameLoop = val.name;\r\n                                    value = null;\r\n                                }\r\n                            }\r\n                            if (value) {\r\n                                expressions.push(value);\r\n                            }\r\n                            argsComma.push({ name: nameLoop, value: value, expand: expand });\r\n                            if (parserInput.$char(',')) {\r\n                                hasSep = true;\r\n                                continue;\r\n                            }\r\n                            hasSep = parserInput.$char(';') === ';';\r\n                            if (hasSep || isSemiColonSeparated) {\r\n                                if (expressionContainsNamed) {\r\n                                    error('Cannot mix ; and , as delimiter types');\r\n                                }\r\n                                isSemiColonSeparated = true;\r\n                                if (expressions.length > 1) {\r\n                                    value = new (tree.Value)(expressions);\r\n                                }\r\n                                argsSemiColon.push({ name: name, value: value, expand: expand });\r\n                                name = null;\r\n                                expressions = [];\r\n                                expressionContainsNamed = false;\r\n                            }\r\n                        }\r\n                        parserInput.forget();\r\n                        returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;\r\n                        return returner;\r\n                    },\r\n                    //\r\n                    // A Mixin definition, with a list of parameters\r\n                    //\r\n                    //     .rounded (@radius: 2px, @color) {\r\n                    //        ...\r\n                    //     }\r\n                    //\r\n                    // Until we have a finer grained state-machine, we have to\r\n                    // do a look-ahead, to make sure we don't have a mixin call.\r\n                    // See the `rule` function for more information.\r\n                    //\r\n                    // We start by matching `.rounded (`, and then proceed on to\r\n                    // the argument list, which has optional default values.\r\n                    // We store the parameters in `params`, with a `value` key,\r\n                    // if there is a value, such as in the case of `@radius`.\r\n                    //\r\n                    // Once we've got our params list, and a closing `)`, we parse\r\n                    // the `{...}` block.\r\n                    //\r\n                    definition: function () {\r\n                        var name;\r\n                        var params = [];\r\n                        var match;\r\n                        var ruleset;\r\n                        var cond;\r\n                        var variadic = false;\r\n                        if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') ||\r\n                            parserInput.peek(/^[^{]*\\}/)) {\r\n                            return;\r\n                        }\r\n                        parserInput.save();\r\n                        match = parserInput.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/);\r\n                        if (match) {\r\n                            name = match[1];\r\n                            var argInfo = this.args(false);\r\n                            params = argInfo.args;\r\n                            variadic = argInfo.variadic;\r\n                            // .mixincall(\"@{a}\");\r\n                            // looks a bit like a mixin definition..\r\n                            // also\r\n                            // .mixincall(@a: {rule: set;});\r\n                            // so we have to be nice and restore\r\n                            if (!parserInput.$char(')')) {\r\n                                parserInput.restore('Missing closing \\')\\'');\r\n                                return;\r\n                            }\r\n                            parserInput.commentStore.length = 0;\r\n                            if (parserInput.$str('when')) { // Guard\r\n                                cond = expect(parsers.conditions, 'expected condition');\r\n                            }\r\n                            ruleset = parsers.block();\r\n                            if (ruleset) {\r\n                                parserInput.forget();\r\n                                return new (tree.mixin.Definition)(name, params, ruleset, cond, variadic);\r\n                            }\r\n                            else {\r\n                                parserInput.restore();\r\n                            }\r\n                        }\r\n                        else {\r\n                            parserInput.restore();\r\n                        }\r\n                    },\r\n                    ruleLookups: function () {\r\n                        var rule;\r\n                        var lookups = [];\r\n                        if (parserInput.currentChar() !== '[') {\r\n                            return;\r\n                        }\r\n                        while (true) {\r\n                            parserInput.save();\r\n                            rule = this.lookupValue();\r\n                            if (!rule && rule !== '') {\r\n                                parserInput.restore();\r\n                                break;\r\n                            }\r\n                            lookups.push(rule);\r\n                            parserInput.forget();\r\n                        }\r\n                        if (lookups.length > 0) {\r\n                            return lookups;\r\n                        }\r\n                    },\r\n                    lookupValue: function () {\r\n                        parserInput.save();\r\n                        if (!parserInput.$char('[')) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        var name = parserInput.$re(/^(?:[@$]{0,2})[_a-zA-Z0-9-]*/);\r\n                        if (!parserInput.$char(']')) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        if (name || name === '') {\r\n                            parserInput.forget();\r\n                            return name;\r\n                        }\r\n                        parserInput.restore();\r\n                    }\r\n                },\r\n                //\r\n                // Entities are the smallest recognized token,\r\n                // and can be found inside a rule's value.\r\n                //\r\n                entity: function () {\r\n                    var entities = this.entities;\r\n                    return this.comment() || entities.literal() || entities.variable() || entities.url() ||\r\n                        entities.property() || entities.call() || entities.keyword() || this.mixin.call(true) ||\r\n                        entities.javascript();\r\n                },\r\n                //\r\n                // A Declaration terminator. Note that we use `peek()` to check for '}',\r\n                // because the `block` rule will be expecting it, but we still need to make sure\r\n                // it's there, if ';' was omitted.\r\n                //\r\n                end: function () {\r\n                    return parserInput.$char(';') || parserInput.peek('}');\r\n                },\r\n                //\r\n                // IE's alpha function\r\n                //\r\n                //     alpha(opacity=88)\r\n                //\r\n                ieAlpha: function () {\r\n                    var value;\r\n                    // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\r\n                    if (!parserInput.$re(/^opacity=/i)) {\r\n                        return;\r\n                    }\r\n                    value = parserInput.$re(/^\\d+/);\r\n                    if (!value) {\r\n                        value = expect(parsers.entities.variable, 'Could not parse alpha');\r\n                        value = \"@{\" + value.name.slice(1) + \"}\";\r\n                    }\r\n                    expectChar(')');\r\n                    return new tree.Quoted('', \"alpha(opacity=\" + value + \")\");\r\n                },\r\n                //\r\n                // A Selector Element\r\n                //\r\n                //     div\r\n                //     + h1\r\n                //     #socks\r\n                //     input[type=\"text\"]\r\n                //\r\n                // Elements are the building blocks for Selectors,\r\n                // they are made out of a `Combinator` (see combinator rule),\r\n                // and an element name, such as a tag a class, or `*`.\r\n                //\r\n                element: function () {\r\n                    var e;\r\n                    var c;\r\n                    var v;\r\n                    var index = parserInput.i;\r\n                    c = this.combinator();\r\n                    e = parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\r\n                        parserInput.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) ||\r\n                        parserInput.$char('*') || parserInput.$char('&') || this.attribute() ||\r\n                        parserInput.$re(/^\\([^&()@]+\\)/) || parserInput.$re(/^[\\.#:](?=@)/) ||\r\n                        this.entities.variableCurly();\r\n                    if (!e) {\r\n                        parserInput.save();\r\n                        if (parserInput.$char('(')) {\r\n                            if ((v = this.selector(false)) && parserInput.$char(')')) {\r\n                                e = new (tree.Paren)(v);\r\n                                parserInput.forget();\r\n                            }\r\n                            else {\r\n                                parserInput.restore('Missing closing \\')\\'');\r\n                            }\r\n                        }\r\n                        else {\r\n                            parserInput.forget();\r\n                        }\r\n                    }\r\n                    if (e) {\r\n                        return new (tree.Element)(c, e, e instanceof tree.Variable, index, fileInfo);\r\n                    }\r\n                },\r\n                //\r\n                // Combinators combine elements together, in a Selector.\r\n                //\r\n                // Because our parser isn't white-space sensitive, special care\r\n                // has to be taken, when parsing the descendant combinator, ` `,\r\n                // as it's an empty space. We have to check the previous character\r\n                // in the input, to see if it's a ` ` character. More info on how\r\n                // we deal with this in *combinator.js*.\r\n                //\r\n                combinator: function () {\r\n                    var c = parserInput.currentChar();\r\n                    if (c === '/') {\r\n                        parserInput.save();\r\n                        var slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i);\r\n                        if (slashedCombinator) {\r\n                            parserInput.forget();\r\n                            return new (tree.Combinator)(slashedCombinator);\r\n                        }\r\n                        parserInput.restore();\r\n                    }\r\n                    if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\r\n                        parserInput.i++;\r\n                        if (c === '^' && parserInput.currentChar() === '^') {\r\n                            c = '^^';\r\n                            parserInput.i++;\r\n                        }\r\n                        while (parserInput.isWhitespace()) {\r\n                            parserInput.i++;\r\n                        }\r\n                        return new (tree.Combinator)(c);\r\n                    }\r\n                    else if (parserInput.isWhitespace(-1)) {\r\n                        return new (tree.Combinator)(' ');\r\n                    }\r\n                    else {\r\n                        return new (tree.Combinator)(null);\r\n                    }\r\n                },\r\n                //\r\n                // A CSS Selector\r\n                // with less extensions e.g. the ability to extend and guard\r\n                //\r\n                //     .class > div + h1\r\n                //     li a:hover\r\n                //\r\n                // Selectors are made out of one or more Elements, see above.\r\n                //\r\n                selector: function (isLess) {\r\n                    var index = parserInput.i;\r\n                    var elements;\r\n                    var extendList;\r\n                    var c;\r\n                    var e;\r\n                    var allExtends;\r\n                    var when;\r\n                    var condition;\r\n                    isLess = isLess !== false;\r\n                    while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str('when'))) || (e = this.element())) {\r\n                        if (when) {\r\n                            condition = expect(this.conditions, 'expected condition');\r\n                        }\r\n                        else if (condition) {\r\n                            error('CSS guard can only be used at the end of selector');\r\n                        }\r\n                        else if (extendList) {\r\n                            if (allExtends) {\r\n                                allExtends = allExtends.concat(extendList);\r\n                            }\r\n                            else {\r\n                                allExtends = extendList;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (allExtends) {\r\n                                error('Extend can only be used at the end of selector');\r\n                            }\r\n                            c = parserInput.currentChar();\r\n                            if (elements) {\r\n                                elements.push(e);\r\n                            }\r\n                            else {\r\n                                elements = [e];\r\n                            }\r\n                            e = null;\r\n                        }\r\n                        if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (elements) {\r\n                        return new (tree.Selector)(elements, allExtends, condition, index, fileInfo);\r\n                    }\r\n                    if (allExtends) {\r\n                        error('Extend must be used to extend a selector, it cannot be used on its own');\r\n                    }\r\n                },\r\n                selectors: function () {\r\n                    var s;\r\n                    var selectors;\r\n                    while (true) {\r\n                        s = this.selector();\r\n                        if (!s) {\r\n                            break;\r\n                        }\r\n                        if (selectors) {\r\n                            selectors.push(s);\r\n                        }\r\n                        else {\r\n                            selectors = [s];\r\n                        }\r\n                        parserInput.commentStore.length = 0;\r\n                        if (s.condition && selectors.length > 1) {\r\n                            error(\"Guards are only currently allowed on a single selector.\");\r\n                        }\r\n                        if (!parserInput.$char(',')) {\r\n                            break;\r\n                        }\r\n                        if (s.condition) {\r\n                            error(\"Guards are only currently allowed on a single selector.\");\r\n                        }\r\n                        parserInput.commentStore.length = 0;\r\n                    }\r\n                    return selectors;\r\n                },\r\n                attribute: function () {\r\n                    if (!parserInput.$char('[')) {\r\n                        return;\r\n                    }\r\n                    var entities = this.entities;\r\n                    var key;\r\n                    var val;\r\n                    var op;\r\n                    if (!(key = entities.variableCurly())) {\r\n                        key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/);\r\n                    }\r\n                    op = parserInput.$re(/^[|~*$^]?=/);\r\n                    if (op) {\r\n                        val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\\w-]+/) || entities.variableCurly();\r\n                    }\r\n                    expectChar(']');\r\n                    return new (tree.Attribute)(key, op, val);\r\n                },\r\n                //\r\n                // The `block` rule is used by `ruleset` and `mixin.definition`.\r\n                // It's a wrapper around the `primary` rule, with added `{}`.\r\n                //\r\n                block: function () {\r\n                    var content;\r\n                    if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {\r\n                        return content;\r\n                    }\r\n                },\r\n                blockRuleset: function () {\r\n                    var block = this.block();\r\n                    if (block) {\r\n                        block = new tree.Ruleset(null, block);\r\n                    }\r\n                    return block;\r\n                },\r\n                detachedRuleset: function () {\r\n                    var argInfo;\r\n                    var params;\r\n                    var variadic;\r\n                    parserInput.save();\r\n                    if (parserInput.$re(/^[.#]\\(/)) {\r\n                        /**\r\n                         * DR args currently only implemented for each() function, and not\r\n                         * yet settable as `@dr: #(@arg) {}`\r\n                         * This should be done when DRs are merged with mixins.\r\n                         * See: https://github.com/less/less-meta/issues/16\r\n                         */\r\n                        argInfo = this.mixin.args(false);\r\n                        params = argInfo.args;\r\n                        variadic = argInfo.variadic;\r\n                        if (!parserInput.$char(')')) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                    }\r\n                    var blockRuleset = this.blockRuleset();\r\n                    if (blockRuleset) {\r\n                        parserInput.forget();\r\n                        if (params) {\r\n                            return new tree.mixin.Definition(null, params, blockRuleset, null, variadic);\r\n                        }\r\n                        return new tree.DetachedRuleset(blockRuleset);\r\n                    }\r\n                    parserInput.restore();\r\n                },\r\n                //\r\n                // div, .class, body > p {...}\r\n                //\r\n                ruleset: function () {\r\n                    var selectors;\r\n                    var rules;\r\n                    var debugInfo;\r\n                    parserInput.save();\r\n                    if (context.dumpLineNumbers) {\r\n                        debugInfo = getDebugInfo(parserInput.i);\r\n                    }\r\n                    selectors = this.selectors();\r\n                    if (selectors && (rules = this.block())) {\r\n                        parserInput.forget();\r\n                        var ruleset = new (tree.Ruleset)(selectors, rules, context.strictImports);\r\n                        if (context.dumpLineNumbers) {\r\n                            ruleset.debugInfo = debugInfo;\r\n                        }\r\n                        return ruleset;\r\n                    }\r\n                    else {\r\n                        parserInput.restore();\r\n                    }\r\n                },\r\n                declaration: function () {\r\n                    var name;\r\n                    var value;\r\n                    var index = parserInput.i;\r\n                    var hasDR;\r\n                    var c = parserInput.currentChar();\r\n                    var important;\r\n                    var merge;\r\n                    var isVariable;\r\n                    if (c === '.' || c === '#' || c === '&' || c === ':') {\r\n                        return;\r\n                    }\r\n                    parserInput.save();\r\n                    name = this.variable() || this.ruleProperty();\r\n                    if (name) {\r\n                        isVariable = typeof name === 'string';\r\n                        if (isVariable) {\r\n                            value = this.detachedRuleset();\r\n                            if (value) {\r\n                                hasDR = true;\r\n                            }\r\n                        }\r\n                        parserInput.commentStore.length = 0;\r\n                        if (!value) {\r\n                            // a name returned by this.ruleProperty() is always an array of the form:\r\n                            // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\r\n                            // where each item is a tree.Keyword or tree.Variable\r\n                            merge = !isVariable && name.length > 1 && name.pop().value;\r\n                            // Custom property values get permissive parsing\r\n                            if (name[0].value && name[0].value.slice(0, 2) === '--') {\r\n                                value = this.permissiveValue();\r\n                            }\r\n                            // Try to store values as anonymous\r\n                            // If we need the value later we'll re-parse it in ruleset.parseValue\r\n                            else {\r\n                                value = this.anonymousValue();\r\n                            }\r\n                            if (value) {\r\n                                parserInput.forget();\r\n                                // anonymous values absorb the end ';' which is required for them to work\r\n                                return new (tree.Declaration)(name, value, false, merge, index, fileInfo);\r\n                            }\r\n                            if (!value) {\r\n                                value = this.value();\r\n                            }\r\n                            if (value) {\r\n                                important = this.important();\r\n                            }\r\n                            else if (isVariable) {\r\n                                // As a last resort, try permissiveValue\r\n                                value = this.permissiveValue();\r\n                            }\r\n                        }\r\n                        if (value && (this.end() || hasDR)) {\r\n                            parserInput.forget();\r\n                            return new (tree.Declaration)(name, value, important, merge, index, fileInfo);\r\n                        }\r\n                        else {\r\n                            parserInput.restore();\r\n                        }\r\n                    }\r\n                    else {\r\n                        parserInput.restore();\r\n                    }\r\n                },\r\n                anonymousValue: function () {\r\n                    var index = parserInput.i;\r\n                    var match = parserInput.$re(/^([^.#@\\$+\\/'\"*`(;{}-]*);/);\r\n                    if (match) {\r\n                        return new (tree.Anonymous)(match[1], index);\r\n                    }\r\n                },\r\n                /**\r\n                 * Used for custom properties, at-rules, and variables (as fallback)\r\n                 * Parses almost anything inside of {} [] () \"\" blocks\r\n                 * until it reaches outer-most tokens.\r\n                 *\r\n                 * First, it will try to parse comments and entities to reach\r\n                 * the end. This is mostly like the Expression parser except no\r\n                 * math is allowed.\r\n                 */\r\n                permissiveValue: function (untilTokens) {\r\n                    var i;\r\n                    var e;\r\n                    var done;\r\n                    var value;\r\n                    var tok = untilTokens || ';';\r\n                    var index = parserInput.i;\r\n                    var result = [];\r\n                    function testCurrentChar() {\r\n                        var char = parserInput.currentChar();\r\n                        if (typeof tok === 'string') {\r\n                            return char === tok;\r\n                        }\r\n                        else {\r\n                            return tok.test(char);\r\n                        }\r\n                    }\r\n                    if (testCurrentChar()) {\r\n                        return;\r\n                    }\r\n                    value = [];\r\n                    do {\r\n                        e = this.comment();\r\n                        if (e) {\r\n                            value.push(e);\r\n                            continue;\r\n                        }\r\n                        e = this.entity();\r\n                        if (e) {\r\n                            value.push(e);\r\n                        }\r\n                    } while (e);\r\n                    done = testCurrentChar();\r\n                    if (value.length > 0) {\r\n                        value = new (tree.Expression)(value);\r\n                        if (done) {\r\n                            return value;\r\n                        }\r\n                        else {\r\n                            result.push(value);\r\n                        }\r\n                        // Preserve space before $parseUntil as it will not\r\n                        if (parserInput.prevChar() === ' ') {\r\n                            result.push(new tree.Anonymous(' ', index));\r\n                        }\r\n                    }\r\n                    parserInput.save();\r\n                    value = parserInput.$parseUntil(tok);\r\n                    if (value) {\r\n                        if (typeof value === 'string') {\r\n                            error(\"Expected '\" + value + \"'\", 'Parse');\r\n                        }\r\n                        if (value.length === 1 && value[0] === ' ') {\r\n                            parserInput.forget();\r\n                            return new tree.Anonymous('', index);\r\n                        }\r\n                        var item = void 0;\r\n                        for (i = 0; i < value.length; i++) {\r\n                            item = value[i];\r\n                            if (Array.isArray(item)) {\r\n                                // Treat actual quotes as normal quoted values\r\n                                result.push(new tree.Quoted(item[0], item[1], true, index, fileInfo));\r\n                            }\r\n                            else {\r\n                                if (i === value.length - 1) {\r\n                                    item = item.trim();\r\n                                }\r\n                                // Treat like quoted values, but replace vars like unquoted expressions\r\n                                var quote = new tree.Quoted('\\'', item, true, index, fileInfo);\r\n                                quote.variableRegex = /@([\\w-]+)/g;\r\n                                quote.propRegex = /\\$([\\w-]+)/g;\r\n                                result.push(quote);\r\n                            }\r\n                        }\r\n                        parserInput.forget();\r\n                        return new tree.Expression(result, true);\r\n                    }\r\n                    parserInput.restore();\r\n                },\r\n                //\r\n                // An @import atrule\r\n                //\r\n                //     @import \"lib\";\r\n                //\r\n                // Depending on our environment, importing is done differently:\r\n                // In the browser, it's an XHR request, in Node, it would be a\r\n                // file-system operation. The function used for importing is\r\n                // stored in `import`, which we pass to the Import constructor.\r\n                //\r\n                'import': function () {\r\n                    var path;\r\n                    var features;\r\n                    var index = parserInput.i;\r\n                    var dir = parserInput.$re(/^@import?\\s+/);\r\n                    if (dir) {\r\n                        var options = (dir ? this.importOptions() : null) || {};\r\n                        if ((path = this.entities.quoted() || this.entities.url())) {\r\n                            features = this.mediaFeatures();\r\n                            if (!parserInput.$char(';')) {\r\n                                parserInput.i = index;\r\n                                error('missing semi-colon or unrecognised media features on import');\r\n                            }\r\n                            features = features && new (tree.Value)(features);\r\n                            return new (tree.Import)(path, features, options, index, fileInfo);\r\n                        }\r\n                        else {\r\n                            parserInput.i = index;\r\n                            error('malformed import statement');\r\n                        }\r\n                    }\r\n                },\r\n                importOptions: function () {\r\n                    var o;\r\n                    var options = {};\r\n                    var optionName;\r\n                    var value;\r\n                    // list of options, surrounded by parens\r\n                    if (!parserInput.$char('(')) {\r\n                        return null;\r\n                    }\r\n                    do {\r\n                        o = this.importOption();\r\n                        if (o) {\r\n                            optionName = o;\r\n                            value = true;\r\n                            switch (optionName) {\r\n                                case 'css':\r\n                                    optionName = 'less';\r\n                                    value = false;\r\n                                    break;\r\n                                case 'once':\r\n                                    optionName = 'multiple';\r\n                                    value = false;\r\n                                    break;\r\n                            }\r\n                            options[optionName] = value;\r\n                            if (!parserInput.$char(',')) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    } while (o);\r\n                    expectChar(')');\r\n                    return options;\r\n                },\r\n                importOption: function () {\r\n                    var opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);\r\n                    if (opt) {\r\n                        return opt[1];\r\n                    }\r\n                },\r\n                mediaFeature: function () {\r\n                    var entities = this.entities;\r\n                    var nodes = [];\r\n                    var e;\r\n                    var p;\r\n                    parserInput.save();\r\n                    do {\r\n                        e = entities.keyword() || entities.variable() || entities.mixinLookup();\r\n                        if (e) {\r\n                            nodes.push(e);\r\n                        }\r\n                        else if (parserInput.$char('(')) {\r\n                            p = this.property();\r\n                            e = this.value();\r\n                            if (parserInput.$char(')')) {\r\n                                if (p && e) {\r\n                                    nodes.push(new (tree.Paren)(new (tree.Declaration)(p, e, null, null, parserInput.i, fileInfo, true)));\r\n                                }\r\n                                else if (e) {\r\n                                    nodes.push(new (tree.Paren)(e));\r\n                                }\r\n                                else {\r\n                                    error('badly formed media feature definition');\r\n                                }\r\n                            }\r\n                            else {\r\n                                error('Missing closing \\')\\'', 'Parse');\r\n                            }\r\n                        }\r\n                    } while (e);\r\n                    parserInput.forget();\r\n                    if (nodes.length > 0) {\r\n                        return new (tree.Expression)(nodes);\r\n                    }\r\n                },\r\n                mediaFeatures: function () {\r\n                    var entities = this.entities;\r\n                    var features = [];\r\n                    var e;\r\n                    do {\r\n                        e = this.mediaFeature();\r\n                        if (e) {\r\n                            features.push(e);\r\n                            if (!parserInput.$char(',')) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        else {\r\n                            e = entities.variable() || entities.mixinLookup();\r\n                            if (e) {\r\n                                features.push(e);\r\n                                if (!parserInput.$char(',')) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    } while (e);\r\n                    return features.length > 0 ? features : null;\r\n                },\r\n                media: function () {\r\n                    var features;\r\n                    var rules;\r\n                    var media;\r\n                    var debugInfo;\r\n                    var index = parserInput.i;\r\n                    if (context.dumpLineNumbers) {\r\n                        debugInfo = getDebugInfo(index);\r\n                    }\r\n                    parserInput.save();\r\n                    if (parserInput.$str('@media')) {\r\n                        features = this.mediaFeatures();\r\n                        rules = this.block();\r\n                        if (!rules) {\r\n                            error('media definitions require block statements after any features');\r\n                        }\r\n                        parserInput.forget();\r\n                        media = new (tree.Media)(rules, features, index, fileInfo);\r\n                        if (context.dumpLineNumbers) {\r\n                            media.debugInfo = debugInfo;\r\n                        }\r\n                        return media;\r\n                    }\r\n                    parserInput.restore();\r\n                },\r\n                //\r\n                // A @plugin directive, used to import plugins dynamically.\r\n                //\r\n                //     @plugin (args) \"lib\";\r\n                //\r\n                plugin: function () {\r\n                    var path;\r\n                    var args;\r\n                    var options;\r\n                    var index = parserInput.i;\r\n                    var dir = parserInput.$re(/^@plugin?\\s+/);\r\n                    if (dir) {\r\n                        args = this.pluginArgs();\r\n                        if (args) {\r\n                            options = {\r\n                                pluginArgs: args,\r\n                                isPlugin: true\r\n                            };\r\n                        }\r\n                        else {\r\n                            options = { isPlugin: true };\r\n                        }\r\n                        if ((path = this.entities.quoted() || this.entities.url())) {\r\n                            if (!parserInput.$char(';')) {\r\n                                parserInput.i = index;\r\n                                error('missing semi-colon on @plugin');\r\n                            }\r\n                            return new (tree.Import)(path, null, options, index, fileInfo);\r\n                        }\r\n                        else {\r\n                            parserInput.i = index;\r\n                            error('malformed @plugin statement');\r\n                        }\r\n                    }\r\n                },\r\n                pluginArgs: function () {\r\n                    // list of options, surrounded by parens\r\n                    parserInput.save();\r\n                    if (!parserInput.$char('(')) {\r\n                        parserInput.restore();\r\n                        return null;\r\n                    }\r\n                    var args = parserInput.$re(/^\\s*([^\\);]+)\\)\\s*/);\r\n                    if (args[1]) {\r\n                        parserInput.forget();\r\n                        return args[1].trim();\r\n                    }\r\n                    else {\r\n                        parserInput.restore();\r\n                        return null;\r\n                    }\r\n                },\r\n                //\r\n                // A CSS AtRule\r\n                //\r\n                //     @charset \"utf-8\";\r\n                //\r\n                atrule: function () {\r\n                    var index = parserInput.i;\r\n                    var name;\r\n                    var value;\r\n                    var rules;\r\n                    var nonVendorSpecificName;\r\n                    var hasIdentifier;\r\n                    var hasExpression;\r\n                    var hasUnknown;\r\n                    var hasBlock = true;\r\n                    var isRooted = true;\r\n                    if (parserInput.currentChar() !== '@') {\r\n                        return;\r\n                    }\r\n                    value = this['import']() || this.plugin() || this.media();\r\n                    if (value) {\r\n                        return value;\r\n                    }\r\n                    parserInput.save();\r\n                    name = parserInput.$re(/^@[a-z-]+/);\r\n                    if (!name) {\r\n                        return;\r\n                    }\r\n                    nonVendorSpecificName = name;\r\n                    if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\r\n                        nonVendorSpecificName = \"@\" + name.slice(name.indexOf('-', 2) + 1);\r\n                    }\r\n                    switch (nonVendorSpecificName) {\r\n                        case '@charset':\r\n                            hasIdentifier = true;\r\n                            hasBlock = false;\r\n                            break;\r\n                        case '@namespace':\r\n                            hasExpression = true;\r\n                            hasBlock = false;\r\n                            break;\r\n                        case '@keyframes':\r\n                        case '@counter-style':\r\n                            hasIdentifier = true;\r\n                            break;\r\n                        case '@document':\r\n                        case '@supports':\r\n                            hasUnknown = true;\r\n                            isRooted = false;\r\n                            break;\r\n                        default:\r\n                            hasUnknown = true;\r\n                            break;\r\n                    }\r\n                    parserInput.commentStore.length = 0;\r\n                    if (hasIdentifier) {\r\n                        value = this.entity();\r\n                        if (!value) {\r\n                            error(\"expected \" + name + \" identifier\");\r\n                        }\r\n                    }\r\n                    else if (hasExpression) {\r\n                        value = this.expression();\r\n                        if (!value) {\r\n                            error(\"expected \" + name + \" expression\");\r\n                        }\r\n                    }\r\n                    else if (hasUnknown) {\r\n                        value = this.permissiveValue(/^[{;]/);\r\n                        hasBlock = (parserInput.currentChar() === '{');\r\n                        if (!value) {\r\n                            if (!hasBlock && parserInput.currentChar() !== ';') {\r\n                                error(name + \" rule is missing block or ending semi-colon\");\r\n                            }\r\n                        }\r\n                        else if (!value.value) {\r\n                            value = null;\r\n                        }\r\n                    }\r\n                    if (hasBlock) {\r\n                        rules = this.blockRuleset();\r\n                    }\r\n                    if (rules || (!hasBlock && value && parserInput.$char(';'))) {\r\n                        parserInput.forget();\r\n                        return new (tree.AtRule)(name, value, rules, index, fileInfo, context.dumpLineNumbers ? getDebugInfo(index) : null, isRooted);\r\n                    }\r\n                    parserInput.restore('at-rule options not recognised');\r\n                },\r\n                //\r\n                // A Value is a comma-delimited list of Expressions\r\n                //\r\n                //     font-family: Baskerville, Georgia, serif;\r\n                //\r\n                // In a Rule, a Value represents everything after the `:`,\r\n                // and before the `;`.\r\n                //\r\n                value: function () {\r\n                    var e;\r\n                    var expressions = [];\r\n                    var index = parserInput.i;\r\n                    do {\r\n                        e = this.expression();\r\n                        if (e) {\r\n                            expressions.push(e);\r\n                            if (!parserInput.$char(',')) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    } while (e);\r\n                    if (expressions.length > 0) {\r\n                        return new (tree.Value)(expressions, index);\r\n                    }\r\n                },\r\n                important: function () {\r\n                    if (parserInput.currentChar() === '!') {\r\n                        return parserInput.$re(/^! *important/);\r\n                    }\r\n                },\r\n                sub: function () {\r\n                    var a;\r\n                    var e;\r\n                    parserInput.save();\r\n                    if (parserInput.$char('(')) {\r\n                        a = this.addition();\r\n                        if (a && parserInput.$char(')')) {\r\n                            parserInput.forget();\r\n                            e = new (tree.Expression)([a]);\r\n                            e.parens = true;\r\n                            return e;\r\n                        }\r\n                        parserInput.restore('Expected \\')\\'');\r\n                        return;\r\n                    }\r\n                    parserInput.restore();\r\n                },\r\n                multiplication: function () {\r\n                    var m;\r\n                    var a;\r\n                    var op;\r\n                    var operation;\r\n                    var isSpaced;\r\n                    m = this.operand();\r\n                    if (m) {\r\n                        isSpaced = parserInput.isWhitespace(-1);\r\n                        while (true) {\r\n                            if (parserInput.peek(/^\\/[*\\/]/)) {\r\n                                break;\r\n                            }\r\n                            parserInput.save();\r\n                            op = parserInput.$char('/') || parserInput.$char('*') || parserInput.$str('./');\r\n                            if (!op) {\r\n                                parserInput.forget();\r\n                                break;\r\n                            }\r\n                            a = this.operand();\r\n                            if (!a) {\r\n                                parserInput.restore();\r\n                                break;\r\n                            }\r\n                            parserInput.forget();\r\n                            m.parensInOp = true;\r\n                            a.parensInOp = true;\r\n                            operation = new (tree.Operation)(op, [operation || m, a], isSpaced);\r\n                            isSpaced = parserInput.isWhitespace(-1);\r\n                        }\r\n                        return operation || m;\r\n                    }\r\n                },\r\n                addition: function () {\r\n                    var m;\r\n                    var a;\r\n                    var op;\r\n                    var operation;\r\n                    var isSpaced;\r\n                    m = this.multiplication();\r\n                    if (m) {\r\n                        isSpaced = parserInput.isWhitespace(-1);\r\n                        while (true) {\r\n                            op = parserInput.$re(/^[-+]\\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));\r\n                            if (!op) {\r\n                                break;\r\n                            }\r\n                            a = this.multiplication();\r\n                            if (!a) {\r\n                                break;\r\n                            }\r\n                            m.parensInOp = true;\r\n                            a.parensInOp = true;\r\n                            operation = new (tree.Operation)(op, [operation || m, a], isSpaced);\r\n                            isSpaced = parserInput.isWhitespace(-1);\r\n                        }\r\n                        return operation || m;\r\n                    }\r\n                },\r\n                conditions: function () {\r\n                    var a;\r\n                    var b;\r\n                    var index = parserInput.i;\r\n                    var condition;\r\n                    a = this.condition(true);\r\n                    if (a) {\r\n                        while (true) {\r\n                            if (!parserInput.peek(/^,\\s*(not\\s*)?\\(/) || !parserInput.$char(',')) {\r\n                                break;\r\n                            }\r\n                            b = this.condition(true);\r\n                            if (!b) {\r\n                                break;\r\n                            }\r\n                            condition = new (tree.Condition)('or', condition || a, b, index);\r\n                        }\r\n                        return condition || a;\r\n                    }\r\n                },\r\n                condition: function (needsParens) {\r\n                    var result;\r\n                    var logical;\r\n                    var next;\r\n                    function or() {\r\n                        return parserInput.$str('or');\r\n                    }\r\n                    result = this.conditionAnd(needsParens);\r\n                    if (!result) {\r\n                        return;\r\n                    }\r\n                    logical = or();\r\n                    if (logical) {\r\n                        next = this.condition(needsParens);\r\n                        if (next) {\r\n                            result = new (tree.Condition)(logical, result, next);\r\n                        }\r\n                        else {\r\n                            return;\r\n                        }\r\n                    }\r\n                    return result;\r\n                },\r\n                conditionAnd: function (needsParens) {\r\n                    var result;\r\n                    var logical;\r\n                    var next;\r\n                    var self = this;\r\n                    function insideCondition() {\r\n                        var cond = self.negatedCondition(needsParens) || self.parenthesisCondition(needsParens);\r\n                        if (!cond && !needsParens) {\r\n                            return self.atomicCondition(needsParens);\r\n                        }\r\n                        return cond;\r\n                    }\r\n                    function and() {\r\n                        return parserInput.$str('and');\r\n                    }\r\n                    result = insideCondition();\r\n                    if (!result) {\r\n                        return;\r\n                    }\r\n                    logical = and();\r\n                    if (logical) {\r\n                        next = this.conditionAnd(needsParens);\r\n                        if (next) {\r\n                            result = new (tree.Condition)(logical, result, next);\r\n                        }\r\n                        else {\r\n                            return;\r\n                        }\r\n                    }\r\n                    return result;\r\n                },\r\n                negatedCondition: function (needsParens) {\r\n                    if (parserInput.$str('not')) {\r\n                        var result = this.parenthesisCondition(needsParens);\r\n                        if (result) {\r\n                            result.negate = !result.negate;\r\n                        }\r\n                        return result;\r\n                    }\r\n                },\r\n                parenthesisCondition: function (needsParens) {\r\n                    function tryConditionFollowedByParenthesis(me) {\r\n                        var body;\r\n                        parserInput.save();\r\n                        body = me.condition(needsParens);\r\n                        if (!body) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        if (!parserInput.$char(')')) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        parserInput.forget();\r\n                        return body;\r\n                    }\r\n                    var body;\r\n                    parserInput.save();\r\n                    if (!parserInput.$str('(')) {\r\n                        parserInput.restore();\r\n                        return;\r\n                    }\r\n                    body = tryConditionFollowedByParenthesis(this);\r\n                    if (body) {\r\n                        parserInput.forget();\r\n                        return body;\r\n                    }\r\n                    body = this.atomicCondition(needsParens);\r\n                    if (!body) {\r\n                        parserInput.restore();\r\n                        return;\r\n                    }\r\n                    if (!parserInput.$char(')')) {\r\n                        parserInput.restore(\"expected ')' got '\" + parserInput.currentChar() + \"'\");\r\n                        return;\r\n                    }\r\n                    parserInput.forget();\r\n                    return body;\r\n                },\r\n                atomicCondition: function (needsParens) {\r\n                    var entities = this.entities;\r\n                    var index = parserInput.i;\r\n                    var a;\r\n                    var b;\r\n                    var c;\r\n                    var op;\r\n                    function cond() {\r\n                        return this.addition() || entities.keyword() || entities.quoted() || entities.mixinLookup();\r\n                    }\r\n                    cond = cond.bind(this);\r\n                    a = cond();\r\n                    if (a) {\r\n                        if (parserInput.$char('>')) {\r\n                            if (parserInput.$char('=')) {\r\n                                op = '>=';\r\n                            }\r\n                            else {\r\n                                op = '>';\r\n                            }\r\n                        }\r\n                        else if (parserInput.$char('<')) {\r\n                            if (parserInput.$char('=')) {\r\n                                op = '<=';\r\n                            }\r\n                            else {\r\n                                op = '<';\r\n                            }\r\n                        }\r\n                        else if (parserInput.$char('=')) {\r\n                            if (parserInput.$char('>')) {\r\n                                op = '=>';\r\n                            }\r\n                            else if (parserInput.$char('<')) {\r\n                                op = '=<';\r\n                            }\r\n                            else {\r\n                                op = '=';\r\n                            }\r\n                        }\r\n                        if (op) {\r\n                            b = cond();\r\n                            if (b) {\r\n                                c = new (tree.Condition)(op, a, b, index, false);\r\n                            }\r\n                            else {\r\n                                error('expected expression');\r\n                            }\r\n                        }\r\n                        else {\r\n                            c = new (tree.Condition)('=', a, new (tree.Keyword)('true'), index, false);\r\n                        }\r\n                        return c;\r\n                    }\r\n                },\r\n                //\r\n                // An operand is anything that can be part of an operation,\r\n                // such as a Color, or a Variable\r\n                //\r\n                operand: function () {\r\n                    var entities = this.entities;\r\n                    var negate;\r\n                    if (parserInput.peek(/^-[@\\$\\(]/)) {\r\n                        negate = parserInput.$char('-');\r\n                    }\r\n                    var o = this.sub() || entities.dimension() ||\r\n                        entities.color() || entities.variable() ||\r\n                        entities.property() || entities.call() ||\r\n                        entities.quoted(true) || entities.colorKeyword() ||\r\n                        entities.mixinLookup();\r\n                    if (negate) {\r\n                        o.parensInOp = true;\r\n                        o = new (tree.Negative)(o);\r\n                    }\r\n                    return o;\r\n                },\r\n                //\r\n                // Expressions either represent mathematical operations,\r\n                // or white-space delimited Entities.\r\n                //\r\n                //     1px solid black\r\n                //     @var * 2\r\n                //\r\n                expression: function () {\r\n                    var entities = [];\r\n                    var e;\r\n                    var delim;\r\n                    var index = parserInput.i;\r\n                    do {\r\n                        e = this.comment();\r\n                        if (e) {\r\n                            entities.push(e);\r\n                            continue;\r\n                        }\r\n                        e = this.addition() || this.entity();\r\n                        if (e instanceof tree.Comment) {\r\n                            e = null;\r\n                        }\r\n                        if (e) {\r\n                            entities.push(e);\r\n                            // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\r\n                            if (!parserInput.peek(/^\\/[\\/*]/)) {\r\n                                delim = parserInput.$char('/');\r\n                                if (delim) {\r\n                                    entities.push(new (tree.Anonymous)(delim, index));\r\n                                }\r\n                            }\r\n                        }\r\n                    } while (e);\r\n                    if (entities.length > 0) {\r\n                        return new (tree.Expression)(entities);\r\n                    }\r\n                },\r\n                property: function () {\r\n                    var name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);\r\n                    if (name) {\r\n                        return name[1];\r\n                    }\r\n                },\r\n                ruleProperty: function () {\r\n                    var name = [];\r\n                    var index = [];\r\n                    var s;\r\n                    var k;\r\n                    parserInput.save();\r\n                    var simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/);\r\n                    if (simpleProperty) {\r\n                        name = [new (tree.Keyword)(simpleProperty[1])];\r\n                        parserInput.forget();\r\n                        return name;\r\n                    }\r\n                    function match(re) {\r\n                        var i = parserInput.i;\r\n                        var chunk = parserInput.$re(re);\r\n                        if (chunk) {\r\n                            index.push(i);\r\n                            return name.push(chunk[1]);\r\n                        }\r\n                    }\r\n                    match(/^(\\*?)/);\r\n                    while (true) {\r\n                        if (!match(/^((?:[\\w-]+)|(?:[@\\$]\\{[\\w-]+\\}))/)) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if ((name.length > 1) && match(/^((?:\\+_|\\+)?)\\s*:/)) {\r\n                        parserInput.forget();\r\n                        // at last, we have the complete match now. move forward,\r\n                        // convert name particles to tree objects and return:\r\n                        if (name[0] === '') {\r\n                            name.shift();\r\n                            index.shift();\r\n                        }\r\n                        for (k = 0; k < name.length; k++) {\r\n                            s = name[k];\r\n                            name[k] = (s.charAt(0) !== '@' && s.charAt(0) !== '$') ?\r\n                                new (tree.Keyword)(s) :\r\n                                (s.charAt(0) === '@' ?\r\n                                    new (tree.Variable)(\"@\" + s.slice(2, -1), index[k], fileInfo) :\r\n                                    new (tree.Property)(\"$\" + s.slice(2, -1), index[k], fileInfo));\r\n                        }\r\n                        return name;\r\n                    }\r\n                    parserInput.restore();\r\n                }\r\n            }\r\n        };\r\n    };\r\n    Parser.serializeVars = function (vars) {\r\n        var s = '';\r\n        for (var name_1 in vars) {\r\n            if (Object.hasOwnProperty.call(vars, name_1)) {\r\n                var value = vars[name_1];\r\n                s += ((name_1[0] === '@') ? '' : '@') + name_1 + \": \" + value + ((String(value).slice(-1) === ';') ? '' : ';');\r\n            }\r\n        }\r\n        return s;\r\n    };\n\n    function boolean(condition) {\r\n        return condition ? Keyword.True : Keyword.False;\r\n    }\r\n    /**\r\n     * Functions with evalArgs set to false are sent context\r\n     * as the first argument.\r\n     */\r\n    function If(context, condition, trueValue, falseValue) {\r\n        return condition.eval(context) ? trueValue.eval(context)\r\n            : (falseValue ? falseValue.eval(context) : new Anonymous);\r\n    }\r\n    If.evalArgs = false;\r\n    function isdefined(context, variable) {\r\n        try {\r\n            variable.eval(context);\r\n            return Keyword.True;\r\n        }\r\n        catch (e) {\r\n            return Keyword.False;\r\n        }\r\n    }\r\n    isdefined.evalArgs = false;\r\n    var boolean$1 = { isdefined: isdefined, boolean: boolean, 'if': If };\n\n    var colorFunctions;\r\n    function clamp$1(val) {\r\n        return Math.min(1, Math.max(0, val));\r\n    }\r\n    function hsla(origColor, hsl) {\r\n        var color = colorFunctions.hsla(hsl.h, hsl.s, hsl.l, hsl.a);\r\n        if (color) {\r\n            if (origColor.value &&\r\n                /^(rgb|hsl)/.test(origColor.value)) {\r\n                color.value = origColor.value;\r\n            }\r\n            else {\r\n                color.value = 'rgb';\r\n            }\r\n            return color;\r\n        }\r\n    }\r\n    function toHSL(color) {\r\n        if (color.toHSL) {\r\n            return color.toHSL();\r\n        }\r\n        else {\r\n            throw new Error('Argument cannot be evaluated to a color');\r\n        }\r\n    }\r\n    function toHSV(color) {\r\n        if (color.toHSV) {\r\n            return color.toHSV();\r\n        }\r\n        else {\r\n            throw new Error('Argument cannot be evaluated to a color');\r\n        }\r\n    }\r\n    function number(n) {\r\n        if (n instanceof Dimension) {\r\n            return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\r\n        }\r\n        else if (typeof n === 'number') {\r\n            return n;\r\n        }\r\n        else {\r\n            throw {\r\n                type: 'Argument',\r\n                message: 'color functions take numbers as parameters'\r\n            };\r\n        }\r\n    }\r\n    function scaled(n, size) {\r\n        if (n instanceof Dimension && n.unit.is('%')) {\r\n            return parseFloat(n.value * size / 100);\r\n        }\r\n        else {\r\n            return number(n);\r\n        }\r\n    }\r\n    colorFunctions = {\r\n        rgb: function (r, g, b) {\r\n            var a = 1;\r\n            /**\r\n             * Comma-less syntax\r\n             *   e.g. rgb(0 128 255 / 50%)\r\n             */\r\n            if (r instanceof Expression) {\r\n                var val = r.value;\r\n                r = val[0];\r\n                g = val[1];\r\n                b = val[2];\r\n                /**\r\n                 * @todo - should this be normalized in\r\n                 *   function caller? Or parsed differently?\r\n                 */\r\n                if (b instanceof Operation) {\r\n                    var op = b;\r\n                    b = op.operands[0];\r\n                    a = op.operands[1];\r\n                }\r\n            }\r\n            var color = colorFunctions.rgba(r, g, b, a);\r\n            if (color) {\r\n                color.value = 'rgb';\r\n                return color;\r\n            }\r\n        },\r\n        rgba: function (r, g, b, a) {\r\n            try {\r\n                if (r instanceof Color) {\r\n                    if (g) {\r\n                        a = number(g);\r\n                    }\r\n                    else {\r\n                        a = r.alpha;\r\n                    }\r\n                    return new Color(r.rgb, a, 'rgba');\r\n                }\r\n                var rgb = [r, g, b].map(function (c) { return scaled(c, 255); });\r\n                a = number(a);\r\n                return new Color(rgb, a, 'rgba');\r\n            }\r\n            catch (e) { }\r\n        },\r\n        hsl: function (h, s, l) {\r\n            var a = 1;\r\n            if (h instanceof Expression) {\r\n                var val = h.value;\r\n                h = val[0];\r\n                s = val[1];\r\n                l = val[2];\r\n                if (l instanceof Operation) {\r\n                    var op = l;\r\n                    l = op.operands[0];\r\n                    a = op.operands[1];\r\n                }\r\n            }\r\n            var color = colorFunctions.hsla(h, s, l, a);\r\n            if (color) {\r\n                color.value = 'hsl';\r\n                return color;\r\n            }\r\n        },\r\n        hsla: function (h, s, l, a) {\r\n            try {\r\n                if (h instanceof Color) {\r\n                    if (s) {\r\n                        a = number(s);\r\n                    }\r\n                    else {\r\n                        a = h.alpha;\r\n                    }\r\n                    return new Color(h.rgb, a, 'hsla');\r\n                }\r\n                var m1_1;\r\n                var m2_1;\r\n                function hue(h) {\r\n                    h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\r\n                    if (h * 6 < 1) {\r\n                        return m1_1 + (m2_1 - m1_1) * h * 6;\r\n                    }\r\n                    else if (h * 2 < 1) {\r\n                        return m2_1;\r\n                    }\r\n                    else if (h * 3 < 2) {\r\n                        return m1_1 + (m2_1 - m1_1) * (2 / 3 - h) * 6;\r\n                    }\r\n                    else {\r\n                        return m1_1;\r\n                    }\r\n                }\r\n                h = (number(h) % 360) / 360;\r\n                s = clamp$1(number(s));\r\n                l = clamp$1(number(l));\r\n                a = clamp$1(number(a));\r\n                m2_1 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\r\n                m1_1 = l * 2 - m2_1;\r\n                var rgb = [\r\n                    hue(h + 1 / 3) * 255,\r\n                    hue(h) * 255,\r\n                    hue(h - 1 / 3) * 255\r\n                ];\r\n                a = number(a);\r\n                return new Color(rgb, a, 'hsla');\r\n            }\r\n            catch (e) { }\r\n        },\r\n        hsv: function (h, s, v) {\r\n            return colorFunctions.hsva(h, s, v, 1.0);\r\n        },\r\n        hsva: function (h, s, v, a) {\r\n            h = ((number(h) % 360) / 360) * 360;\r\n            s = number(s);\r\n            v = number(v);\r\n            a = number(a);\r\n            var i;\r\n            var f;\r\n            i = Math.floor((h / 60) % 6);\r\n            f = (h / 60) - i;\r\n            var vs = [v,\r\n                v * (1 - s),\r\n                v * (1 - f * s),\r\n                v * (1 - (1 - f) * s)];\r\n            var perm = [[0, 3, 1],\r\n                [2, 0, 1],\r\n                [1, 0, 3],\r\n                [1, 2, 0],\r\n                [3, 1, 0],\r\n                [0, 1, 2]];\r\n            return colorFunctions.rgba(vs[perm[i][0]] * 255, vs[perm[i][1]] * 255, vs[perm[i][2]] * 255, a);\r\n        },\r\n        hue: function (color) {\r\n            return new Dimension(toHSL(color).h);\r\n        },\r\n        saturation: function (color) {\r\n            return new Dimension(toHSL(color).s * 100, '%');\r\n        },\r\n        lightness: function (color) {\r\n            return new Dimension(toHSL(color).l * 100, '%');\r\n        },\r\n        hsvhue: function (color) {\r\n            return new Dimension(toHSV(color).h);\r\n        },\r\n        hsvsaturation: function (color) {\r\n            return new Dimension(toHSV(color).s * 100, '%');\r\n        },\r\n        hsvvalue: function (color) {\r\n            return new Dimension(toHSV(color).v * 100, '%');\r\n        },\r\n        red: function (color) {\r\n            return new Dimension(color.rgb[0]);\r\n        },\r\n        green: function (color) {\r\n            return new Dimension(color.rgb[1]);\r\n        },\r\n        blue: function (color) {\r\n            return new Dimension(color.rgb[2]);\r\n        },\r\n        alpha: function (color) {\r\n            return new Dimension(toHSL(color).a);\r\n        },\r\n        luma: function (color) {\r\n            return new Dimension(color.luma() * color.alpha * 100, '%');\r\n        },\r\n        luminance: function (color) {\r\n            var luminance = (0.2126 * color.rgb[0] / 255) +\r\n                (0.7152 * color.rgb[1] / 255) +\r\n                (0.0722 * color.rgb[2] / 255);\r\n            return new Dimension(luminance * color.alpha * 100, '%');\r\n        },\r\n        saturate: function (color, amount, method) {\r\n            // filter: saturate(3.2);\r\n            // should be kept as is, so check for color\r\n            if (!color.rgb) {\r\n                return null;\r\n            }\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.s += hsl.s * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.s += amount.value / 100;\r\n            }\r\n            hsl.s = clamp$1(hsl.s);\r\n            return hsla(color, hsl);\r\n        },\r\n        desaturate: function (color, amount, method) {\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.s -= hsl.s * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.s -= amount.value / 100;\r\n            }\r\n            hsl.s = clamp$1(hsl.s);\r\n            return hsla(color, hsl);\r\n        },\r\n        lighten: function (color, amount, method) {\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.l += hsl.l * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.l += amount.value / 100;\r\n            }\r\n            hsl.l = clamp$1(hsl.l);\r\n            return hsla(color, hsl);\r\n        },\r\n        darken: function (color, amount, method) {\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.l -= hsl.l * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.l -= amount.value / 100;\r\n            }\r\n            hsl.l = clamp$1(hsl.l);\r\n            return hsla(color, hsl);\r\n        },\r\n        fadein: function (color, amount, method) {\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.a += hsl.a * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.a += amount.value / 100;\r\n            }\r\n            hsl.a = clamp$1(hsl.a);\r\n            return hsla(color, hsl);\r\n        },\r\n        fadeout: function (color, amount, method) {\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.a -= hsl.a * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.a -= amount.value / 100;\r\n            }\r\n            hsl.a = clamp$1(hsl.a);\r\n            return hsla(color, hsl);\r\n        },\r\n        fade: function (color, amount) {\r\n            var hsl = toHSL(color);\r\n            hsl.a = amount.value / 100;\r\n            hsl.a = clamp$1(hsl.a);\r\n            return hsla(color, hsl);\r\n        },\r\n        spin: function (color, amount) {\r\n            var hsl = toHSL(color);\r\n            var hue = (hsl.h + amount.value) % 360;\r\n            hsl.h = hue < 0 ? 360 + hue : hue;\r\n            return hsla(color, hsl);\r\n        },\r\n        //\r\n        // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\r\n        // http://sass-lang.com\r\n        //\r\n        mix: function (color1, color2, weight) {\r\n            if (!weight) {\r\n                weight = new Dimension(50);\r\n            }\r\n            var p = weight.value / 100.0;\r\n            var w = p * 2 - 1;\r\n            var a = toHSL(color1).a - toHSL(color2).a;\r\n            var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\r\n            var w2 = 1 - w1;\r\n            var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\r\n                color1.rgb[1] * w1 + color2.rgb[1] * w2,\r\n                color1.rgb[2] * w1 + color2.rgb[2] * w2];\r\n            var alpha = color1.alpha * p + color2.alpha * (1 - p);\r\n            return new Color(rgb, alpha);\r\n        },\r\n        greyscale: function (color) {\r\n            return colorFunctions.desaturate(color, new Dimension(100));\r\n        },\r\n        contrast: function (color, dark, light, threshold) {\r\n            // filter: contrast(3.2);\r\n            // should be kept as is, so check for color\r\n            if (!color.rgb) {\r\n                return null;\r\n            }\r\n            if (typeof light === 'undefined') {\r\n                light = colorFunctions.rgba(255, 255, 255, 1.0);\r\n            }\r\n            if (typeof dark === 'undefined') {\r\n                dark = colorFunctions.rgba(0, 0, 0, 1.0);\r\n            }\r\n            // Figure out which is actually light and dark:\r\n            if (dark.luma() > light.luma()) {\r\n                var t = light;\r\n                light = dark;\r\n                dark = t;\r\n            }\r\n            if (typeof threshold === 'undefined') {\r\n                threshold = 0.43;\r\n            }\r\n            else {\r\n                threshold = number(threshold);\r\n            }\r\n            if (color.luma() < threshold) {\r\n                return light;\r\n            }\r\n            else {\r\n                return dark;\r\n            }\r\n        },\r\n        // Changes made in 2.7.0 - Reverted in 3.0.0\r\n        // contrast: function (color, color1, color2, threshold) {\r\n        //     // Return which of `color1` and `color2` has the greatest contrast with `color`\r\n        //     // according to the standard WCAG contrast ratio calculation.\r\n        //     // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\r\n        //     // The threshold param is no longer used, in line with SASS.\r\n        //     // filter: contrast(3.2);\r\n        //     // should be kept as is, so check for color\r\n        //     if (!color.rgb) {\r\n        //         return null;\r\n        //     }\r\n        //     if (typeof color1 === 'undefined') {\r\n        //         color1 = colorFunctions.rgba(0, 0, 0, 1.0);\r\n        //     }\r\n        //     if (typeof color2 === 'undefined') {\r\n        //         color2 = colorFunctions.rgba(255, 255, 255, 1.0);\r\n        //     }\r\n        //     var contrast1, contrast2;\r\n        //     var luma = color.luma();\r\n        //     var luma1 = color1.luma();\r\n        //     var luma2 = color2.luma();\r\n        //     // Calculate contrast ratios for each color\r\n        //     if (luma > luma1) {\r\n        //         contrast1 = (luma + 0.05) / (luma1 + 0.05);\r\n        //     } else {\r\n        //         contrast1 = (luma1 + 0.05) / (luma + 0.05);\r\n        //     }\r\n        //     if (luma > luma2) {\r\n        //         contrast2 = (luma + 0.05) / (luma2 + 0.05);\r\n        //     } else {\r\n        //         contrast2 = (luma2 + 0.05) / (luma + 0.05);\r\n        //     }\r\n        //     if (contrast1 > contrast2) {\r\n        //         return color1;\r\n        //     } else {\r\n        //         return color2;\r\n        //     }\r\n        // },\r\n        argb: function (color) {\r\n            return new Anonymous(color.toARGB());\r\n        },\r\n        color: function (c) {\r\n            if ((c instanceof Quoted) &&\r\n                (/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})$/i.test(c.value))) {\r\n                var val = c.value.slice(1);\r\n                return new Color(val, undefined, \"#\" + val);\r\n            }\r\n            if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {\r\n                c.value = undefined;\r\n                return c;\r\n            }\r\n            throw {\r\n                type: 'Argument',\r\n                message: 'argument must be a color keyword or 3|4|6|8 digit hex e.g. #FFF'\r\n            };\r\n        },\r\n        tint: function (color, amount) {\r\n            return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\r\n        },\r\n        shade: function (color, amount) {\r\n            return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\r\n        }\r\n    };\r\n    var color = colorFunctions;\n\n    // Color Blending\r\n    // ref: http://www.w3.org/TR/compositing-1\r\n    function colorBlend(mode, color1, color2) {\r\n        var ab = color1.alpha; // result\r\n        var // backdrop\r\n        cb;\r\n        var as = color2.alpha;\r\n        var // source\r\n        cs;\r\n        var ar;\r\n        var cr;\r\n        var r = [];\r\n        ar = as + ab * (1 - as);\r\n        for (var i = 0; i < 3; i++) {\r\n            cb = color1.rgb[i] / 255;\r\n            cs = color2.rgb[i] / 255;\r\n            cr = mode(cb, cs);\r\n            if (ar) {\r\n                cr = (as * cs + ab * (cb -\r\n                    as * (cb + cs - cr))) / ar;\r\n            }\r\n            r[i] = cr * 255;\r\n        }\r\n        return new Color(r, ar);\r\n    }\r\n    var colorBlendModeFunctions = {\r\n        multiply: function (cb, cs) {\r\n            return cb * cs;\r\n        },\r\n        screen: function (cb, cs) {\r\n            return cb + cs - cb * cs;\r\n        },\r\n        overlay: function (cb, cs) {\r\n            cb *= 2;\r\n            return (cb <= 1) ?\r\n                colorBlendModeFunctions.multiply(cb, cs) :\r\n                colorBlendModeFunctions.screen(cb - 1, cs);\r\n        },\r\n        softlight: function (cb, cs) {\r\n            var d = 1;\r\n            var e = cb;\r\n            if (cs > 0.5) {\r\n                e = 1;\r\n                d = (cb > 0.25) ? Math.sqrt(cb)\r\n                    : ((16 * cb - 12) * cb + 4) * cb;\r\n            }\r\n            return cb - (1 - 2 * cs) * e * (d - cb);\r\n        },\r\n        hardlight: function (cb, cs) {\r\n            return colorBlendModeFunctions.overlay(cs, cb);\r\n        },\r\n        difference: function (cb, cs) {\r\n            return Math.abs(cb - cs);\r\n        },\r\n        exclusion: function (cb, cs) {\r\n            return cb + cs - 2 * cb * cs;\r\n        },\r\n        // non-w3c functions:\r\n        average: function (cb, cs) {\r\n            return (cb + cs) / 2;\r\n        },\r\n        negation: function (cb, cs) {\r\n            return 1 - Math.abs(cb + cs - 1);\r\n        }\r\n    };\r\n    for (var f in colorBlendModeFunctions) {\r\n        if (colorBlendModeFunctions.hasOwnProperty(f)) {\r\n            colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\r\n        }\r\n    }\n\n    var dataUri = (function (environment) {\r\n        var fallback = function (functionThis, node) { return new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context); };\r\n        return { 'data-uri': function (mimetypeNode, filePathNode) {\r\n                if (!filePathNode) {\r\n                    filePathNode = mimetypeNode;\r\n                    mimetypeNode = null;\r\n                }\r\n                var mimetype = mimetypeNode && mimetypeNode.value;\r\n                var filePath = filePathNode.value;\r\n                var currentFileInfo = this.currentFileInfo;\r\n                var currentDirectory = currentFileInfo.rewriteUrls ?\r\n                    currentFileInfo.currentDirectory : currentFileInfo.entryPath;\r\n                var fragmentStart = filePath.indexOf('#');\r\n                var fragment = '';\r\n                if (fragmentStart !== -1) {\r\n                    fragment = filePath.slice(fragmentStart);\r\n                    filePath = filePath.slice(0, fragmentStart);\r\n                }\r\n                var context = clone(this.context);\r\n                context.rawBuffer = true;\r\n                var fileManager = environment.getFileManager(filePath, currentDirectory, context, environment, true);\r\n                if (!fileManager) {\r\n                    return fallback(this, filePathNode);\r\n                }\r\n                var useBase64 = false;\r\n                // detect the mimetype if not given\r\n                if (!mimetypeNode) {\r\n                    mimetype = environment.mimeLookup(filePath);\r\n                    if (mimetype === 'image/svg+xml') {\r\n                        useBase64 = false;\r\n                    }\r\n                    else {\r\n                        // use base 64 unless it's an ASCII or UTF-8 format\r\n                        var charset = environment.charsetLookup(mimetype);\r\n                        useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;\r\n                    }\r\n                    if (useBase64) {\r\n                        mimetype += ';base64';\r\n                    }\r\n                }\r\n                else {\r\n                    useBase64 = /;base64$/.test(mimetype);\r\n                }\r\n                var fileSync = fileManager.loadFileSync(filePath, currentDirectory, context, environment);\r\n                if (!fileSync.contents) {\r\n                    logger.warn(\"Skipped data-uri embedding of \" + filePath + \" because file not found\");\r\n                    return fallback(this, filePathNode || mimetypeNode);\r\n                }\r\n                var buf = fileSync.contents;\r\n                if (useBase64 && !environment.encodeBase64) {\r\n                    return fallback(this, filePathNode);\r\n                }\r\n                buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\r\n                var uri = \"data:\" + mimetype + \",\" + buf + fragment;\r\n                return new URL(new Quoted(\"\\\"\" + uri + \"\\\"\", uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\r\n            } };\r\n    });\n\n    var getItemsFromNode = function (node) {\r\n        // handle non-array values as an array of length 1\r\n        // return 'undefined' if index is invalid\r\n        var items = Array.isArray(node.value) ?\r\n            node.value : Array(node);\r\n        return items;\r\n    };\r\n    var list = {\r\n        _SELF: function (n) {\r\n            return n;\r\n        },\r\n        '~': function () {\r\n            var expr = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                expr[_i] = arguments[_i];\r\n            }\r\n            if (expr.length === 1) {\r\n                return expr[0];\r\n            }\r\n            return new Value(expr);\r\n        },\r\n        extract: function (values, index) {\r\n            // (1-based index)\r\n            index = index.value - 1;\r\n            return getItemsFromNode(values)[index];\r\n        },\r\n        length: function (values) {\r\n            return new Dimension(getItemsFromNode(values).length);\r\n        },\r\n        /**\r\n         * Creates a Less list of incremental values.\r\n         * Modeled after Lodash's range function, also exists natively in PHP\r\n         *\r\n         * @param {Dimension} [start=1]\r\n         * @param {Dimension} end  - e.g. 10 or 10px - unit is added to output\r\n         * @param {Dimension} [step=1]\r\n         */\r\n        range: function (start, end, step) {\r\n            var from;\r\n            var to;\r\n            var stepValue = 1;\r\n            var list = [];\r\n            if (end) {\r\n                to = end;\r\n                from = start.value;\r\n                if (step) {\r\n                    stepValue = step.value;\r\n                }\r\n            }\r\n            else {\r\n                from = 1;\r\n                to = start;\r\n            }\r\n            for (var i = from; i <= to.value; i += stepValue) {\r\n                list.push(new Dimension(i, to.unit));\r\n            }\r\n            return new Expression(list);\r\n        },\r\n        each: function (list, rs) {\r\n            var _this = this;\r\n            var rules = [];\r\n            var newRules;\r\n            var iterator;\r\n            var tryEval = function (val) {\r\n                if (val instanceof Node) {\r\n                    return val.eval(_this.context);\r\n                }\r\n                return val;\r\n            };\r\n            if (list.value && !(list instanceof Quoted)) {\r\n                if (Array.isArray(list.value)) {\r\n                    iterator = list.value.map(tryEval);\r\n                }\r\n                else {\r\n                    iterator = [tryEval(list.value)];\r\n                }\r\n            }\r\n            else if (list.ruleset) {\r\n                iterator = tryEval(list.ruleset).rules;\r\n            }\r\n            else if (list.rules) {\r\n                iterator = list.rules.map(tryEval);\r\n            }\r\n            else if (Array.isArray(list)) {\r\n                iterator = list.map(tryEval);\r\n            }\r\n            else {\r\n                iterator = [tryEval(list)];\r\n            }\r\n            var valueName = '@value';\r\n            var keyName = '@key';\r\n            var indexName = '@index';\r\n            if (rs.params) {\r\n                valueName = rs.params[0] && rs.params[0].name;\r\n                keyName = rs.params[1] && rs.params[1].name;\r\n                indexName = rs.params[2] && rs.params[2].name;\r\n                rs = rs.rules;\r\n            }\r\n            else {\r\n                rs = rs.ruleset;\r\n            }\r\n            for (var i = 0; i < iterator.length; i++) {\r\n                var key = void 0;\r\n                var value = void 0;\r\n                var item = iterator[i];\r\n                if (item instanceof Declaration) {\r\n                    key = typeof item.name === 'string' ? item.name : item.name[0].value;\r\n                    value = item.value;\r\n                }\r\n                else {\r\n                    key = new Dimension(i + 1);\r\n                    value = item;\r\n                }\r\n                if (item instanceof Comment) {\r\n                    continue;\r\n                }\r\n                newRules = rs.rules.slice(0);\r\n                if (valueName) {\r\n                    newRules.push(new Declaration(valueName, value, false, false, this.index, this.currentFileInfo));\r\n                }\r\n                if (indexName) {\r\n                    newRules.push(new Declaration(indexName, new Dimension(i + 1), false, false, this.index, this.currentFileInfo));\r\n                }\r\n                if (keyName) {\r\n                    newRules.push(new Declaration(keyName, key, false, false, this.index, this.currentFileInfo));\r\n                }\r\n                rules.push(new Ruleset([new (Selector)([new Element(\"\", '&')])], newRules, rs.strictImports, rs.visibilityInfo()));\r\n            }\r\n            return new Ruleset([new (Selector)([new Element(\"\", '&')])], rules, rs.strictImports, rs.visibilityInfo()).eval(this.context);\r\n        }\r\n    };\n\n    var MathHelper = function (fn, unit, n) {\r\n        if (!(n instanceof Dimension)) {\r\n            throw { type: 'Argument', message: 'argument must be a number' };\r\n        }\r\n        if (unit == null) {\r\n            unit = n.unit;\r\n        }\r\n        else {\r\n            n = n.unify();\r\n        }\r\n        return new Dimension(fn(parseFloat(n.value)), unit);\r\n    };\n\n    var mathFunctions = {\r\n        // name,  unit\r\n        ceil: null,\r\n        floor: null,\r\n        sqrt: null,\r\n        abs: null,\r\n        tan: '',\r\n        sin: '',\r\n        cos: '',\r\n        atan: 'rad',\r\n        asin: 'rad',\r\n        acos: 'rad'\r\n    };\r\n    for (var f$1 in mathFunctions) {\r\n        if (mathFunctions.hasOwnProperty(f$1)) {\r\n            mathFunctions[f$1] = MathHelper.bind(null, Math[f$1], mathFunctions[f$1]);\r\n        }\r\n    }\r\n    mathFunctions.round = function (n, f) {\r\n        var fraction = typeof f === 'undefined' ? 0 : f.value;\r\n        return MathHelper(function (num) { return num.toFixed(fraction); }, null, n);\r\n    };\n\n    var minMax = function (isMin, args) {\r\n        args = Array.prototype.slice.call(args);\r\n        switch (args.length) {\r\n            case 0: throw { type: 'Argument', message: 'one or more arguments required' };\r\n        }\r\n        var i; // key is the unit.toString() for unified Dimension values,\r\n        var j;\r\n        var current;\r\n        var currentUnified;\r\n        var referenceUnified;\r\n        var unit;\r\n        var unitStatic;\r\n        var unitClone;\r\n        var // elems only contains original argument values.\r\n        order = [];\r\n        var values = {};\r\n        // value is the index into the order array.\r\n        for (i = 0; i < args.length; i++) {\r\n            current = args[i];\r\n            if (!(current instanceof Dimension)) {\r\n                if (Array.isArray(args[i].value)) {\r\n                    Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\r\n                }\r\n                continue;\r\n            }\r\n            currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\r\n            unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\r\n            unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;\r\n            unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;\r\n            j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];\r\n            if (j === undefined) {\r\n                if (unitStatic !== undefined && unit !== unitStatic) {\r\n                    throw { type: 'Argument', message: 'incompatible types' };\r\n                }\r\n                values[unit] = order.length;\r\n                order.push(current);\r\n                continue;\r\n            }\r\n            referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\r\n            if (isMin && currentUnified.value < referenceUnified.value ||\r\n                !isMin && currentUnified.value > referenceUnified.value) {\r\n                order[j] = current;\r\n            }\r\n        }\r\n        if (order.length == 1) {\r\n            return order[0];\r\n        }\r\n        args = order.map(function (a) { return a.toCSS(this.context); }).join(this.context.compress ? ',' : ', ');\r\n        return new Anonymous((isMin ? 'min' : 'max') + \"(\" + args + \")\");\r\n    };\r\n    var number$1 = {\r\n        min: function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            try {\r\n                return minMax(true, args);\r\n            }\r\n            catch (e) { }\r\n        },\r\n        max: function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            try {\r\n                return minMax(false, args);\r\n            }\r\n            catch (e) { }\r\n        },\r\n        convert: function (val, unit) {\r\n            return val.convertTo(unit.value);\r\n        },\r\n        pi: function () {\r\n            return new Dimension(Math.PI);\r\n        },\r\n        mod: function (a, b) {\r\n            return new Dimension(a.value % b.value, a.unit);\r\n        },\r\n        pow: function (x, y) {\r\n            if (typeof x === 'number' && typeof y === 'number') {\r\n                x = new Dimension(x);\r\n                y = new Dimension(y);\r\n            }\r\n            else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\r\n                throw { type: 'Argument', message: 'arguments must be numbers' };\r\n            }\r\n            return new Dimension(Math.pow(x.value, y.value), x.unit);\r\n        },\r\n        percentage: function (n) {\r\n            var result = MathHelper(function (num) { return num * 100; }, '%', n);\r\n            return result;\r\n        }\r\n    };\n\n    var string = {\r\n        e: function (str) {\r\n            return new Quoted('\"', str instanceof JavaScript ? str.evaluated : str.value, true);\r\n        },\r\n        escape: function (str) {\r\n            return new Anonymous(encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B')\r\n                .replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\r\n        },\r\n        replace: function (string, pattern, replacement, flags) {\r\n            var result = string.value;\r\n            replacement = (replacement.type === 'Quoted') ?\r\n                replacement.value : replacement.toCSS();\r\n            result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\r\n            return new Quoted(string.quote || '', result, string.escaped);\r\n        },\r\n        '%': function (string /* arg, arg, ... */) {\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            var result = string.value;\r\n            var _loop_1 = function (i) {\r\n                /* jshint loopfunc:true */\r\n                result = result.replace(/%[sda]/i, function (token) {\r\n                    var value = ((args[i].type === 'Quoted') &&\r\n                        token.match(/s/i)) ? args[i].value : args[i].toCSS();\r\n                    return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\r\n                });\r\n            };\r\n            for (var i = 0; i < args.length; i++) {\r\n                _loop_1(i);\r\n            }\r\n            result = result.replace(/%%/g, '%');\r\n            return new Quoted(string.quote || '', result, string.escaped);\r\n        }\r\n    };\n\n    var svg = (function (environment) {\r\n        return { 'svg-gradient': function (direction) {\r\n                var stops;\r\n                var gradientDirectionSvg;\r\n                var gradientType = 'linear';\r\n                var rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"';\r\n                var renderEnv = { compress: false };\r\n                var returner;\r\n                var directionValue = direction.toCSS(renderEnv);\r\n                var i;\r\n                var color;\r\n                var position;\r\n                var positionValue;\r\n                var alpha;\r\n                function throwArgumentDescriptor() {\r\n                    throw { type: 'Argument',\r\n                        message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\r\n                            ' end_color [end_position] or direction, color list' };\r\n                }\r\n                if (arguments.length == 2) {\r\n                    if (arguments[1].value.length < 2) {\r\n                        throwArgumentDescriptor();\r\n                    }\r\n                    stops = arguments[1].value;\r\n                }\r\n                else if (arguments.length < 3) {\r\n                    throwArgumentDescriptor();\r\n                }\r\n                else {\r\n                    stops = Array.prototype.slice.call(arguments, 1);\r\n                }\r\n                switch (directionValue) {\r\n                    case 'to bottom':\r\n                        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\r\n                        break;\r\n                    case 'to right':\r\n                        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\r\n                        break;\r\n                    case 'to bottom right':\r\n                        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\r\n                        break;\r\n                    case 'to top right':\r\n                        gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\r\n                        break;\r\n                    case 'ellipse':\r\n                    case 'ellipse at center':\r\n                        gradientType = 'radial';\r\n                        gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\r\n                        rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\r\n                        break;\r\n                    default:\r\n                        throw { type: 'Argument', message: 'svg-gradient direction must be \\'to bottom\\', \\'to right\\',' +\r\n                                ' \\'to bottom right\\', \\'to top right\\' or \\'ellipse at center\\'' };\r\n                }\r\n                returner = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 1 1\\\"><\" + gradientType + \"Gradient id=\\\"g\\\" \" + gradientDirectionSvg + \">\";\r\n                for (i = 0; i < stops.length; i += 1) {\r\n                    if (stops[i] instanceof Expression) {\r\n                        color = stops[i].value[0];\r\n                        position = stops[i].value[1];\r\n                    }\r\n                    else {\r\n                        color = stops[i];\r\n                        position = undefined;\r\n                    }\r\n                    if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {\r\n                        throwArgumentDescriptor();\r\n                    }\r\n                    positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\r\n                    alpha = color.alpha;\r\n                    returner += \"<stop offset=\\\"\" + positionValue + \"\\\" stop-color=\\\"\" + color.toRGB() + \"\\\"\" + (alpha < 1 ? \" stop-opacity=\\\"\" + alpha + \"\\\"\" : '') + \"/>\";\r\n                }\r\n                returner += \"</\" + gradientType + \"Gradient><rect \" + rectangleDimension + \" fill=\\\"url(#g)\\\" /></svg>\";\r\n                returner = encodeURIComponent(returner);\r\n                returner = \"data:image/svg+xml,\" + returner;\r\n                return new URL(new Quoted(\"'\" + returner + \"'\", returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\r\n            } };\r\n    });\n\n    var isa = function (n, Type) { return (n instanceof Type) ? Keyword.True : Keyword.False; };\r\n    var isunit = function (n, unit) {\r\n        if (unit === undefined) {\r\n            throw { type: 'Argument', message: 'missing the required second argument to isunit.' };\r\n        }\r\n        unit = typeof unit.value === 'string' ? unit.value : unit;\r\n        if (typeof unit !== 'string') {\r\n            throw { type: 'Argument', message: 'Second argument to isunit should be a unit or a string.' };\r\n        }\r\n        return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;\r\n    };\r\n    var types = {\r\n        isruleset: function (n) {\r\n            return isa(n, DetachedRuleset);\r\n        },\r\n        iscolor: function (n) {\r\n            return isa(n, Color);\r\n        },\r\n        isnumber: function (n) {\r\n            return isa(n, Dimension);\r\n        },\r\n        isstring: function (n) {\r\n            return isa(n, Quoted);\r\n        },\r\n        iskeyword: function (n) {\r\n            return isa(n, Keyword);\r\n        },\r\n        isurl: function (n) {\r\n            return isa(n, URL);\r\n        },\r\n        ispixel: function (n) {\r\n            return isunit(n, 'px');\r\n        },\r\n        ispercentage: function (n) {\r\n            return isunit(n, '%');\r\n        },\r\n        isem: function (n) {\r\n            return isunit(n, 'em');\r\n        },\r\n        isunit: isunit,\r\n        unit: function (val, unit) {\r\n            if (!(val instanceof Dimension)) {\r\n                throw { type: 'Argument', message: \"the first argument to unit must be a number\" + (val instanceof Operation ? '. Have you forgotten parenthesis?' : '') };\r\n            }\r\n            if (unit) {\r\n                if (unit instanceof Keyword) {\r\n                    unit = unit.value;\r\n                }\r\n                else {\r\n                    unit = unit.toCSS();\r\n                }\r\n            }\r\n            else {\r\n                unit = '';\r\n            }\r\n            return new Dimension(val.value, unit);\r\n        },\r\n        'get-unit': function (n) {\r\n            return new Anonymous(n.unit);\r\n        }\r\n    };\n\n    var functions = (function (environment) {\r\n        var functions = { functionRegistry: functionRegistry, functionCaller: functionCaller };\r\n        // register functions\r\n        functionRegistry.addMultiple(boolean$1);\r\n        functionRegistry.add('default', defaultFunc.eval.bind(defaultFunc));\r\n        functionRegistry.addMultiple(color);\r\n        functionRegistry.addMultiple(colorBlend);\r\n        functionRegistry.addMultiple(dataUri(environment));\r\n        functionRegistry.addMultiple(list);\r\n        functionRegistry.addMultiple(mathFunctions);\r\n        functionRegistry.addMultiple(number$1);\r\n        functionRegistry.addMultiple(string);\r\n        functionRegistry.addMultiple(svg());\r\n        functionRegistry.addMultiple(types);\r\n        return functions;\r\n    });\n\n    function transformTree (root, options) {\r\n        options = options || {};\r\n        var evaldRoot;\r\n        var variables = options.variables;\r\n        var evalEnv = new contexts.Eval(options);\r\n        //\r\n        // Allows setting variables with a hash, so:\r\n        //\r\n        //   `{ color: new tree.Color('#f01') }` will become:\r\n        //\r\n        //   new tree.Declaration('@color',\r\n        //     new tree.Value([\r\n        //       new tree.Expression([\r\n        //         new tree.Color('#f01')\r\n        //       ])\r\n        //     ])\r\n        //   )\r\n        //\r\n        if (typeof variables === 'object' && !Array.isArray(variables)) {\r\n            variables = Object.keys(variables).map(function (k) {\r\n                var value = variables[k];\r\n                if (!(value instanceof tree.Value)) {\r\n                    if (!(value instanceof tree.Expression)) {\r\n                        value = new tree.Expression([value]);\r\n                    }\r\n                    value = new tree.Value([value]);\r\n                }\r\n                return new tree.Declaration(\"@\" + k, value, false, null, 0);\r\n            });\r\n            evalEnv.frames = [new tree.Ruleset(null, variables)];\r\n        }\r\n        var visitors$1 = [\r\n            new visitors.JoinSelectorVisitor(),\r\n            new visitors.MarkVisibleSelectorsVisitor(true),\r\n            new visitors.ExtendVisitor(),\r\n            new visitors.ToCSSVisitor({ compress: Boolean(options.compress) })\r\n        ];\r\n        var preEvalVisitors = [];\r\n        var v;\r\n        var visitorIterator;\r\n        /**\r\n         * first() / get() allows visitors to be added while visiting\r\n         *\r\n         * @todo Add scoping for visitors just like functions for @plugin; right now they're global\r\n         */\r\n        if (options.pluginManager) {\r\n            visitorIterator = options.pluginManager.visitor();\r\n            for (var i = 0; i < 2; i++) {\r\n                visitorIterator.first();\r\n                while ((v = visitorIterator.get())) {\r\n                    if (v.isPreEvalVisitor) {\r\n                        if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\r\n                            preEvalVisitors.push(v);\r\n                            v.run(root);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (i === 0 || visitors$1.indexOf(v) === -1) {\r\n                            if (v.isPreVisitor) {\r\n                                visitors$1.unshift(v);\r\n                            }\r\n                            else {\r\n                                visitors$1.push(v);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        evaldRoot = root.eval(evalEnv);\r\n        for (var i = 0; i < visitors$1.length; i++) {\r\n            visitors$1[i].run(evaldRoot);\r\n        }\r\n        // Run any remaining visitors added after eval pass\r\n        if (options.pluginManager) {\r\n            visitorIterator.first();\r\n            while ((v = visitorIterator.get())) {\r\n                if (visitors$1.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\r\n                    v.run(evaldRoot);\r\n                }\r\n            }\r\n        }\r\n        return evaldRoot;\r\n    }\n\n    /**\r\n     * Plugin Manager\r\n     */\r\n    var PluginManager = /** @class */ (function () {\r\n        function PluginManager(less) {\r\n            this.less = less;\r\n            this.visitors = [];\r\n            this.preProcessors = [];\r\n            this.postProcessors = [];\r\n            this.installedPlugins = [];\r\n            this.fileManagers = [];\r\n            this.iterator = -1;\r\n            this.pluginCache = {};\r\n            this.Loader = new less.PluginLoader(less);\r\n        }\r\n        /**\r\n         * Adds all the plugins in the array\r\n         * @param {Array} plugins\r\n         */\r\n        PluginManager.prototype.addPlugins = function (plugins) {\r\n            if (plugins) {\r\n                for (var i = 0; i < plugins.length; i++) {\r\n                    this.addPlugin(plugins[i]);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         *\r\n         * @param plugin\r\n         * @param {String} filename\r\n         */\r\n        PluginManager.prototype.addPlugin = function (plugin, filename, functionRegistry) {\r\n            this.installedPlugins.push(plugin);\r\n            if (filename) {\r\n                this.pluginCache[filename] = plugin;\r\n            }\r\n            if (plugin.install) {\r\n                plugin.install(this.less, this, functionRegistry || this.less.functions.functionRegistry);\r\n            }\r\n        };\r\n        /**\r\n         *\r\n         * @param filename\r\n         */\r\n        PluginManager.prototype.get = function (filename) {\r\n            return this.pluginCache[filename];\r\n        };\r\n        /**\r\n         * Adds a visitor. The visitor object has options on itself to determine\r\n         * when it should run.\r\n         * @param visitor\r\n         */\r\n        PluginManager.prototype.addVisitor = function (visitor) {\r\n            this.visitors.push(visitor);\r\n        };\r\n        /**\r\n         * Adds a pre processor object\r\n         * @param {object} preProcessor\r\n         * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\r\n         */\r\n        PluginManager.prototype.addPreProcessor = function (preProcessor, priority) {\r\n            var indexToInsertAt;\r\n            for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {\r\n                if (this.preProcessors[indexToInsertAt].priority >= priority) {\r\n                    break;\r\n                }\r\n            }\r\n            this.preProcessors.splice(indexToInsertAt, 0, { preProcessor: preProcessor, priority: priority });\r\n        };\r\n        /**\r\n         * Adds a post processor object\r\n         * @param {object} postProcessor\r\n         * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\r\n         */\r\n        PluginManager.prototype.addPostProcessor = function (postProcessor, priority) {\r\n            var indexToInsertAt;\r\n            for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {\r\n                if (this.postProcessors[indexToInsertAt].priority >= priority) {\r\n                    break;\r\n                }\r\n            }\r\n            this.postProcessors.splice(indexToInsertAt, 0, { postProcessor: postProcessor, priority: priority });\r\n        };\r\n        /**\r\n         *\r\n         * @param manager\r\n         */\r\n        PluginManager.prototype.addFileManager = function (manager) {\r\n            this.fileManagers.push(manager);\r\n        };\r\n        /**\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        PluginManager.prototype.getPreProcessors = function () {\r\n            var preProcessors = [];\r\n            for (var i = 0; i < this.preProcessors.length; i++) {\r\n                preProcessors.push(this.preProcessors[i].preProcessor);\r\n            }\r\n            return preProcessors;\r\n        };\r\n        /**\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        PluginManager.prototype.getPostProcessors = function () {\r\n            var postProcessors = [];\r\n            for (var i = 0; i < this.postProcessors.length; i++) {\r\n                postProcessors.push(this.postProcessors[i].postProcessor);\r\n            }\r\n            return postProcessors;\r\n        };\r\n        /**\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        PluginManager.prototype.getVisitors = function () {\r\n            return this.visitors;\r\n        };\r\n        PluginManager.prototype.visitor = function () {\r\n            var self = this;\r\n            return {\r\n                first: function () {\r\n                    self.iterator = -1;\r\n                    return self.visitors[self.iterator];\r\n                },\r\n                get: function () {\r\n                    self.iterator += 1;\r\n                    return self.visitors[self.iterator];\r\n                }\r\n            };\r\n        };\r\n        /**\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        PluginManager.prototype.getFileManagers = function () {\r\n            return this.fileManagers;\r\n        };\r\n        return PluginManager;\r\n    }());\r\n    var pm;\r\n    var PluginManagerFactory = function (less, newFactory) {\r\n        if (newFactory || !pm) {\r\n            pm = new PluginManager(less);\r\n        }\r\n        return pm;\r\n    };\n\n    function SourceMapOutput (environment) {\r\n        var SourceMapOutput = /** @class */ (function () {\r\n            function SourceMapOutput(options) {\r\n                this._css = [];\r\n                this._rootNode = options.rootNode;\r\n                this._contentsMap = options.contentsMap;\r\n                this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\r\n                if (options.sourceMapFilename) {\r\n                    this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\r\n                }\r\n                this._outputFilename = options.outputFilename;\r\n                this.sourceMapURL = options.sourceMapURL;\r\n                if (options.sourceMapBasepath) {\r\n                    this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\r\n                }\r\n                if (options.sourceMapRootpath) {\r\n                    this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\r\n                    if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\r\n                        this._sourceMapRootpath += '/';\r\n                    }\r\n                }\r\n                else {\r\n                    this._sourceMapRootpath = '';\r\n                }\r\n                this._outputSourceFiles = options.outputSourceFiles;\r\n                this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\r\n                this._lineNumber = 0;\r\n                this._column = 0;\r\n            }\r\n            SourceMapOutput.prototype.removeBasepath = function (path) {\r\n                if (this._sourceMapBasepath && path.indexOf(this._sourceMapBasepath) === 0) {\r\n                    path = path.substring(this._sourceMapBasepath.length);\r\n                    if (path.charAt(0) === '\\\\' || path.charAt(0) === '/') {\r\n                        path = path.substring(1);\r\n                    }\r\n                }\r\n                return path;\r\n            };\r\n            SourceMapOutput.prototype.normalizeFilename = function (filename) {\r\n                filename = filename.replace(/\\\\/g, '/');\r\n                filename = this.removeBasepath(filename);\r\n                return (this._sourceMapRootpath || '') + filename;\r\n            };\r\n            SourceMapOutput.prototype.add = function (chunk, fileInfo, index, mapLines) {\r\n                // ignore adding empty strings\r\n                if (!chunk) {\r\n                    return;\r\n                }\r\n                var lines, sourceLines, columns, sourceColumns, i;\r\n                if (fileInfo && fileInfo.filename) {\r\n                    var inputSource = this._contentsMap[fileInfo.filename];\r\n                    // remove vars/banner added to the top of the file\r\n                    if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\r\n                        // adjust the index\r\n                        index -= this._contentsIgnoredCharsMap[fileInfo.filename];\r\n                        if (index < 0) {\r\n                            index = 0;\r\n                        }\r\n                        // adjust the source\r\n                        inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\r\n                    }\r\n                    /**\r\n                     * ignore empty content, or failsafe\r\n                     * if contents map is incorrect\r\n                     */\r\n                    if (inputSource === undefined) {\r\n                        this._css.push(chunk);\r\n                        return;\r\n                    }\r\n                    inputSource = inputSource.substring(0, index);\r\n                    sourceLines = inputSource.split('\\n');\r\n                    sourceColumns = sourceLines[sourceLines.length - 1];\r\n                }\r\n                lines = chunk.split('\\n');\r\n                columns = lines[lines.length - 1];\r\n                if (fileInfo && fileInfo.filename) {\r\n                    if (!mapLines) {\r\n                        this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + 1, column: this._column },\r\n                            original: { line: sourceLines.length, column: sourceColumns.length },\r\n                            source: this.normalizeFilename(fileInfo.filename) });\r\n                    }\r\n                    else {\r\n                        for (i = 0; i < lines.length; i++) {\r\n                            this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + i + 1, column: i === 0 ? this._column : 0 },\r\n                                original: { line: sourceLines.length + i, column: i === 0 ? sourceColumns.length : 0 },\r\n                                source: this.normalizeFilename(fileInfo.filename) });\r\n                        }\r\n                    }\r\n                }\r\n                if (lines.length === 1) {\r\n                    this._column += columns.length;\r\n                }\r\n                else {\r\n                    this._lineNumber += lines.length - 1;\r\n                    this._column = columns.length;\r\n                }\r\n                this._css.push(chunk);\r\n            };\r\n            SourceMapOutput.prototype.isEmpty = function () {\r\n                return this._css.length === 0;\r\n            };\r\n            SourceMapOutput.prototype.toCSS = function (context) {\r\n                this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({ file: this._outputFilename, sourceRoot: null });\r\n                if (this._outputSourceFiles) {\r\n                    for (var filename in this._contentsMap) {\r\n                        if (this._contentsMap.hasOwnProperty(filename)) {\r\n                            var source = this._contentsMap[filename];\r\n                            if (this._contentsIgnoredCharsMap[filename]) {\r\n                                source = source.slice(this._contentsIgnoredCharsMap[filename]);\r\n                            }\r\n                            this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\r\n                        }\r\n                    }\r\n                }\r\n                this._rootNode.genCSS(context, this);\r\n                if (this._css.length > 0) {\r\n                    var sourceMapURL = void 0;\r\n                    var sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\r\n                    if (this.sourceMapURL) {\r\n                        sourceMapURL = this.sourceMapURL;\r\n                    }\r\n                    else if (this._sourceMapFilename) {\r\n                        sourceMapURL = this._sourceMapFilename;\r\n                    }\r\n                    this.sourceMapURL = sourceMapURL;\r\n                    this.sourceMap = sourceMapContent;\r\n                }\r\n                return this._css.join('');\r\n            };\r\n            return SourceMapOutput;\r\n        }());\r\n        return SourceMapOutput;\r\n    }\n\n    function SourceMapBuilder (SourceMapOutput, environment) {\r\n        var SourceMapBuilder = /** @class */ (function () {\r\n            function SourceMapBuilder(options) {\r\n                this.options = options;\r\n            }\r\n            SourceMapBuilder.prototype.toCSS = function (rootNode, options, imports) {\r\n                var sourceMapOutput = new SourceMapOutput({\r\n                    contentsIgnoredCharsMap: imports.contentsIgnoredChars,\r\n                    rootNode: rootNode,\r\n                    contentsMap: imports.contents,\r\n                    sourceMapFilename: this.options.sourceMapFilename,\r\n                    sourceMapURL: this.options.sourceMapURL,\r\n                    outputFilename: this.options.sourceMapOutputFilename,\r\n                    sourceMapBasepath: this.options.sourceMapBasepath,\r\n                    sourceMapRootpath: this.options.sourceMapRootpath,\r\n                    outputSourceFiles: this.options.outputSourceFiles,\r\n                    sourceMapGenerator: this.options.sourceMapGenerator,\r\n                    sourceMapFileInline: this.options.sourceMapFileInline,\r\n                    disableSourcemapAnnotation: this.options.disableSourcemapAnnotation\r\n                });\r\n                var css = sourceMapOutput.toCSS(options);\r\n                this.sourceMap = sourceMapOutput.sourceMap;\r\n                this.sourceMapURL = sourceMapOutput.sourceMapURL;\r\n                if (this.options.sourceMapInputFilename) {\r\n                    this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);\r\n                }\r\n                if (this.options.sourceMapBasepath !== undefined && this.sourceMapURL !== undefined) {\r\n                    this.sourceMapURL = sourceMapOutput.removeBasepath(this.sourceMapURL);\r\n                }\r\n                return css + this.getCSSAppendage();\r\n            };\r\n            SourceMapBuilder.prototype.getCSSAppendage = function () {\r\n                var sourceMapURL = this.sourceMapURL;\r\n                if (this.options.sourceMapFileInline) {\r\n                    if (this.sourceMap === undefined) {\r\n                        return '';\r\n                    }\r\n                    sourceMapURL = \"data:application/json;base64,\" + environment.encodeBase64(this.sourceMap);\r\n                }\r\n                if (this.options.disableSourcemapAnnotation) {\r\n                    return '';\r\n                }\r\n                if (sourceMapURL) {\r\n                    return \"/*# sourceMappingURL=\" + sourceMapURL + \" */\";\r\n                }\r\n                return '';\r\n            };\r\n            SourceMapBuilder.prototype.getExternalSourceMap = function () {\r\n                return this.sourceMap;\r\n            };\r\n            SourceMapBuilder.prototype.setExternalSourceMap = function (sourceMap) {\r\n                this.sourceMap = sourceMap;\r\n            };\r\n            SourceMapBuilder.prototype.isInline = function () {\r\n                return this.options.sourceMapFileInline;\r\n            };\r\n            SourceMapBuilder.prototype.getSourceMapURL = function () {\r\n                return this.sourceMapURL;\r\n            };\r\n            SourceMapBuilder.prototype.getOutputFilename = function () {\r\n                return this.options.sourceMapOutputFilename;\r\n            };\r\n            SourceMapBuilder.prototype.getInputFilename = function () {\r\n                return this.sourceMapInputFilename;\r\n            };\r\n            return SourceMapBuilder;\r\n        }());\r\n        return SourceMapBuilder;\r\n    }\n\n    function ParseTree (SourceMapBuilder) {\r\n        var ParseTree = /** @class */ (function () {\r\n            function ParseTree(root, imports) {\r\n                this.root = root;\r\n                this.imports = imports;\r\n            }\r\n            ParseTree.prototype.toCSS = function (options) {\r\n                var evaldRoot;\r\n                var result = {};\r\n                var sourceMapBuilder;\r\n                try {\r\n                    evaldRoot = transformTree(this.root, options);\r\n                }\r\n                catch (e) {\r\n                    throw new LessError(e, this.imports);\r\n                }\r\n                try {\r\n                    var compress = Boolean(options.compress);\r\n                    if (compress) {\r\n                        logger.warn('The compress option has been deprecated. ' +\r\n                            'We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\r\n                    }\r\n                    var toCSSOptions = {\r\n                        compress: compress,\r\n                        dumpLineNumbers: options.dumpLineNumbers,\r\n                        strictUnits: Boolean(options.strictUnits),\r\n                        numPrecision: 8\r\n                    };\r\n                    if (options.sourceMap) {\r\n                        sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\r\n                        result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\r\n                    }\r\n                    else {\r\n                        result.css = evaldRoot.toCSS(toCSSOptions);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    throw new LessError(e, this.imports);\r\n                }\r\n                if (options.pluginManager) {\r\n                    var postProcessors = options.pluginManager.getPostProcessors();\r\n                    for (var i = 0; i < postProcessors.length; i++) {\r\n                        result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options: options, imports: this.imports });\r\n                    }\r\n                }\r\n                if (options.sourceMap) {\r\n                    result.map = sourceMapBuilder.getExternalSourceMap();\r\n                }\r\n                result.imports = [];\r\n                for (var file in this.imports.files) {\r\n                    if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\r\n                        result.imports.push(file);\r\n                    }\r\n                }\r\n                return result;\r\n            };\r\n            return ParseTree;\r\n        }());\r\n        return ParseTree;\r\n    }\n\n    function ImportManager (environment) {\r\n        // FileInfo = {\r\n        //  'rewriteUrls' - option - whether to adjust URL's to be relative\r\n        //  'filename' - full resolved filename of current file\r\n        //  'rootpath' - path to append to normal URLs for this node\r\n        //  'currentDirectory' - path to the current file, absolute\r\n        //  'rootFilename' - filename of the base file\r\n        //  'entryPath' - absolute path to the entry file\r\n        //  'reference' - whether the file should not be output and only output parts that are referenced\r\n        var ImportManager = /** @class */ (function () {\r\n            function ImportManager(less, context, rootFileInfo) {\r\n                this.less = less;\r\n                this.rootFilename = rootFileInfo.filename;\r\n                this.paths = context.paths || []; // Search paths, when importing\r\n                this.contents = {}; // map - filename to contents of all the files\r\n                this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\r\n                this.mime = context.mime;\r\n                this.error = null;\r\n                this.context = context;\r\n                // Deprecated? Unused outside of here, could be useful.\r\n                this.queue = []; // Files which haven't been imported yet\r\n                this.files = {}; // Holds the imported parse trees.\r\n            }\r\n            /**\r\n             * Add an import to be imported\r\n             * @param path - the raw path\r\n             * @param tryAppendExtension - whether to try appending a file extension (.less or .js if the path has no extension)\r\n             * @param currentFileInfo - the current file info (used for instance to work out relative paths)\r\n             * @param importOptions - import options\r\n             * @param callback - callback for when it is imported\r\n             */\r\n            ImportManager.prototype.push = function (path, tryAppendExtension, currentFileInfo, importOptions, callback) {\r\n                var importManager = this, pluginLoader = this.context.pluginManager.Loader;\r\n                this.queue.push(path);\r\n                var fileParsedFunc = function (e, root, fullPath) {\r\n                    importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\r\n                    var importedEqualsRoot = fullPath === importManager.rootFilename;\r\n                    if (importOptions.optional && e) {\r\n                        callback(null, { rules: [] }, false, null);\r\n                        logger.info(\"The file \" + fullPath + \" was skipped because it was not found and the import was marked optional.\");\r\n                    }\r\n                    else {\r\n                        // Inline imports aren't cached here.\r\n                        // If we start to cache them, please make sure they won't conflict with non-inline imports of the\r\n                        // same name as they used to do before this comment and the condition below have been added.\r\n                        if (!importManager.files[fullPath] && !importOptions.inline) {\r\n                            importManager.files[fullPath] = { root: root, options: importOptions };\r\n                        }\r\n                        if (e && !importManager.error) {\r\n                            importManager.error = e;\r\n                        }\r\n                        callback(e, root, importedEqualsRoot, fullPath);\r\n                    }\r\n                };\r\n                var newFileInfo = {\r\n                    rewriteUrls: this.context.rewriteUrls,\r\n                    entryPath: currentFileInfo.entryPath,\r\n                    rootpath: currentFileInfo.rootpath,\r\n                    rootFilename: currentFileInfo.rootFilename\r\n                };\r\n                var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\r\n                if (!fileManager) {\r\n                    fileParsedFunc({ message: \"Could not find a file-manager for \" + path });\r\n                    return;\r\n                }\r\n                var loadFileCallback = function (loadedFile) {\r\n                    var plugin;\r\n                    var resolvedFilename = loadedFile.filename;\r\n                    var contents = loadedFile.contents.replace(/^\\uFEFF/, '');\r\n                    // Pass on an updated rootpath if path of imported file is relative and file\r\n                    // is in a (sub|sup) directory\r\n                    //\r\n                    // Examples:\r\n                    // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\r\n                    //   then rootpath should become 'less/module/nav/'\r\n                    // - If path of imported file is '../mixins.less' and rootpath is 'less/',\r\n                    //   then rootpath should become 'less/../'\r\n                    newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\r\n                    if (newFileInfo.rewriteUrls) {\r\n                        newFileInfo.rootpath = fileManager.join((importManager.context.rootpath || ''), fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\r\n                        if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\r\n                            newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\r\n                        }\r\n                    }\r\n                    newFileInfo.filename = resolvedFilename;\r\n                    var newEnv = new contexts.Parse(importManager.context);\r\n                    newEnv.processImports = false;\r\n                    importManager.contents[resolvedFilename] = contents;\r\n                    if (currentFileInfo.reference || importOptions.reference) {\r\n                        newFileInfo.reference = true;\r\n                    }\r\n                    if (importOptions.isPlugin) {\r\n                        plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\r\n                        if (plugin instanceof LessError) {\r\n                            fileParsedFunc(plugin, null, resolvedFilename);\r\n                        }\r\n                        else {\r\n                            fileParsedFunc(null, plugin, resolvedFilename);\r\n                        }\r\n                    }\r\n                    else if (importOptions.inline) {\r\n                        fileParsedFunc(null, contents, resolvedFilename);\r\n                    }\r\n                    else {\r\n                        // import (multiple) parse trees apparently get altered and can't be cached.\r\n                        // TODO: investigate why this is\r\n                        if (importManager.files[resolvedFilename]\r\n                            && !importManager.files[resolvedFilename].options.multiple\r\n                            && !importOptions.multiple) {\r\n                            fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\r\n                        }\r\n                        else {\r\n                            new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {\r\n                                fileParsedFunc(e, root, resolvedFilename);\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n                var loadedFile;\r\n                var promise;\r\n                var context = clone(this.context);\r\n                if (tryAppendExtension) {\r\n                    context.ext = importOptions.isPlugin ? '.js' : '.less';\r\n                }\r\n                if (importOptions.isPlugin) {\r\n                    context.mime = 'application/javascript';\r\n                    if (context.syncImport) {\r\n                        loadedFile = pluginLoader.loadPluginSync(path, currentFileInfo.currentDirectory, context, environment, fileManager);\r\n                    }\r\n                    else {\r\n                        promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\r\n                    }\r\n                }\r\n                else {\r\n                    if (context.syncImport) {\r\n                        loadedFile = fileManager.loadFileSync(path, currentFileInfo.currentDirectory, context, environment);\r\n                    }\r\n                    else {\r\n                        promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment, function (err, loadedFile) {\r\n                            if (err) {\r\n                                fileParsedFunc(err);\r\n                            }\r\n                            else {\r\n                                loadFileCallback(loadedFile);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                if (loadedFile) {\r\n                    if (!loadedFile.filename) {\r\n                        fileParsedFunc(loadedFile);\r\n                    }\r\n                    else {\r\n                        loadFileCallback(loadedFile);\r\n                    }\r\n                }\r\n                else if (promise) {\r\n                    promise.then(loadFileCallback, fileParsedFunc);\r\n                }\r\n            };\r\n            return ImportManager;\r\n        }());\r\n        return ImportManager;\r\n    }\n\n    function Parse (environment, ParseTree, ImportManager) {\r\n        var parse = function (input, options, callback) {\r\n            if (typeof options === 'function') {\r\n                callback = options;\r\n                options = copyOptions(this.options, {});\r\n            }\r\n            else {\r\n                options = copyOptions(this.options, options || {});\r\n            }\r\n            if (!callback) {\r\n                var self_1 = this;\r\n                return new Promise(function (resolve, reject) {\r\n                    parse.call(self_1, input, options, function (err, output) {\r\n                        if (err) {\r\n                            reject(err);\r\n                        }\r\n                        else {\r\n                            resolve(output);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                var context_1;\r\n                var rootFileInfo = void 0;\r\n                var pluginManager_1 = new PluginManagerFactory(this, !options.reUsePluginManager);\r\n                options.pluginManager = pluginManager_1;\r\n                context_1 = new contexts.Parse(options);\r\n                if (options.rootFileInfo) {\r\n                    rootFileInfo = options.rootFileInfo;\r\n                }\r\n                else {\r\n                    var filename = options.filename || 'input';\r\n                    var entryPath = filename.replace(/[^\\/\\\\]*$/, '');\r\n                    rootFileInfo = {\r\n                        filename: filename,\r\n                        rewriteUrls: context_1.rewriteUrls,\r\n                        rootpath: context_1.rootpath || '',\r\n                        currentDirectory: entryPath,\r\n                        entryPath: entryPath,\r\n                        rootFilename: filename\r\n                    };\r\n                    // add in a missing trailing slash\r\n                    if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\r\n                        rootFileInfo.rootpath += '/';\r\n                    }\r\n                }\r\n                var imports_1 = new ImportManager(this, context_1, rootFileInfo);\r\n                this.importManager = imports_1;\r\n                // TODO: allow the plugins to be just a list of paths or names\r\n                // Do an async plugin queue like lessc\r\n                if (options.plugins) {\r\n                    options.plugins.forEach(function (plugin) {\r\n                        var evalResult, contents;\r\n                        if (plugin.fileContent) {\r\n                            contents = plugin.fileContent.replace(/^\\uFEFF/, '');\r\n                            evalResult = pluginManager_1.Loader.evalPlugin(contents, context_1, imports_1, plugin.options, plugin.filename);\r\n                            if (evalResult instanceof LessError) {\r\n                                return callback(evalResult);\r\n                            }\r\n                        }\r\n                        else {\r\n                            pluginManager_1.addPlugin(plugin);\r\n                        }\r\n                    });\r\n                }\r\n                new Parser(context_1, imports_1, rootFileInfo)\r\n                    .parse(input, function (e, root) {\r\n                    if (e) {\r\n                        return callback(e);\r\n                    }\r\n                    callback(null, root, imports_1, options);\r\n                }, options);\r\n            }\r\n        };\r\n        return parse;\r\n    }\n\n    function Render (environment, ParseTree, ImportManager) {\r\n        var render = function (input, options, callback) {\r\n            if (typeof options === 'function') {\r\n                callback = options;\r\n                options = copyOptions(this.options, {});\r\n            }\r\n            else {\r\n                options = copyOptions(this.options, options || {});\r\n            }\r\n            if (!callback) {\r\n                var self_1 = this;\r\n                return new Promise(function (resolve, reject) {\r\n                    render.call(self_1, input, options, function (err, output) {\r\n                        if (err) {\r\n                            reject(err);\r\n                        }\r\n                        else {\r\n                            resolve(output);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                this.parse(input, options, function (err, root, imports, options) {\r\n                    if (err) {\r\n                        return callback(err);\r\n                    }\r\n                    var result;\r\n                    try {\r\n                        var parseTree = new ParseTree(root, imports);\r\n                        result = parseTree.toCSS(options);\r\n                    }\r\n                    catch (err) {\r\n                        return callback(err);\r\n                    }\r\n                    callback(null, result);\r\n                });\r\n            }\r\n        };\r\n        return render;\r\n    }\n\n    var version = \"4.1.1\";\n\n    function parseNodeVersion(version) {\n      var match = version.match(/^v(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})(?:-([0-9A-Za-z-.]+))?(?:\\+([0-9A-Za-z-.]+))?$/); // eslint-disable-line max-len\n      if (!match) {\n        throw new Error('Unable to parse: ' + version);\n      }\n\n      var res = {\n        major: parseInt(match[1], 10),\n        minor: parseInt(match[2], 10),\n        patch: parseInt(match[3], 10),\n        pre: match[4] || '',\n        build: match[5] || '',\n      };\n\n      return res;\n    }\n\n    var parseNodeVersion_1 = parseNodeVersion;\n\n    function lessRoot (environment, fileManagers) {\r\n        var sourceMapOutput, sourceMapBuilder, parseTree, importManager;\r\n        environment = new Environment(environment, fileManagers);\r\n        sourceMapOutput = SourceMapOutput(environment);\r\n        sourceMapBuilder = SourceMapBuilder(sourceMapOutput, environment);\r\n        parseTree = ParseTree(sourceMapBuilder);\r\n        importManager = ImportManager(environment);\r\n        var render = Render(environment, parseTree);\r\n        var parse = Parse(environment, parseTree, importManager);\r\n        var v = parseNodeVersion_1(\"v\" + version);\r\n        var initial = {\r\n            version: [v.major, v.minor, v.patch],\r\n            data: data,\r\n            tree: tree,\r\n            Environment: Environment,\r\n            AbstractFileManager: AbstractFileManager,\r\n            AbstractPluginLoader: AbstractPluginLoader,\r\n            environment: environment,\r\n            visitors: visitors,\r\n            Parser: Parser,\r\n            functions: functions(environment),\r\n            contexts: contexts,\r\n            SourceMapOutput: sourceMapOutput,\r\n            SourceMapBuilder: sourceMapBuilder,\r\n            ParseTree: parseTree,\r\n            ImportManager: importManager,\r\n            render: render,\r\n            parse: parse,\r\n            LessError: LessError,\r\n            transformTree: transformTree,\r\n            utils: utils,\r\n            PluginManager: PluginManagerFactory,\r\n            logger: logger\r\n        };\r\n        // Create a public API\r\n        var ctor = function (t) {\r\n            return function () {\r\n                var obj = Object.create(t.prototype);\r\n                t.apply(obj, Array.prototype.slice.call(arguments, 0));\r\n                return obj;\r\n            };\r\n        };\r\n        var t;\r\n        var api = Object.create(initial);\r\n        for (var n in initial.tree) {\r\n            /* eslint guard-for-in: 0 */\r\n            t = initial.tree[n];\r\n            if (typeof t === 'function') {\r\n                api[n.toLowerCase()] = ctor(t);\r\n            }\r\n            else {\r\n                api[n] = Object.create(null);\r\n                for (var o in t) {\r\n                    /* eslint guard-for-in: 0 */\r\n                    api[n][o.toLowerCase()] = ctor(t[o]);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Some of the functions assume a `this` context of the API object,\r\n         * which causes it to fail when wrapped for ES6 imports.\r\n         *\r\n         * An assumed `this` should be removed in the future.\r\n         */\r\n        initial.parse = initial.parse.bind(api);\r\n        initial.render = initial.render.bind(api);\r\n        return api;\r\n    }\n\n    /* global window, XMLHttpRequest */\r\n    var options;\r\n    var logger$1;\r\n    var fileCache = {};\r\n    // TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\r\n    var FileManager = function () { };\r\n    FileManager.prototype = Object.assign(new AbstractFileManager(), {\r\n        alwaysMakePathsAbsolute: function () {\r\n            return true;\r\n        },\r\n        join: function (basePath, laterPath) {\r\n            if (!basePath) {\r\n                return laterPath;\r\n            }\r\n            return this.extractUrlParts(laterPath, basePath).path;\r\n        },\r\n        doXHR: function (url, type, callback, errback) {\r\n            var xhr = new XMLHttpRequest();\r\n            var async = options.isFileProtocol ? options.fileAsync : true;\r\n            if (typeof xhr.overrideMimeType === 'function') {\r\n                xhr.overrideMimeType('text/css');\r\n            }\r\n            logger$1.debug(\"XHR: Getting '\" + url + \"'\");\r\n            xhr.open('GET', url, async);\r\n            xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\r\n            xhr.send(null);\r\n            function handleResponse(xhr, callback, errback) {\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    callback(xhr.responseText, xhr.getResponseHeader('Last-Modified'));\r\n                }\r\n                else if (typeof errback === 'function') {\r\n                    errback(xhr.status, url);\r\n                }\r\n            }\r\n            if (options.isFileProtocol && !options.fileAsync) {\r\n                if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 300)) {\r\n                    callback(xhr.responseText);\r\n                }\r\n                else {\r\n                    errback(xhr.status, url);\r\n                }\r\n            }\r\n            else if (async) {\r\n                xhr.onreadystatechange = function () {\r\n                    if (xhr.readyState == 4) {\r\n                        handleResponse(xhr, callback, errback);\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                handleResponse(xhr, callback, errback);\r\n            }\r\n        },\r\n        supports: function () {\r\n            return true;\r\n        },\r\n        clearFileCache: function () {\r\n            fileCache = {};\r\n        },\r\n        loadFile: function (filename, currentDirectory, options, environment) {\r\n            // TODO: Add prefix support like less-node?\r\n            // What about multiple paths?\r\n            if (currentDirectory && !this.isPathAbsolute(filename)) {\r\n                filename = currentDirectory + filename;\r\n            }\r\n            filename = options.ext ? this.tryAppendExtension(filename, options.ext) : filename;\r\n            options = options || {};\r\n            // sheet may be set to the stylesheet for the initial load or a collection of properties including\r\n            // some context variables for imports\r\n            var hrefParts = this.extractUrlParts(filename, window.location.href);\r\n            var href = hrefParts.url;\r\n            var self = this;\r\n            return new Promise(function (resolve, reject) {\r\n                if (options.useFileCache && fileCache[href]) {\r\n                    try {\r\n                        var lessText = fileCache[href];\r\n                        return resolve({ contents: lessText, filename: href, webInfo: { lastModified: new Date() } });\r\n                    }\r\n                    catch (e) {\r\n                        return reject({ filename: href, message: \"Error loading file \" + href + \" error was \" + e.message });\r\n                    }\r\n                }\r\n                self.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\r\n                    // per file cache\r\n                    fileCache[href] = data;\r\n                    // Use remote copy (re-parse)\r\n                    resolve({ contents: data, filename: href, webInfo: { lastModified: lastModified } });\r\n                }, function doXHRError(status, url) {\r\n                    reject({ type: 'File', message: \"'\" + url + \"' wasn't found (\" + status + \")\", href: href });\r\n                });\r\n            });\r\n        }\r\n    });\r\n    var FM = (function (opts, log) {\r\n        options = opts;\r\n        logger$1 = log;\r\n        return FileManager;\r\n    });\n\n    // TODO: Add tests for browser @plugin\r\n    /**\r\n     * Browser Plugin Loader\r\n     */\r\n    var PluginLoader = function (less) {\r\n        this.less = less;\r\n        // Should we shim this.require for browser? Probably not?\r\n    };\r\n    PluginLoader.prototype = Object.assign(new AbstractPluginLoader(), {\r\n        loadPlugin: function (filename, basePath, context, environment, fileManager) {\r\n            return new Promise(function (fulfill, reject) {\r\n                fileManager.loadFile(filename, basePath, context, environment)\r\n                    .then(fulfill).catch(reject);\r\n            });\r\n        }\r\n    });\n\n    var LogListener = (function (less, options) {\r\n        var logLevel_debug = 4;\r\n        var logLevel_info = 3;\r\n        var logLevel_warn = 2;\r\n        var logLevel_error = 1;\r\n        // The amount of logging in the javascript console.\r\n        // 3 - Debug, information and errors\r\n        // 2 - Information and errors\r\n        // 1 - Errors\r\n        // 0 - None\r\n        // Defaults to 2\r\n        options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : (options.env === 'development' ? logLevel_info : logLevel_error);\r\n        if (!options.loggers) {\r\n            options.loggers = [{\r\n                    debug: function (msg) {\r\n                        if (options.logLevel >= logLevel_debug) {\r\n                            console.log(msg);\r\n                        }\r\n                    },\r\n                    info: function (msg) {\r\n                        if (options.logLevel >= logLevel_info) {\r\n                            console.log(msg);\r\n                        }\r\n                    },\r\n                    warn: function (msg) {\r\n                        if (options.logLevel >= logLevel_warn) {\r\n                            console.warn(msg);\r\n                        }\r\n                    },\r\n                    error: function (msg) {\r\n                        if (options.logLevel >= logLevel_error) {\r\n                            console.error(msg);\r\n                        }\r\n                    }\r\n                }];\r\n        }\r\n        for (var i = 0; i < options.loggers.length; i++) {\r\n            less.logger.addListener(options.loggers[i]);\r\n        }\r\n    });\n\n    var ErrorReporting = (function (window, less, options) {\r\n        function errorHTML(e, rootHref) {\r\n            var id = \"less-error-message:\" + extractId(rootHref || '');\r\n            var template = '<li><label>{line}</label><pre class=\"{class}\">{content}</pre></li>';\r\n            var elem = window.document.createElement('div');\r\n            var timer;\r\n            var content;\r\n            var errors = [];\r\n            var filename = e.filename || rootHref;\r\n            var filenameNoPath = filename.match(/([^\\/]+(\\?.*)?)$/)[1];\r\n            elem.id = id;\r\n            elem.className = 'less-error-message';\r\n            content = \"<h3>\" + (e.type || 'Syntax') + \"Error: \" + (e.message || 'There is an error in your .less file') +\r\n                (\"</h3><p>in <a href=\\\"\" + filename + \"\\\">\" + filenameNoPath + \"</a> \");\r\n            var errorline = function (e, i, classname) {\r\n                if (e.extract[i] !== undefined) {\r\n                    errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\r\n                        .replace(/\\{class\\}/, classname)\r\n                        .replace(/\\{content\\}/, e.extract[i]));\r\n                }\r\n            };\r\n            if (e.line) {\r\n                errorline(e, 0, '');\r\n                errorline(e, 1, 'line');\r\n                errorline(e, 2, '');\r\n                content += \"on line \" + e.line + \", column \" + (e.column + 1) + \":</p><ul>\" + errors.join('') + \"</ul>\";\r\n            }\r\n            if (e.stack && (e.extract || options.logLevel >= 4)) {\r\n                content += \"<br/>Stack Trace</br />\" + e.stack.split('\\n').slice(1).join('<br/>');\r\n            }\r\n            elem.innerHTML = content;\r\n            // CSS for error messages\r\n            browser.createCSS(window.document, [\r\n                '.less-error-message ul, .less-error-message li {',\r\n                'list-style-type: none;',\r\n                'margin-right: 15px;',\r\n                'padding: 4px 0;',\r\n                'margin: 0;',\r\n                '}',\r\n                '.less-error-message label {',\r\n                'font-size: 12px;',\r\n                'margin-right: 15px;',\r\n                'padding: 4px 0;',\r\n                'color: #cc7777;',\r\n                '}',\r\n                '.less-error-message pre {',\r\n                'color: #dd6666;',\r\n                'padding: 4px 0;',\r\n                'margin: 0;',\r\n                'display: inline-block;',\r\n                '}',\r\n                '.less-error-message pre.line {',\r\n                'color: #ff0000;',\r\n                '}',\r\n                '.less-error-message h3 {',\r\n                'font-size: 20px;',\r\n                'font-weight: bold;',\r\n                'padding: 15px 0 5px 0;',\r\n                'margin: 0;',\r\n                '}',\r\n                '.less-error-message a {',\r\n                'color: #10a',\r\n                '}',\r\n                '.less-error-message .error {',\r\n                'color: red;',\r\n                'font-weight: bold;',\r\n                'padding-bottom: 2px;',\r\n                'border-bottom: 1px dashed red;',\r\n                '}'\r\n            ].join('\\n'), { title: 'error-message' });\r\n            elem.style.cssText = [\r\n                'font-family: Arial, sans-serif',\r\n                'border: 1px solid #e00',\r\n                'background-color: #eee',\r\n                'border-radius: 5px',\r\n                '-webkit-border-radius: 5px',\r\n                '-moz-border-radius: 5px',\r\n                'color: #e00',\r\n                'padding: 15px',\r\n                'margin-bottom: 15px'\r\n            ].join(';');\r\n            if (options.env === 'development') {\r\n                timer = setInterval(function () {\r\n                    var document = window.document;\r\n                    var body = document.body;\r\n                    if (body) {\r\n                        if (document.getElementById(id)) {\r\n                            body.replaceChild(elem, document.getElementById(id));\r\n                        }\r\n                        else {\r\n                            body.insertBefore(elem, body.firstChild);\r\n                        }\r\n                        clearInterval(timer);\r\n                    }\r\n                }, 10);\r\n            }\r\n        }\r\n        function removeErrorHTML(path) {\r\n            var node = window.document.getElementById(\"less-error-message:\" + extractId(path));\r\n            if (node) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        }\r\n        function removeError(path) {\r\n            if (!options.errorReporting || options.errorReporting === 'html') {\r\n                removeErrorHTML(path);\r\n            }\r\n            else if (options.errorReporting === 'console') ;\r\n            else if (typeof options.errorReporting === 'function') {\r\n                options.errorReporting('remove', path);\r\n            }\r\n        }\r\n        function errorConsole(e, rootHref) {\r\n            var template = '{line} {content}';\r\n            var filename = e.filename || rootHref;\r\n            var errors = [];\r\n            var content = (e.type || 'Syntax') + \"Error: \" + (e.message || 'There is an error in your .less file') + \" in \" + filename;\r\n            var errorline = function (e, i, classname) {\r\n                if (e.extract[i] !== undefined) {\r\n                    errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\r\n                        .replace(/\\{class\\}/, classname)\r\n                        .replace(/\\{content\\}/, e.extract[i]));\r\n                }\r\n            };\r\n            if (e.line) {\r\n                errorline(e, 0, '');\r\n                errorline(e, 1, 'line');\r\n                errorline(e, 2, '');\r\n                content += \" on line \" + e.line + \", column \" + (e.column + 1) + \":\\n\" + errors.join('\\n');\r\n            }\r\n            if (e.stack && (e.extract || options.logLevel >= 4)) {\r\n                content += \"\\nStack Trace\\n\" + e.stack;\r\n            }\r\n            less.logger.error(content);\r\n        }\r\n        function error(e, rootHref) {\r\n            if (!options.errorReporting || options.errorReporting === 'html') {\r\n                errorHTML(e, rootHref);\r\n            }\r\n            else if (options.errorReporting === 'console') {\r\n                errorConsole(e, rootHref);\r\n            }\r\n            else if (typeof options.errorReporting === 'function') {\r\n                options.errorReporting('add', e, rootHref);\r\n            }\r\n        }\r\n        return {\r\n            add: error,\r\n            remove: removeError\r\n        };\r\n    });\n\n    // Cache system is a bit outdated and could do with work\r\n    var Cache = (function (window, options, logger) {\r\n        var cache = null;\r\n        if (options.env !== 'development') {\r\n            try {\r\n                cache = (typeof window.localStorage === 'undefined') ? null : window.localStorage;\r\n            }\r\n            catch (_) { }\r\n        }\r\n        return {\r\n            setCSS: function (path, lastModified, modifyVars, styles) {\r\n                if (cache) {\r\n                    logger.info(\"saving \" + path + \" to cache.\");\r\n                    try {\r\n                        cache.setItem(path, styles);\r\n                        cache.setItem(path + \":timestamp\", lastModified);\r\n                        if (modifyVars) {\r\n                            cache.setItem(path + \":vars\", JSON.stringify(modifyVars));\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        // TODO - could do with adding more robust error handling\r\n                        logger.error(\"failed to save \\\"\" + path + \"\\\" to local storage for caching.\");\r\n                    }\r\n                }\r\n            },\r\n            getCSS: function (path, webInfo, modifyVars) {\r\n                var css = cache && cache.getItem(path);\r\n                var timestamp = cache && cache.getItem(path + \":timestamp\");\r\n                var vars = cache && cache.getItem(path + \":vars\");\r\n                modifyVars = modifyVars || {};\r\n                vars = vars || \"{}\"; // if not set, treat as the JSON representation of an empty object\r\n                if (timestamp && webInfo.lastModified &&\r\n                    (new Date(webInfo.lastModified).valueOf() ===\r\n                        new Date(timestamp).valueOf()) &&\r\n                    JSON.stringify(modifyVars) === vars) {\r\n                    // Use local copy\r\n                    return css;\r\n                }\r\n            }\r\n        };\r\n    });\n\n    var ImageSize = (function () {\r\n        function imageSize() {\r\n            throw {\r\n                type: 'Runtime',\r\n                message: 'Image size functions are not supported in browser version of less'\r\n            };\r\n        }\r\n        var imageFunctions = {\r\n            'image-size': function (filePathNode) {\r\n                imageSize();\r\n                return -1;\r\n            },\r\n            'image-width': function (filePathNode) {\r\n                imageSize();\r\n                return -1;\r\n            },\r\n            'image-height': function (filePathNode) {\r\n                imageSize();\r\n                return -1;\r\n            }\r\n        };\r\n        functionRegistry.addMultiple(imageFunctions);\r\n    });\n\n    //\r\n    var root = (function (window, options) {\r\n        var document = window.document;\r\n        var less = lessRoot();\r\n        less.options = options;\r\n        var environment = less.environment;\r\n        var FileManager = FM(options, less.logger);\r\n        var fileManager = new FileManager();\r\n        environment.addFileManager(fileManager);\r\n        less.FileManager = FileManager;\r\n        less.PluginLoader = PluginLoader;\r\n        LogListener(less, options);\r\n        var errors = ErrorReporting(window, less, options);\r\n        var cache = less.cache = options.cache || Cache(window, options, less.logger);\r\n        ImageSize(less.environment);\r\n        // Setup user functions - Deprecate?\r\n        if (options.functions) {\r\n            less.functions.functionRegistry.addMultiple(options.functions);\r\n        }\r\n        var typePattern = /^text\\/(x-)?less$/;\r\n        function clone(obj) {\r\n            var cloned = {};\r\n            for (var prop in obj) {\r\n                if (obj.hasOwnProperty(prop)) {\r\n                    cloned[prop] = obj[prop];\r\n                }\r\n            }\r\n            return cloned;\r\n        }\r\n        // only really needed for phantom\r\n        function bind(func, thisArg) {\r\n            var curryArgs = Array.prototype.slice.call(arguments, 2);\r\n            return function () {\r\n                var args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));\r\n                return func.apply(thisArg, args);\r\n            };\r\n        }\r\n        function loadStyles(modifyVars) {\r\n            var styles = document.getElementsByTagName('style');\r\n            var style;\r\n            for (var i = 0; i < styles.length; i++) {\r\n                style = styles[i];\r\n                if (style.type.match(typePattern)) {\r\n                    var instanceOptions = clone(options);\r\n                    instanceOptions.modifyVars = modifyVars;\r\n                    var lessText = style.innerHTML || '';\r\n                    instanceOptions.filename = document.location.href.replace(/#.*$/, '');\r\n                    /* jshint loopfunc:true */\r\n                    // use closure to store current style\r\n                    less.render(lessText, instanceOptions, bind(function (style, e, result) {\r\n                        if (e) {\r\n                            errors.add(e, 'inline');\r\n                        }\r\n                        else {\r\n                            style.type = 'text/css';\r\n                            if (style.styleSheet) {\r\n                                style.styleSheet.cssText = result.css;\r\n                            }\r\n                            else {\r\n                                style.innerHTML = result.css;\r\n                            }\r\n                        }\r\n                    }, null, style));\r\n                }\r\n            }\r\n        }\r\n        function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {\r\n            var instanceOptions = clone(options);\r\n            addDataAttr(instanceOptions, sheet);\r\n            instanceOptions.mime = sheet.type;\r\n            if (modifyVars) {\r\n                instanceOptions.modifyVars = modifyVars;\r\n            }\r\n            function loadInitialFileCallback(loadedFile) {\r\n                var data = loadedFile.contents;\r\n                var path = loadedFile.filename;\r\n                var webInfo = loadedFile.webInfo;\r\n                var newFileInfo = {\r\n                    currentDirectory: fileManager.getPath(path),\r\n                    filename: path,\r\n                    rootFilename: path,\r\n                    rewriteUrls: instanceOptions.rewriteUrls\r\n                };\r\n                newFileInfo.entryPath = newFileInfo.currentDirectory;\r\n                newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;\r\n                if (webInfo) {\r\n                    webInfo.remaining = remaining;\r\n                    var css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);\r\n                    if (!reload && css) {\r\n                        webInfo.local = true;\r\n                        callback(null, css, data, sheet, webInfo, path);\r\n                        return;\r\n                    }\r\n                }\r\n                // TODO add tests around how this behaves when reloading\r\n                errors.remove(path);\r\n                instanceOptions.rootFileInfo = newFileInfo;\r\n                less.render(data, instanceOptions, function (e, result) {\r\n                    if (e) {\r\n                        e.href = path;\r\n                        callback(e);\r\n                    }\r\n                    else {\r\n                        cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);\r\n                        callback(null, result.css, data, sheet, webInfo, path);\r\n                    }\r\n                });\r\n            }\r\n            fileManager.loadFile(sheet.href, null, instanceOptions, environment)\r\n                .then(function (loadedFile) {\r\n                loadInitialFileCallback(loadedFile);\r\n            }).catch(function (err) {\r\n                console.log(err);\r\n                callback(err);\r\n            });\r\n        }\r\n        function loadStyleSheets(callback, reload, modifyVars) {\r\n            for (var i = 0; i < less.sheets.length; i++) {\r\n                loadStyleSheet(less.sheets[i], callback, reload, less.sheets.length - (i + 1), modifyVars);\r\n            }\r\n        }\r\n        function initRunningMode() {\r\n            if (less.env === 'development') {\r\n                less.watchTimer = setInterval(function () {\r\n                    if (less.watchMode) {\r\n                        fileManager.clearFileCache();\r\n                        loadStyleSheets(function (e, css, _, sheet, webInfo) {\r\n                            if (e) {\r\n                                errors.add(e, e.href || sheet.href);\r\n                            }\r\n                            else if (css) {\r\n                                browser.createCSS(window.document, css, sheet);\r\n                            }\r\n                        });\r\n                    }\r\n                }, options.poll);\r\n            }\r\n        }\r\n        //\r\n        // Watch mode\r\n        //\r\n        less.watch = function () {\r\n            if (!less.watchMode) {\r\n                less.env = 'development';\r\n                initRunningMode();\r\n            }\r\n            this.watchMode = true;\r\n            return true;\r\n        };\r\n        less.unwatch = function () { clearInterval(less.watchTimer); this.watchMode = false; return false; };\r\n        //\r\n        // Synchronously get all <link> tags with the 'rel' attribute set to\r\n        // \"stylesheet/less\".\r\n        //\r\n        less.registerStylesheetsImmediately = function () {\r\n            var links = document.getElementsByTagName('link');\r\n            less.sheets = [];\r\n            for (var i = 0; i < links.length; i++) {\r\n                if (links[i].rel === 'stylesheet/less' || (links[i].rel.match(/stylesheet/) &&\r\n                    (links[i].type.match(typePattern)))) {\r\n                    less.sheets.push(links[i]);\r\n                }\r\n            }\r\n        };\r\n        //\r\n        // Asynchronously get all <link> tags with the 'rel' attribute set to\r\n        // \"stylesheet/less\", returning a Promise.\r\n        //\r\n        less.registerStylesheets = function () { return new Promise(function (resolve, reject) {\r\n            less.registerStylesheetsImmediately();\r\n            resolve();\r\n        }); };\r\n        //\r\n        // With this function, it's possible to alter variables and re-render\r\n        // CSS without reloading less-files\r\n        //\r\n        less.modifyVars = function (record) { return less.refresh(true, record, false); };\r\n        less.refresh = function (reload, modifyVars, clearFileCache) {\r\n            if ((reload || clearFileCache) && clearFileCache !== false) {\r\n                fileManager.clearFileCache();\r\n            }\r\n            return new Promise(function (resolve, reject) {\r\n                var startTime;\r\n                var endTime;\r\n                var totalMilliseconds;\r\n                var remainingSheets;\r\n                startTime = endTime = new Date();\r\n                // Set counter for remaining unprocessed sheets\r\n                remainingSheets = less.sheets.length;\r\n                if (remainingSheets === 0) {\r\n                    endTime = new Date();\r\n                    totalMilliseconds = endTime - startTime;\r\n                    less.logger.info('Less has finished and no sheets were loaded.');\r\n                    resolve({\r\n                        startTime: startTime,\r\n                        endTime: endTime,\r\n                        totalMilliseconds: totalMilliseconds,\r\n                        sheets: less.sheets.length\r\n                    });\r\n                }\r\n                else {\r\n                    // Relies on less.sheets array, callback seems to be guaranteed to be called for every element of the array\r\n                    loadStyleSheets(function (e, css, _, sheet, webInfo) {\r\n                        if (e) {\r\n                            errors.add(e, e.href || sheet.href);\r\n                            reject(e);\r\n                            return;\r\n                        }\r\n                        if (webInfo.local) {\r\n                            less.logger.info(\"Loading \" + sheet.href + \" from cache.\");\r\n                        }\r\n                        else {\r\n                            less.logger.info(\"Rendered \" + sheet.href + \" successfully.\");\r\n                        }\r\n                        browser.createCSS(window.document, css, sheet);\r\n                        less.logger.info(\"CSS for \" + sheet.href + \" generated in \" + (new Date() - endTime) + \"ms\");\r\n                        // Count completed sheet\r\n                        remainingSheets--;\r\n                        // Check if the last remaining sheet was processed and then call the promise\r\n                        if (remainingSheets === 0) {\r\n                            totalMilliseconds = new Date() - startTime;\r\n                            less.logger.info(\"Less has finished. CSS generated in \" + totalMilliseconds + \"ms\");\r\n                            resolve({\r\n                                startTime: startTime,\r\n                                endTime: endTime,\r\n                                totalMilliseconds: totalMilliseconds,\r\n                                sheets: less.sheets.length\r\n                            });\r\n                        }\r\n                        endTime = new Date();\r\n                    }, reload, modifyVars);\r\n                }\r\n                loadStyles(modifyVars);\r\n            });\r\n        };\r\n        less.refreshStyles = loadStyles;\r\n        return less;\r\n    });\n\n    /**\r\n     * Kicks off less and compiles any stylesheets\r\n     * used in the browser distributed version of less\r\n     * to kick-start less using the browser api\r\n     */\r\n    var options$1 = defaultOptions();\r\n    if (window.less) {\r\n        for (var key in window.less) {\r\n            if (window.less.hasOwnProperty(key)) {\r\n                options$1[key] = window.less[key];\r\n            }\r\n        }\r\n    }\r\n    addDefaultOptions(window, options$1);\r\n    options$1.plugins = options$1.plugins || [];\r\n    if (window.LESS_PLUGINS) {\r\n        options$1.plugins = options$1.plugins.concat(window.LESS_PLUGINS);\r\n    }\r\n    var less = root(window, options$1);\r\n    window.less = less;\r\n    var css;\r\n    var head;\r\n    var style;\r\n    // Always restore page visibility\r\n    function resolveOrReject(data) {\r\n        if (data.filename) {\r\n            console.warn(data);\r\n        }\r\n        if (!options$1.async) {\r\n            head.removeChild(style);\r\n        }\r\n    }\r\n    if (options$1.onReady) {\r\n        if (/!watch/.test(window.location.hash)) {\r\n            less.watch();\r\n        }\r\n        // Simulate synchronous stylesheet loading by hiding page rendering\r\n        if (!options$1.async) {\r\n            css = 'body { display: none !important }';\r\n            head = document.head || document.getElementsByTagName('head')[0];\r\n            style = document.createElement('style');\r\n            style.type = 'text/css';\r\n            if (style.styleSheet) {\r\n                style.styleSheet.cssText = css;\r\n            }\r\n            else {\r\n                style.appendChild(document.createTextNode(css));\r\n            }\r\n            head.appendChild(style);\r\n        }\r\n        less.registerStylesheetsImmediately();\r\n        less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);\r\n    }\n\n    return less;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_less@4.1.1@less/dist/less.js\n// module id = o5ze\n// module chunks = 3"],"sourceRoot":""}